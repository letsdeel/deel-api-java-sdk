/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateTimeOff201Response;
import org.openapitools.client.model.CreateTimeOffRequest;
import org.openapitools.client.model.GetPoliciesForProfile200Response;
import org.openapitools.client.model.GetProfileEntitlements200Response;
import org.openapitools.client.model.GetTimeOffsQuery200Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.UpdateTimeOff200Response;
import org.openapitools.client.model.UpdateTimeOffRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeOffApi
 */
@Disabled
public class TimeOffApiTest {

    private final TimeOffApi api = new TimeOffApi();

    /**
     * Create time-off request
     *
     * Create time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimeOffTest() throws ApiException {
        CreateTimeOffRequest createTimeOffRequest = null;
        CreateTimeOff201Response response = api.createTimeOff(createTimeOffRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete time-off request
     *
     * Delete time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimeOffTest() throws ApiException {
        UUID timeOffId = null;
        Object response = api.deleteTimeOff(timeOffId)
                .execute();
        // TODO: test validations
    }

    /**
     * List policies
     *
     * List policies  **Token scopes**: &#x60;time-off:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPoliciesForProfileTest() throws ApiException {
        String hrisProfileId = null;
        String policyTypeName = null;
        String policyTypeId = null;
        GetPoliciesForProfile200Response response = api.getPoliciesForProfile(hrisProfileId)
                .policyTypeName(policyTypeName)
                .policyTypeId(policyTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Profile Entitlements
     *
     * List time-off entitlements.  **Token scopes**: &#x60;time-off:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileEntitlementsTest() throws ApiException {
        UUID hrisProfileId = null;
        String policyTypeName = null;
        LocalDate trackingPeriodDate = null;
        GetProfileEntitlements200Response response = api.getProfileEntitlements(hrisProfileId)
                .policyTypeName(policyTypeName)
                .trackingPeriodDate(trackingPeriodDate)
                .execute();
        // TODO: test validations
    }

    /**
     * List time-off requests
     *
     * List time-off requests  **Token scopes**: &#x60;time-off:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffsQueryTest() throws ApiException {
        UUID hrisProfileId = null;
        String organizationId = null;
        List<String> status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        OffsetDateTime approvalStartDate = null;
        OffsetDateTime approvalEndDate = null;
        OffsetDateTime updatedStartDate = null;
        OffsetDateTime updatedEndDate = null;
        Integer pageSize = null;
        List<UUID> policyTypes = null;
        String next = null;
        GetTimeOffsQuery200Response response = api.getTimeOffsQuery(hrisProfileId)
                .organizationId(organizationId)
                .status(status)
                .startDate(startDate)
                .endDate(endDate)
                .approvalStartDate(approvalStartDate)
                .approvalEndDate(approvalEndDate)
                .updatedStartDate(updatedStartDate)
                .updatedEndDate(updatedEndDate)
                .pageSize(pageSize)
                .policyTypes(policyTypes)
                .next(next)
                .execute();
        // TODO: test validations
    }

    /**
     * List time-off requests for Organization
     *
     * List time-off requests for Organization  **Token scopes**: &#x60;time-off:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffsQueryForOrganizationTest() throws ApiException {
        List<String> status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        OffsetDateTime approvalStartDate = null;
        OffsetDateTime approvalEndDate = null;
        OffsetDateTime updatedStartDate = null;
        OffsetDateTime updatedEndDate = null;
        Integer pageSize = null;
        List<UUID> policyTypes = null;
        String next = null;
        GetTimeOffsQuery200Response response = api.getTimeOffsQueryForOrganization()
                .status(status)
                .startDate(startDate)
                .endDate(endDate)
                .approvalStartDate(approvalStartDate)
                .approvalEndDate(approvalEndDate)
                .updatedStartDate(updatedStartDate)
                .updatedEndDate(updatedEndDate)
                .pageSize(pageSize)
                .policyTypes(policyTypes)
                .next(next)
                .execute();
        // TODO: test validations
    }

    /**
     * Update time-off request
     *
     * Update time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeOffTest() throws ApiException {
        UUID timeOffId = null;
        UpdateTimeOffRequest updateTimeOffRequest = null;
        UpdateTimeOff200Response response = api.updateTimeOff(timeOffId, updateTimeOffRequest)
                .execute();
        // TODO: test validations
    }

}
