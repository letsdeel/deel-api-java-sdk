/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateOrganizationRole200Response;
import org.openapitools.client.model.CreateOrganizationRoleRequest;
import org.openapitools.client.model.GetDepartments200Response;
import org.openapitools.client.model.GetDepartments404Response;
import org.openapitools.client.model.GetLegalEntityList200Response;
import org.openapitools.client.model.GetOrganizationRoles200ResponseInner;
import org.openapitools.client.model.GetOrganizationRoles400Response;
import org.openapitools.client.model.GetOrganizationRoles401Response;
import org.openapitools.client.model.GetOrganizationRoles500Response;
import org.openapitools.client.model.GetOrganizations200Response;
import org.openapitools.client.model.GetOrganizations401Response;
import org.openapitools.client.model.GetOrganizations404Response;
import org.openapitools.client.model.GetOrganizations500Response;
import org.openapitools.client.model.GetTeams200Response;
import org.openapitools.client.model.GetTeams404Response;
import org.openapitools.client.model.UpdateOrganizationRole200Response;
import org.openapitools.client.model.UpdateOrganizationRoleRequest;
import org.openapitools.client.model.WorkingLocationsContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Create organization custom role.
     *
     * Create organization custom role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationRoleTest() throws ApiException {
        CreateOrganizationRoleRequest createOrganizationRoleRequest = null;
        CreateOrganizationRole200Response response = api.createOrganizationRole(createOrganizationRoleRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Departments
     *
     * Retrieve a list of departments within the organization associated with the authenticated user. Each department contains its unique identifier, name, and optionally, the parent department if applicable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDepartmentsTest() throws ApiException {
        GetDepartments200Response response = api.getDepartments()
                .execute();
        // TODO: test validations
    }

    /**
     * List of legal entities
     *
     * Retrieve a list of legal entities in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLegalEntityListTest() throws ApiException {
        String country = null;
        GetLegalEntityList200Response response = api.getLegalEntityList()
                .country(country)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the roles of the current organization.
     *
     * Retrieve a list of roles assigned within the current organization. Each role has a unique identifier, name, scope, and optional HRIS structure ID. This helps determine the types of roles within the organization and their corresponding access levels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationRolesTest() throws ApiException {
        List<GetOrganizationRoles200ResponseInner> response = api.getOrganizationRoles()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Current Organization
     *
     * Retrieve details of the current organization associated with the authenticated user. The organization is automatically detected based on the authentication token provided in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsTest() throws ApiException {
        GetOrganizations200Response response = api.getOrganizations()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Team List
     *
     * Retrieve a list of teams within the organization associated with the authenticated user. This list provides basic details about each team, including the team ID and name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsTest() throws ApiException {
        GetTeams200Response response = api.getTeams()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve working locations
     *
     * Get organization working locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkingLocationsTest() throws ApiException {
        WorkingLocationsContainer response = api.getWorkingLocations()
                .execute();
        // TODO: test validations
    }

    /**
     * Update organization custom role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationRoleTest() throws ApiException {
        String roleId = null;
        UpdateOrganizationRoleRequest updateOrganizationRoleRequest = null;
        UpdateOrganizationRole200Response response = api.updateOrganizationRole(roleId, updateOrganizationRoleRequest)
                .execute();
        // TODO: test validations
    }

}
