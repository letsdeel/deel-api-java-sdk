/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddGpBankAccount201Response;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateGPContract201Response;
import org.openapitools.client.model.CreateGPContractRequest;
import org.openapitools.client.model.GPEmployeeAddressUpdatedContainer;
import org.openapitools.client.model.GPEmployeeInformationUpdatedContainer;
import org.openapitools.client.model.GetDownloadUrlForGPPayslip200Response;
import org.openapitools.client.model.GetGPLegalEntities200Response;
import org.openapitools.client.model.GetGpBankAccounts200Response;
import org.openapitools.client.model.GetGpBankGuide200Response;
import org.openapitools.client.model.GetGrossToNetGPReports200Response;
import org.openapitools.client.model.GetWorkerPayslips200Response;
import java.time.LocalDate;
import org.openapitools.client.model.PatchGpBankAccount200Response;
import org.openapitools.client.model.RequestTermination201Response;
import org.openapitools.client.model.RequestTerminationRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateGPEmployeeAddress201Response;
import org.openapitools.client.model.UpdateGPEmployeeAddressRequest;
import org.openapitools.client.model.UpdateGPEmployeeAddressRequestData;
import org.openapitools.client.model.UpdateGPEmployeeCompensation200Response;
import org.openapitools.client.model.UpdateGPEmployeeCompensationRequest;
import org.openapitools.client.model.UpdateGPEmployeeInformationRequest;
import org.openapitools.client.model.UpdateGPEmployeePto200Response;
import org.openapitools.client.model.UpdateGPEmployeePtoRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GlobalPayrollApi
 */
@Disabled
public class GlobalPayrollApiTest {

    private final GlobalPayrollApi api = new GlobalPayrollApi();

    /**
     * Add bank account
     *
     * Add a new bank account for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGpBankAccountTest() throws ApiException {
        UUID workerId = null;
        UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest = null;
        AddGpBankAccount201Response response = api.addGpBankAccount(workerId, updateGPEmployeeAddressRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a contract
     *
     * Create a Global Payroll contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGPContractTest() throws ApiException {
        CreateGPContractRequest createGPContractRequest = null;
        CreateGPContract201Response response = api.createGPContract(createGPContractRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Download gross-to-net report
     *
     * Download global payroll reports detailing gross-to-net calculations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadGrossToNetGPReportTest() throws ApiException {
        UUID gpReportId = null;
        String response = api.downloadGrossToNetGPReport(gpReportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download payslip PDF
     *
     * Get a pre-signed download URL for a GP payslip PDF.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadUrlForGPPayslipTest() throws ApiException {
        UUID id = null;
        UUID payslipId = null;
        GetDownloadUrlForGPPayslip200Response response = api.getDownloadUrlForGPPayslip(id, payslipId)
                .execute();
        // TODO: test validations
    }

    /**
     * List payroll events by legal entity
     *
     * Get a list of global payroll events by legal entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGPLegalEntitiesTest() throws ApiException {
        UUID id = null;
        LocalDate startDate = null;
        GetGPLegalEntities200Response response = api.getGPLegalEntities(id)
                .startDate(startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve bank accounts
     *
     * Retrieve all bank accounts for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGpBankAccountsTest() throws ApiException {
        String workerId = null;
        GetGpBankAccounts200Response response = api.getGpBankAccounts(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve bank guide
     *
     * Retrieve the bank form guide for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGpBankGuideTest() throws ApiException {
        UUID workerId = null;
        GetGpBankGuide200Response response = api.getGpBankGuide(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List gross-to-net report
     *
     * Get a list of global payroll reports detailing gross-to-net calculations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrossToNetGPReportsTest() throws ApiException {
        UUID id = null;
        GetGrossToNetGPReports200Response response = api.getGrossToNetGPReports(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve employee payslips
     *
     * Get a list of payslips for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerPayslipsTest() throws ApiException {
        UUID id = null;
        GetWorkerPayslips200Response response = api.getWorkerPayslips(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Modify bank account
     *
     * Modify bank account for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchGpBankAccountTest() throws ApiException {
        UUID workerId = null;
        UUID bankId = null;
        UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData = null;
        PatchGpBankAccount200Response response = api.patchGpBankAccount(workerId, bankId, updateGPEmployeeAddressRequestData)
                .execute();
        // TODO: test validations
    }

    /**
     * Request termination
     *
     * Request a termination for a global payroll employee. A successful call starts the termination process and does not confirm termination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestTerminationTest() throws ApiException {
        UUID workerId = null;
        RequestTerminationRequest requestTerminationRequest = null;
        RequestTermination201Response response = api.requestTermination(workerId, requestTerminationRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update address
     *
     * Update the address of a Global Payroll employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGPEmployeeAddressTest() throws ApiException {
        UUID workerId = null;
        UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest = null;
        GPEmployeeAddressUpdatedContainer response = api.updateGPEmployeeAddress(workerId, updateGPEmployeeAddressRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update compensation
     *
     * Update the compensation of a Global Payroll employee. Returns the full compensation history including the update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGPEmployeeCompensationTest() throws ApiException {
        UUID workerId = null;
        UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest = null;
        UpdateGPEmployeeCompensation200Response response = api.updateGPEmployeeCompensation(workerId, updateGPEmployeeCompensationRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee information
     *
     * Update Global Payroll employee information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGPEmployeeInformationTest() throws ApiException {
        UUID workerId = null;
        UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest = null;
        GPEmployeeInformationUpdatedContainer response = api.updateGPEmployeeInformation(workerId, updateGPEmployeeInformationRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update PTO policy
     *
     * Update the PTO policy of a Global Payroll employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGPEmployeePtoTest() throws ApiException {
        UUID workerId = null;
        UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest = null;
        UpdateGPEmployeePto200Response response = api.updateGPEmployeePto(workerId, updateGPEmployeePtoRequest)
                .execute();
        // TODO: test validations
    }

}
