/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateOrUpdateChildRelationBetweenProfilesRequest;
import org.openapitools.client.model.CreateOrUpdateParentRelationBetweenProfilesRequest;
import org.openapitools.client.model.CreateWorkerRelationExternalIdRequest;
import org.openapitools.client.model.CreateWorkerRelationRequest;
import org.openapitools.client.model.CreateWorkerRelationType201Response;
import org.openapitools.client.model.CreateWorkerRelationTypeRequest;
import org.openapitools.client.model.GetAllProfileWorkerRelations200Response;
import org.openapitools.client.model.GetAllProfileWorkerRelationsExternalId200Response;
import org.openapitools.client.model.GetAllWorkerRelationTypes200Response;
import java.util.UUID;
import org.openapitools.client.model.UpdateWorkerRelationType204Response;
import org.openapitools.client.model.UpdateWorkerRelationTypeExternalId204Response;
import org.openapitools.client.model.UpdateWorkerRelationTypeRequest;
import org.openapitools.client.model.UpsertChildWorkerRelationsExternalIdRequest;
import org.openapitools.client.model.UpsertChildWorkerRelationsRequest;
import org.openapitools.client.model.UpsertParentWorkerRelationsExternalIdRequest;
import org.openapitools.client.model.UpsertParentWorkerRelationsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkerRelationsApi
 */
@Disabled
public class WorkerRelationsApiTest {

    private final WorkerRelationsApi api = new WorkerRelationsApi();

    /**
     * Create child worker relation with external Id
     *
     * Create child worker relation with external Id.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateChildRelationBetweenProfilesTest() throws ApiException {
        String hrisProfileExternalId = null;
        CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest = null;
        api.createOrUpdateChildRelationBetweenProfiles(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a parent worker relation with external id
     *
     * Create a parent worker relation with external id.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateParentRelationBetweenProfilesTest() throws ApiException {
        UUID hrisProfileExternalId = null;
        CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest = null;
        api.createOrUpdateParentRelationBetweenProfiles(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a worker relation
     *
     * Create a hierarchical relation between a worker and its subordinates.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkerRelationTest() throws ApiException {
        CreateWorkerRelationRequest createWorkerRelationRequest = null;
        api.createWorkerRelation(createWorkerRelationRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create worker relation with external Ids
     *
     * Create a hierarchical relation between a worker and its subordinates using external IDs to identify them.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkerRelationExternalIdTest() throws ApiException {
        CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest = null;
        api.createWorkerRelationExternalId(createWorkerRelationExternalIdRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create worker relation type
     *
     * Create worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkerRelationTypeTest() throws ApiException {
        CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest = null;
        CreateWorkerRelationType201Response response = api.createWorkerRelationType(createWorkerRelationTypeRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a worker relation
     *
     * Delete a worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkerRelationTest() throws ApiException {
        UUID hrisProfileOid = null;
        api.deleteWorkerRelation(hrisProfileOid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a worker relation by external id
     *
     * Delete a worker relation by external id.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkerRelationExternalIdTest() throws ApiException {
        String profileId = null;
        api.deleteWorkerRelationExternalId(profileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a worker relation type
     *
     * Delete a worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkerRelationTypeTest() throws ApiException {
        UUID typeId = null;
        api.deleteWorkerRelationType(typeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a worker relation type by external id
     *
     * Delete a Worker Relation Type by the external ID.  **Token scopes**: &#x60;organizations:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkerRelationTypeExternalIdTest() throws ApiException {
        String externalId = null;
        api.deleteWorkerRelationTypeExternalId(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of worker relations
     *
     * List of worker relations.  **Token scopes**: &#x60;profile:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProfileWorkerRelationsTest() throws ApiException {
        UUID hrisProfileOid = null;
        GetAllProfileWorkerRelations200Response response = api.getAllProfileWorkerRelations(hrisProfileOid)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch Worker Relations of a given HrisProfile by external id
     *
     * Fetch Worker Relations of a given HrisProfile by external id.  **Token scopes**: &#x60;profile:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProfileWorkerRelationsExternalIdTest() throws ApiException {
        String profileId = null;
        GetAllProfileWorkerRelationsExternalId200Response response = api.getAllProfileWorkerRelationsExternalId(profileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all worker relation types
     *
     * Retrieve all worker relation types.  **Token scopes**: &#x60;organizations:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWorkerRelationTypesTest() throws ApiException {
        GetAllWorkerRelationTypes200Response response = api.getAllWorkerRelationTypes()
                .execute();
        // TODO: test validations
    }

    /**
     * Update a worker relation type
     *
     * Update a worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkerRelationTypeTest() throws ApiException {
        UUID typeId = null;
        UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest = null;
        UpdateWorkerRelationType204Response response = api.updateWorkerRelationType(typeId, updateWorkerRelationTypeRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a worker relation type by external id
     *
     * Update a worker relation type by external id.  **Token scopes**: &#x60;organizations:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkerRelationTypeExternalIdTest() throws ApiException {
        String externalId = null;
        UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest = null;
        UpdateWorkerRelationTypeExternalId204Response response = api.updateWorkerRelationTypeExternalId(externalId, updateWorkerRelationTypeRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create child worker relation
     *
     * Create child worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertChildWorkerRelationsTest() throws ApiException {
        UUID hrisProfileOid = null;
        UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest = null;
        api.upsertChildWorkerRelations(hrisProfileOid, upsertChildWorkerRelationsRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create child worker relation with external Id
     *
     * Create child worker relation with external Id.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertChildWorkerRelationsExternalIdTest() throws ApiException {
        String profileId = null;
        UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest = null;
        api.upsertChildWorkerRelationsExternalId(profileId, upsertChildWorkerRelationsExternalIdRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a parent worker relation
     *
     * Create a parent worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertParentWorkerRelationsTest() throws ApiException {
        UUID hrisProfileOid = null;
        UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest = null;
        api.upsertParentWorkerRelations(hrisProfileOid, upsertParentWorkerRelationsRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a parent worker relation with external id
     *
     * Create a parent worker relation with external id.  **Token scopes**: &#x60;profile:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertParentWorkerRelationsExternalIdTest() throws ApiException {
        UUID profileId = null;
        UpsertParentWorkerRelationsExternalIdRequest upsertParentWorkerRelationsExternalIdRequest = null;
        api.upsertParentWorkerRelationsExternalId(profileId, upsertParentWorkerRelationsExternalIdRequest)
                .execute();
        // TODO: test validations
    }

}
