/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateShifts201Response;
import org.openapitools.client.model.CreateShiftsRequest;
import org.openapitools.client.model.GetShiftDetails200Response;
import org.openapitools.client.model.GetShiftDetails400Response;
import org.openapitools.client.model.GetShifts200Response;
import org.openapitools.client.model.UpdateShift200Response;
import org.openapitools.client.model.UpdateShiftRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeTrackingShiftsApi
 */
@Disabled
public class TimeTrackingShiftsApiTest {

    private final TimeTrackingShiftsApi api = new TimeTrackingShiftsApi();

    /**
     * Create shifts
     *
     * Create shifts  **Token scopes**: &#x60;time-tracking:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShiftsTest() throws ApiException {
        CreateShiftsRequest createShiftsRequest = null;
        CreateShifts201Response response = api.createShifts()
                .createShiftsRequest(createShiftsRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Shift by External ID
     *
     * This endpoint deletes a shift using its external ID. Once deleted, the shift will no longer be retrievable or editable.  **Token scopes**: &#x60;time-tracking:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteShiftExternalIdTest() throws ApiException {
        String externalId = null;
        api.deleteShiftExternalId(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get shift details
     *
     * Retrieve details of a specific shift by external ID.  **Token scopes**: &#x60;time-tracking:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShiftDetailsTest() throws ApiException {
        String externalId = null;
        GetShiftDetails200Response response = api.getShiftDetails(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of shifts
     *
     * Retrieve a paginated list of shifts with details such as start and end times, breaks, metadata, and summary metrics. Supports pagination through &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  **Token scopes**: &#x60;time-tracking:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShiftsTest() throws ApiException {
        String limit = null;
        String offset = null;
        GetShifts200Response response = api.getShifts()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a shift
     *
     * Update specific fields of an existing shift by its unique &#x60;external_id&#x60;. This includes shift metadata (start and end times, breaks, and approval dates) and associated summary details.  **Token scopes**: &#x60;time-tracking:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShiftTest() throws ApiException {
        String externalId = null;
        UpdateShiftRequest updateShiftRequest = null;
        UpdateShift200Response response = api.updateShift(externalId, updateShiftRequest)
                .execute();
        // TODO: test validations
    }

}
