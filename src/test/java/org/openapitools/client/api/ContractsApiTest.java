/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddContractDocument201Response;
import org.openapitools.client.model.AlternateEmailItem;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.ApproveExerciseEquity200Response;
import org.openapitools.client.model.ApproveExerciseEquityRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.ContractDocumentContainer;
import org.openapitools.client.model.DownloadWorkerDocumentsByIdContainer;
import java.io.File;
import org.openapitools.client.model.GenericResultCreated;
import org.openapitools.client.model.GenericResultUpdated;
import org.openapitools.client.model.GetContractById200Response;
import org.openapitools.client.model.GetContractList200Response;
import org.openapitools.client.model.GetContractListCurrenciesParameter;
import org.openapitools.client.model.GetContractPaymentDates200Response;
import org.openapitools.client.model.GetContractTemplates200Response;
import org.openapitools.client.model.GetInviteLink200Response;
import org.openapitools.client.model.InputToPatchContractExternalId;
import org.openapitools.client.model.InviteToSignContractRequest;
import org.openapitools.client.model.RequestExerciseEquity201Response;
import org.openapitools.client.model.RequestExerciseEquityRequest;
import org.openapitools.client.model.SignContract201Response;
import org.openapitools.client.model.SignContractRequest;
import java.util.UUID;
import org.openapitools.client.model.UninviteToSignContract200Response;
import org.openapitools.client.model.WorkerDocumentsByIdContainer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContractsApi
 */
@Disabled
public class ContractsApiTest {

    private final ContractsApi api = new ContractsApi();

    /**
     * Attach a file to contract
     *
     * Attach a file to contract document.  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addContractDocumentTest() throws ApiException {
        String contractId = null;
        File _file = null;
        AddContractDocument201Response response = api.addContractDocument(contractId)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve an equity exercise
     *
     * Approve an equity exercise.  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveExerciseEquityTest() throws ApiException {
        UUID publicId = null;
        ApproveExerciseEquityRequest approveExerciseEquityRequest = null;
        ApproveExerciseEquity200Response response = api.approveExerciseEquity(publicId, approveExerciseEquityRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Archive a contract
     *
     * Archive a terminated, cancelled or completed contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveContractTest() throws ApiException {
        String contractId = null;
        GenericResultUpdated response = api.archiveContract(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * External Id
     *
     * Add an external Id to a Deel contract. You can use this to add a Deel contract&#39;s refernece Id in your platform. External Id can be passed as a query parameter in List contract endpoint to find this conract later.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachExternalIdTest() throws ApiException {
        String contractId = null;
        InputToPatchContractExternalId inputToPatchContractExternalId = null;
        GenericResultCreated response = api.attachExternalId(contractId, inputToPatchContractExternalId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit the file attached to contract document.
     *
     * Overwrite the file currently attached to contract document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editContractDocumentTest() throws ApiException {
        String contractId = null;
        File _file = null;
        ContractDocumentContainer response = api.editContractDocument(contractId)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Find contract emails by ID
     *
     * Returns an array of alternate email objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlternateEmailsByContractIdTest() throws ApiException {
        String contractId = null;
        List<AlternateEmailItem> response = api.getAlternateEmailsByContractId(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single contract
     *
     * Retrieve a single contract.  **Token scopes**: &#x60;contracts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractByIdTest() throws ApiException {
        String contractId = null;
        GetContractById200Response response = api.getContractById(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of contracts
     *
     * Retrieve a list of contracts.  **Token scopes**: &#x60;contracts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractListTest() throws ApiException {
        String afterCursor = null;
        String limit = null;
        String orderDirection = null;
        List<String> types = null;
        List<String> statuses = null;
        String teamId = null;
        String externalId = null;
        List<String> countries = null;
        GetContractListCurrenciesParameter currencies = null;
        String search = null;
        String sortBy = null;
        GetContractList200Response response = api.getContractList()
                .afterCursor(afterCursor)
                .limit(limit)
                .orderDirection(orderDirection)
                .types(types)
                .statuses(statuses)
                .teamId(teamId)
                .externalId(externalId)
                .countries(countries)
                .currencies(currencies)
                .search(search)
                .sortBy(sortBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve contractor payment dates
     *
     * Fetches a list of payment dates associated with a specific contract. This endpoint provides information on when contractors are scheduled to be paid, along with the current status of each payment cycle.  **Token scopes**: &#x60;contracts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractPaymentDatesTest() throws ApiException {
        String contractId = null;
        GetContractPaymentDates200Response response = api.getContractPaymentDates(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve contract templates
     *
     * Fetches a collection of contract templates available within your organization. Use this endpoint to retrieve metadata about the templates.  **Token scopes**: &#x60;contracts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractTemplatesTest() throws ApiException {
        GetContractTemplates200Response response = api.getContractTemplates()
                .execute();
        // TODO: test validations
    }

    /**
     * Download worker document
     *
     * Get the download link of worker document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadWorkerDocumentsByIdTest() throws ApiException {
        String workerId = null;
        BigDecimal documentId = null;
        DownloadWorkerDocumentsByIdContainer response = api.getDownloadWorkerDocumentsById(workerId, documentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get worker invite link
     *
     * Get invite link generated for worker  **Token scopes**: &#x60;contracts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInviteLinkTest() throws ApiException {
        String contractId = null;
        GetInviteLink200Response response = api.getInviteLink(contractId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of worker documents
     *
     * Retrieve a list of documents of a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerDocumentsByIdTest() throws ApiException {
        String workerId = null;
        WorkerDocumentsByIdContainer response = api.getWorkerDocumentsById(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send contract to worker
     *
     * Invite a worker to sign the contract. Worker will be notified via email  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteToSignContractTest() throws ApiException {
        String contractId = null;
        InviteToSignContractRequest inviteToSignContractRequest = null;
        SignContract201Response response = api.inviteToSignContract(contractId, inviteToSignContractRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a request to exercise equity.
     *
     * Create a request to exercise equity.  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestExerciseEquityTest() throws ApiException {
        RequestExerciseEquityRequest requestExerciseEquityRequest = null;
        RequestExerciseEquity201Response response = api.requestExerciseEquity(requestExerciseEquityRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Sign a contract
     *
     * Sign a contract as a client.  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signContractTest() throws ApiException {
        String contractId = null;
        SignContractRequest signContractRequest = null;
        SignContract201Response response = api.signContract(contractId, signContractRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove invite
     *
     * Remove invite in order to re-invite a worker to sign the contract  **Token scopes**: &#x60;contracts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uninviteToSignContractTest() throws ApiException {
        String contractId = null;
        UninviteToSignContract200Response response = api.uninviteToSignContract(contractId)
                .execute();
        // TODO: test validations
    }

}
