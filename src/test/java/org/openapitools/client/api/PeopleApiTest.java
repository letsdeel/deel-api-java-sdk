/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorContainer;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateDirectEmployee201Response;
import org.openapitools.client.model.CreateDirectEmployeeRequest;
import org.openapitools.client.model.GetPeople200Response;
import org.openapitools.client.model.GetPeopleList200Response;
import org.openapitools.client.model.GetPeoplePersonalInformationByExternalId200Response;
import org.openapitools.client.model.GetPeoplePersonalInformationById200Response;
import org.openapitools.client.model.HrisDirectEmployee;
import org.openapitools.client.model.HrisDirectEmployeeContainer;
import org.openapitools.client.model.PeopleByIdContainer;
import java.util.UUID;
import org.openapitools.client.model.UpdatePeopleDepartment200Response;
import org.openapitools.client.model.UpdatePeopleDepartmentRequest;
import org.openapitools.client.model.UpdatePeoplePersonalInformationByExternalIdRequest;
import org.openapitools.client.model.UpdatePeoplePersonalInformationByIdRequest;
import org.openapitools.client.model.UpdatePeopleWorkingLocationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeopleApi
 */
@Disabled
public class PeopleApiTest {

    private final PeopleApi api = new PeopleApi();

    /**
     * Create a direct employee
     *
     * Create employee hired under your own entity to Deel HR. Manage your employee through Deel and export a payroll report to your own providers.  **Token scopes**: &#x60;people:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectEmployeeTest() throws ApiException {
        CreateDirectEmployeeRequest createDirectEmployeeRequest = null;
        CreateDirectEmployee201Response response = api.createDirectEmployee(createDirectEmployeeRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new Hris direct employee
     *
     * Create a new Hris direct employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectEmployeeOldTobeRemovedTest() throws ApiException {
        HrisDirectEmployee hrisDirectEmployee = null;
        HrisDirectEmployeeContainer response = api.createDirectEmployeeOldTobeRemoved(hrisDirectEmployee)
                .execute();
        // TODO: test validations
    }

    /**
     * Get my current personal profile
     *
     * Retrieve the current user&#39;s profile.  **Token scopes**: &#x60;people:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPeopleTest() throws ApiException {
        GetPeople200Response response = api.getPeople()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single person
     *
     * Retrieve a single person in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPeopleByIdTest() throws ApiException {
        String workerId = null;
        PeopleByIdContainer response = api.getPeopleById(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * List of people
     *
     * Retrieve a list of People in your organization.  **Token scopes**: &#x60;people:read&#x60;, &#x60;Users:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPeopleListTest() throws ApiException {
        BigDecimal offset = null;
        BigDecimal limit = null;
        String search = null;
        String sortBy = null;
        String sortOrder = null;
        List<String> hiringStatuses = null;
        GetPeopleList200Response response = api.getPeopleList()
                .offset(offset)
                .limit(limit)
                .search(search)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .hiringStatuses(hiringStatuses)
                .execute();
        // TODO: test validations
    }

    /**
     * Get personal information by external id
     *
     * Get worker&#39;s personal information by using an external identifier.  **Token scopes**: &#x60;people:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPeoplePersonalInformationByExternalIdTest() throws ApiException {
        String workerId = null;
        GetPeoplePersonalInformationByExternalId200Response response = api.getPeoplePersonalInformationByExternalId(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get personal information by id
     *
     * Get worker&#39;s personal information by using identifier.  **Token scopes**: &#x60;people:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPeoplePersonalInformationByIdTest() throws ApiException {
        String workerId = null;
        GetPeoplePersonalInformationById200Response response = api.getPeoplePersonalInformationById(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update department
     *
     * undefined  **Token scopes**: &#x60;people:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePeopleDepartmentTest() throws ApiException {
        String id = null;
        UpdatePeopleDepartmentRequest updatePeopleDepartmentRequest = null;
        UpdatePeopleDepartment200Response response = api.updatePeopleDepartment(id, updatePeopleDepartmentRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update personal information by external id
     *
     * Update worker&#39;s personal information by using an external identifier.  **Token scopes**: &#x60;people:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePeoplePersonalInformationByExternalIdTest() throws ApiException {
        String workerId = null;
        UpdatePeoplePersonalInformationByExternalIdRequest updatePeoplePersonalInformationByExternalIdRequest = null;
        api.updatePeoplePersonalInformationByExternalId(workerId)
                .updatePeoplePersonalInformationByExternalIdRequest(updatePeoplePersonalInformationByExternalIdRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update personal information
     *
     * Update worker&#39;s personal information.  **Token scopes**: &#x60;people:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePeoplePersonalInformationByIdTest() throws ApiException {
        UUID workerId = null;
        UpdatePeoplePersonalInformationByIdRequest updatePeoplePersonalInformationByIdRequest = null;
        api.updatePeoplePersonalInformationById(workerId)
                .updatePeoplePersonalInformationByIdRequest(updatePeoplePersonalInformationByIdRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update working location
     *
     * undefined  **Token scopes**: &#x60;people:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePeopleWorkingLocationTest() throws ApiException {
        String id = null;
        UpdatePeopleWorkingLocationRequest updatePeopleWorkingLocationRequest = null;
        UpdatePeopleDepartment200Response response = api.updatePeopleWorkingLocation(id, updatePeopleWorkingLocationRequest)
                .execute();
        // TODO: test validations
    }

}
