/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OffboardingTrackerGet200Response;
import org.openapitools.client.model.OffboardingTrackerGetPaginationParameter;
import org.openapitools.client.model.OffboardingTrackerIdGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OffboardingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OffboardingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OffboardingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call offboardingTrackerGetCall(String search, List<String> hiringTypes, List<String> progressStatuses, Integer limit, String sortBy, String sortOrder, OffboardingTrackerGetPaginationParameter pagination, Boolean includeOverview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offboarding/tracker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (hiringTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hiring_types", hiringTypes));
        }

        if (progressStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "progress_statuses", progressStatuses));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (includeOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_overview", includeOverview));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offboardingTrackerGetValidateBeforeCall(String search, List<String> hiringTypes, List<String> progressStatuses, Integer limit, String sortBy, String sortOrder, OffboardingTrackerGetPaginationParameter pagination, Boolean includeOverview, final ApiCallback _callback) throws ApiException {
        return offboardingTrackerGetCall(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview, _callback);

    }


    private ApiResponse<OffboardingTrackerGet200Response> offboardingTrackerGetWithHttpInfo(String search, List<String> hiringTypes, List<String> progressStatuses, Integer limit, String sortBy, String sortOrder, OffboardingTrackerGetPaginationParameter pagination, Boolean includeOverview) throws ApiException {
        okhttp3.Call localVarCall = offboardingTrackerGetValidateBeforeCall(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview, null);
        Type localVarReturnType = new TypeToken<OffboardingTrackerGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call offboardingTrackerGetAsync(String search, List<String> hiringTypes, List<String> progressStatuses, Integer limit, String sortBy, String sortOrder, OffboardingTrackerGetPaginationParameter pagination, Boolean includeOverview, final ApiCallback<OffboardingTrackerGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = offboardingTrackerGetValidateBeforeCall(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        Type localVarReturnType = new TypeToken<OffboardingTrackerGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIoffboardingTrackerGetRequest {
        private String search;
        private List<String> hiringTypes;
        private List<String> progressStatuses;
        private Integer limit;
        private String sortBy;
        private String sortOrder;
        private OffboardingTrackerGetPaginationParameter pagination;
        private Boolean includeOverview;

        private APIoffboardingTrackerGetRequest() {
        }

        /**
         * Set search
         * @param search Search term to filter contracts by name or other attributes (optional)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest search(String search) {
            this.search = search;
            return this;
        }

        /**
         * Set hiringTypes
         * @param hiringTypes  (optional)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest hiringTypes(List<String> hiringTypes) {
            this.hiringTypes = hiringTypes;
            return this;
        }

        /**
         * Set progressStatuses
         * @param progressStatuses  (optional)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest progressStatuses(List<String> progressStatuses) {
            this.progressStatuses = progressStatuses;
            return this;
        }

        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 20)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Field to sort by (optional, default to progressStatusWeight)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set sortOrder
         * @param sortOrder Sorting order (optional, default to ASC)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Set pagination
         * @param pagination  (optional)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest pagination(OffboardingTrackerGetPaginationParameter pagination) {
            this.pagination = pagination;
            return this;
        }

        /**
         * Set includeOverview
         * @param includeOverview Include an overview of the contract (optional, default to false)
         * @return APIoffboardingTrackerGetRequest
         */
        public APIoffboardingTrackerGetRequest includeOverview(Boolean includeOverview) {
            this.includeOverview = includeOverview;
            return this;
        }

        /**
         * Build call for offboardingTrackerGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of offboarding </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return offboardingTrackerGetCall(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        }

        /**
         * Execute offboardingTrackerGet request
         * @return OffboardingTrackerGet200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of offboarding </td><td>  -  </td></tr>
         </table>
         */
        public OffboardingTrackerGet200Response execute() throws ApiException {
            ApiResponse<OffboardingTrackerGet200Response> localVarResp = offboardingTrackerGetWithHttpInfo(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview);
            return localVarResp.getData();
        }

        /**
         * Execute offboardingTrackerGet request with HTTP info returned
         * @return ApiResponse&lt;OffboardingTrackerGet200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of offboarding </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffboardingTrackerGet200Response> executeWithHttpInfo() throws ApiException {
            return offboardingTrackerGetWithHttpInfo(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview);
        }

        /**
         * Execute offboardingTrackerGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of offboarding </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffboardingTrackerGet200Response> _callback) throws ApiException {
            return offboardingTrackerGetAsync(search, hiringTypes, progressStatuses, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        }
    }

    /**
     * Retrieve offboarding list
     * Retrieve offboarding list  **Token scopes**: &#x60;contracts:read&#x60;, &#x60;people:read&#x60;
     * @return APIoffboardingTrackerGetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of offboarding </td><td>  -  </td></tr>
     </table>
     */
    public APIoffboardingTrackerGetRequest offboardingTrackerGet() {
        return new APIoffboardingTrackerGetRequest();
    }
    private okhttp3.Call offboardingTrackerHrisProfileOidGetCall(String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offboarding/tracker/hris_profile/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offboardingTrackerHrisProfileOidGetValidateBeforeCall(String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling offboardingTrackerHrisProfileOidGet(Async)");
        }

        return offboardingTrackerHrisProfileOidGetCall(oid, _callback);

    }


    private ApiResponse<OffboardingTrackerIdGet200Response> offboardingTrackerHrisProfileOidGetWithHttpInfo(String oid) throws ApiException {
        okhttp3.Call localVarCall = offboardingTrackerHrisProfileOidGetValidateBeforeCall(oid, null);
        Type localVarReturnType = new TypeToken<OffboardingTrackerIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call offboardingTrackerHrisProfileOidGetAsync(String oid, final ApiCallback<OffboardingTrackerIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = offboardingTrackerHrisProfileOidGetValidateBeforeCall(oid, _callback);
        Type localVarReturnType = new TypeToken<OffboardingTrackerIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIoffboardingTrackerHrisProfileOidGetRequest {
        private final String oid;

        private APIoffboardingTrackerHrisProfileOidGetRequest(String oid) {
            this.oid = oid;
        }

        /**
         * Build call for offboardingTrackerHrisProfileOidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return offboardingTrackerHrisProfileOidGetCall(oid, _callback);
        }

        /**
         * Execute offboardingTrackerHrisProfileOidGet request
         * @return OffboardingTrackerIdGet200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public OffboardingTrackerIdGet200Response execute() throws ApiException {
            ApiResponse<OffboardingTrackerIdGet200Response> localVarResp = offboardingTrackerHrisProfileOidGetWithHttpInfo(oid);
            return localVarResp.getData();
        }

        /**
         * Execute offboardingTrackerHrisProfileOidGet request with HTTP info returned
         * @return ApiResponse&lt;OffboardingTrackerIdGet200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffboardingTrackerIdGet200Response> executeWithHttpInfo() throws ApiException {
            return offboardingTrackerHrisProfileOidGetWithHttpInfo(oid);
        }

        /**
         * Execute offboardingTrackerHrisProfileOidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffboardingTrackerIdGet200Response> _callback) throws ApiException {
            return offboardingTrackerHrisProfileOidGetAsync(oid, _callback);
        }
    }

    /**
     * Retrieve termination details
     * Retrieve termination details by hris profile oid  **Token scopes**: &#x60;contracts:read&#x60;, &#x60;people:read&#x60;
     * @param oid Unique hris profile oid (required)
     * @return APIoffboardingTrackerHrisProfileOidGetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
     </table>
     */
    public APIoffboardingTrackerHrisProfileOidGetRequest offboardingTrackerHrisProfileOidGet(String oid) {
        return new APIoffboardingTrackerHrisProfileOidGetRequest(oid);
    }
    private okhttp3.Call offboardingTrackerIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offboarding/tracker/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offboardingTrackerIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling offboardingTrackerIdGet(Async)");
        }

        return offboardingTrackerIdGetCall(id, _callback);

    }


    private ApiResponse<OffboardingTrackerIdGet200Response> offboardingTrackerIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = offboardingTrackerIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OffboardingTrackerIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call offboardingTrackerIdGetAsync(String id, final ApiCallback<OffboardingTrackerIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = offboardingTrackerIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OffboardingTrackerIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIoffboardingTrackerIdGetRequest {
        private final String id;

        private APIoffboardingTrackerIdGetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for offboardingTrackerIdGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return offboardingTrackerIdGetCall(id, _callback);
        }

        /**
         * Execute offboardingTrackerIdGet request
         * @return OffboardingTrackerIdGet200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public OffboardingTrackerIdGet200Response execute() throws ApiException {
            ApiResponse<OffboardingTrackerIdGet200Response> localVarResp = offboardingTrackerIdGetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute offboardingTrackerIdGet request with HTTP info returned
         * @return ApiResponse&lt;OffboardingTrackerIdGet200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffboardingTrackerIdGet200Response> executeWithHttpInfo() throws ApiException {
            return offboardingTrackerIdGetWithHttpInfo(id);
        }

        /**
         * Execute offboardingTrackerIdGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffboardingTrackerIdGet200Response> _callback) throws ApiException {
            return offboardingTrackerIdGetAsync(id, _callback);
        }
    }

    /**
     * Retrieve termination details
     * Retrieve termination details by tracker id  **Token scopes**: &#x60;contracts:read&#x60;, &#x60;people:read&#x60;
     * @param id Unique onboarding tracker identifier (required)
     * @return APIoffboardingTrackerIdGetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved offboarding details </td><td>  -  </td></tr>
     </table>
     */
    public APIoffboardingTrackerIdGetRequest offboardingTrackerIdGet(String id) {
        return new APIoffboardingTrackerIdGetRequest(id);
    }
}
