/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Delete401kEnrollmentsDefinitionRequest;
import org.openapitools.client.model.Get401kEnrollmentsDefinition200ResponseInner;
import org.openapitools.client.model.Post401kEnrollmentsDefinition200Response;
import org.openapitools.client.model.Post401kEnrollmentsDefinitionRequest;
import org.openapitools.client.model.Put401kEnrollmentsDefinition200Response;
import org.openapitools.client.model.Put401kEnrollmentsDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnrollmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnrollmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnrollmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call delete401kEnrollmentsDefinitionCall(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = delete401kEnrollmentsDefinitionRequest;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/contracts/{contract_id}/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete401kEnrollmentsDefinitionValidateBeforeCall(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling delete401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling delete401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling delete401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'delete401kEnrollmentsDefinitionRequest' is set
        if (delete401kEnrollmentsDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'delete401kEnrollmentsDefinitionRequest' when calling delete401kEnrollmentsDefinition(Async)");
        }

        return delete401kEnrollmentsDefinitionCall(id, contractId, planId, delete401kEnrollmentsDefinitionRequest, _callback);

    }


    private ApiResponse<Object> delete401kEnrollmentsDefinitionWithHttpInfo(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = delete401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, delete401kEnrollmentsDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call delete401kEnrollmentsDefinitionAsync(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, delete401kEnrollmentsDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdelete401kEnrollmentsDefinitionRequest {
        private final String id;
        private final String contractId;
        private final String planId;
        private final Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest;

        private APIdelete401kEnrollmentsDefinitionRequest(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest) {
            this.id = id;
            this.contractId = contractId;
            this.planId = planId;
            this.delete401kEnrollmentsDefinitionRequest = delete401kEnrollmentsDefinitionRequest;
        }

        /**
         * Build call for delete401kEnrollmentsDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return delete401kEnrollmentsDefinitionCall(id, contractId, planId, delete401kEnrollmentsDefinitionRequest, _callback);
        }

        /**
         * Execute delete401kEnrollmentsDefinition request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = delete401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, delete401kEnrollmentsDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute delete401kEnrollmentsDefinition request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return delete401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, delete401kEnrollmentsDefinitionRequest);
        }

        /**
         * Execute delete401kEnrollmentsDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return delete401kEnrollmentsDefinitionAsync(id, contractId, planId, delete401kEnrollmentsDefinitionRequest, _callback);
        }
    }

    /**
     * Delete enrollment settings from an employee in a 401k plan
     * Delete enrollment settings from an employee in a 401k plan
     * @param id Legal entity id which employee/contract belongs (required)
     * @param contractId Contract id from the employee (required)
     * @param planId Plan id to enroll the employee into (required)
     * @param delete401kEnrollmentsDefinitionRequest  (required)
     * @return APIdelete401kEnrollmentsDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIdelete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinition(String id, String contractId, String planId, Delete401kEnrollmentsDefinitionRequest delete401kEnrollmentsDefinitionRequest) {
        return new APIdelete401kEnrollmentsDefinitionRequest(id, contractId, planId, delete401kEnrollmentsDefinitionRequest);
    }
    private okhttp3.Call get401kEnrollmentsDefinitionCall(String id, String contractId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/contracts/{contract_id}/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call get401kEnrollmentsDefinitionValidateBeforeCall(String id, String contractId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling get401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling get401kEnrollmentsDefinition(Async)");
        }

        return get401kEnrollmentsDefinitionCall(id, contractId, planId, _callback);

    }


    private ApiResponse<List<Get401kEnrollmentsDefinition200ResponseInner>> get401kEnrollmentsDefinitionWithHttpInfo(String id, String contractId, String planId) throws ApiException {
        okhttp3.Call localVarCall = get401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, null);
        Type localVarReturnType = new TypeToken<List<Get401kEnrollmentsDefinition200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call get401kEnrollmentsDefinitionAsync(String id, String contractId, String planId, final ApiCallback<List<Get401kEnrollmentsDefinition200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = get401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, _callback);
        Type localVarReturnType = new TypeToken<List<Get401kEnrollmentsDefinition200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIget401kEnrollmentsDefinitionRequest {
        private final String id;
        private final String contractId;
        private final String planId;

        private APIget401kEnrollmentsDefinitionRequest(String id, String contractId, String planId) {
            this.id = id;
            this.contractId = contractId;
            this.planId = planId;
        }

        /**
         * Build call for get401kEnrollmentsDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return get401kEnrollmentsDefinitionCall(id, contractId, planId, _callback);
        }

        /**
         * Execute get401kEnrollmentsDefinition request
         * @return List&lt;Get401kEnrollmentsDefinition200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public List<Get401kEnrollmentsDefinition200ResponseInner> execute() throws ApiException {
            ApiResponse<List<Get401kEnrollmentsDefinition200ResponseInner>> localVarResp = get401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId);
            return localVarResp.getData();
        }

        /**
         * Execute get401kEnrollmentsDefinition request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Get401kEnrollmentsDefinition200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Get401kEnrollmentsDefinition200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return get401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId);
        }

        /**
         * Execute get401kEnrollmentsDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Get401kEnrollmentsDefinition200ResponseInner>> _callback) throws ApiException {
            return get401kEnrollmentsDefinitionAsync(id, contractId, planId, _callback);
        }
    }

    /**
     * Get enrollment settings from an employee in a 401k plan
     * Get enrollment settings from an employee in a 401k plan
     * @param id Legal entity id which employee/contract belongs (required)
     * @param contractId Contract id from the employee (required)
     * @param planId Plan id to enroll the employee into (required)
     * @return APIget401kEnrollmentsDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIget401kEnrollmentsDefinitionRequest get401kEnrollmentsDefinition(String id, String contractId, String planId) {
        return new APIget401kEnrollmentsDefinitionRequest(id, contractId, planId);
    }
    private okhttp3.Call post401kEnrollmentsDefinitionCall(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post401kEnrollmentsDefinitionRequest;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/contracts/{contract_id}/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call post401kEnrollmentsDefinitionValidateBeforeCall(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling post401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling post401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling post401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'post401kEnrollmentsDefinitionRequest' is set
        if (post401kEnrollmentsDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'post401kEnrollmentsDefinitionRequest' when calling post401kEnrollmentsDefinition(Async)");
        }

        return post401kEnrollmentsDefinitionCall(id, contractId, planId, post401kEnrollmentsDefinitionRequest, _callback);

    }


    private ApiResponse<Post401kEnrollmentsDefinition200Response> post401kEnrollmentsDefinitionWithHttpInfo(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = post401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, post401kEnrollmentsDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Post401kEnrollmentsDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call post401kEnrollmentsDefinitionAsync(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest, final ApiCallback<Post401kEnrollmentsDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = post401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, post401kEnrollmentsDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Post401kEnrollmentsDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpost401kEnrollmentsDefinitionRequest {
        private final String id;
        private final String contractId;
        private final String planId;
        private final Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest;

        private APIpost401kEnrollmentsDefinitionRequest(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest) {
            this.id = id;
            this.contractId = contractId;
            this.planId = planId;
            this.post401kEnrollmentsDefinitionRequest = post401kEnrollmentsDefinitionRequest;
        }

        /**
         * Build call for post401kEnrollmentsDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return post401kEnrollmentsDefinitionCall(id, contractId, planId, post401kEnrollmentsDefinitionRequest, _callback);
        }

        /**
         * Execute post401kEnrollmentsDefinition request
         * @return Post401kEnrollmentsDefinition200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Post401kEnrollmentsDefinition200Response execute() throws ApiException {
            ApiResponse<Post401kEnrollmentsDefinition200Response> localVarResp = post401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, post401kEnrollmentsDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute post401kEnrollmentsDefinition request with HTTP info returned
         * @return ApiResponse&lt;Post401kEnrollmentsDefinition200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Post401kEnrollmentsDefinition200Response> executeWithHttpInfo() throws ApiException {
            return post401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, post401kEnrollmentsDefinitionRequest);
        }

        /**
         * Execute post401kEnrollmentsDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Post401kEnrollmentsDefinition200Response> _callback) throws ApiException {
            return post401kEnrollmentsDefinitionAsync(id, contractId, planId, post401kEnrollmentsDefinitionRequest, _callback);
        }
    }

    /**
     * Enroll an employee in a 401k plan
     * Enroll an employee in a 401k plan
     * @param id Legal entity id which employee/contract belongs (required)
     * @param contractId Contract id from the employee (required)
     * @param planId Plan id to enroll the employee into (required)
     * @param post401kEnrollmentsDefinitionRequest  (required)
     * @return APIpost401kEnrollmentsDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIpost401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinition(String id, String contractId, String planId, Post401kEnrollmentsDefinitionRequest post401kEnrollmentsDefinitionRequest) {
        return new APIpost401kEnrollmentsDefinitionRequest(id, contractId, planId, post401kEnrollmentsDefinitionRequest);
    }
    private okhttp3.Call put401kEnrollmentsDefinitionCall(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = put401kEnrollmentsDefinitionRequest;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/contracts/{contract_id}/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call put401kEnrollmentsDefinitionValidateBeforeCall(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling put401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling put401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling put401kEnrollmentsDefinition(Async)");
        }

        // verify the required parameter 'put401kEnrollmentsDefinitionRequest' is set
        if (put401kEnrollmentsDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'put401kEnrollmentsDefinitionRequest' when calling put401kEnrollmentsDefinition(Async)");
        }

        return put401kEnrollmentsDefinitionCall(id, contractId, planId, put401kEnrollmentsDefinitionRequest, _callback);

    }


    private ApiResponse<Put401kEnrollmentsDefinition200Response> put401kEnrollmentsDefinitionWithHttpInfo(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = put401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, put401kEnrollmentsDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Put401kEnrollmentsDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call put401kEnrollmentsDefinitionAsync(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest, final ApiCallback<Put401kEnrollmentsDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = put401kEnrollmentsDefinitionValidateBeforeCall(id, contractId, planId, put401kEnrollmentsDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Put401kEnrollmentsDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIput401kEnrollmentsDefinitionRequest {
        private final String id;
        private final String contractId;
        private final String planId;
        private final Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest;

        private APIput401kEnrollmentsDefinitionRequest(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest) {
            this.id = id;
            this.contractId = contractId;
            this.planId = planId;
            this.put401kEnrollmentsDefinitionRequest = put401kEnrollmentsDefinitionRequest;
        }

        /**
         * Build call for put401kEnrollmentsDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return put401kEnrollmentsDefinitionCall(id, contractId, planId, put401kEnrollmentsDefinitionRequest, _callback);
        }

        /**
         * Execute put401kEnrollmentsDefinition request
         * @return Put401kEnrollmentsDefinition200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Put401kEnrollmentsDefinition200Response execute() throws ApiException {
            ApiResponse<Put401kEnrollmentsDefinition200Response> localVarResp = put401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, put401kEnrollmentsDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute put401kEnrollmentsDefinition request with HTTP info returned
         * @return ApiResponse&lt;Put401kEnrollmentsDefinition200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Put401kEnrollmentsDefinition200Response> executeWithHttpInfo() throws ApiException {
            return put401kEnrollmentsDefinitionWithHttpInfo(id, contractId, planId, put401kEnrollmentsDefinitionRequest);
        }

        /**
         * Execute put401kEnrollmentsDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Put401kEnrollmentsDefinition200Response> _callback) throws ApiException {
            return put401kEnrollmentsDefinitionAsync(id, contractId, planId, put401kEnrollmentsDefinitionRequest, _callback);
        }
    }

    /**
     * Change enrollment settings from an employee in a 401k plan
     * Change enrollment settings from an employee in a 401k plan
     * @param id Legal entity id which employee/contract belongs (required)
     * @param contractId Contract id from the employee (required)
     * @param planId Plan id to enroll the employee into (required)
     * @param put401kEnrollmentsDefinitionRequest  (required)
     * @return APIput401kEnrollmentsDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIput401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinition(String id, String contractId, String planId, Put401kEnrollmentsDefinitionRequest put401kEnrollmentsDefinitionRequest) {
        return new APIput401kEnrollmentsDefinitionRequest(id, contractId, planId, put401kEnrollmentsDefinitionRequest);
    }
}
