/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddGpBankAccount201Response;
import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateGPContract201Response;
import org.openapitools.client.model.CreateGPContractRequest;
import org.openapitools.client.model.GPEmployeeAddressUpdatedContainer;
import org.openapitools.client.model.GPEmployeeInformationUpdatedContainer;
import org.openapitools.client.model.GetDownloadUrlForGPPayslip200Response;
import org.openapitools.client.model.GetGPLegalEntities200Response;
import org.openapitools.client.model.GetGpBankAccounts200Response;
import org.openapitools.client.model.GetGpBankGuide200Response;
import org.openapitools.client.model.GetGrossToNetGPReports200Response;
import org.openapitools.client.model.GetWorkerPayslips200Response;
import java.time.LocalDate;
import org.openapitools.client.model.PatchGpBankAccount200Response;
import org.openapitools.client.model.RequestTermination201Response;
import org.openapitools.client.model.RequestTerminationRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateGPEmployeeAddress201Response;
import org.openapitools.client.model.UpdateGPEmployeeAddressRequest;
import org.openapitools.client.model.UpdateGPEmployeeAddressRequestData;
import org.openapitools.client.model.UpdateGPEmployeeCompensation200Response;
import org.openapitools.client.model.UpdateGPEmployeeCompensationRequest;
import org.openapitools.client.model.UpdateGPEmployeeInformationRequest;
import org.openapitools.client.model.UpdateGPEmployeePto200Response;
import org.openapitools.client.model.UpdateGPEmployeePtoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalPayrollApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalPayrollApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalPayrollApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGpBankAccountCall(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeeAddressRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGpBankAccountValidateBeforeCall(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addGpBankAccount(Async)");
        }

        // verify the required parameter 'updateGPEmployeeAddressRequest' is set
        if (updateGPEmployeeAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeeAddressRequest' when calling addGpBankAccount(Async)");
        }

        return addGpBankAccountCall(workerId, updateGPEmployeeAddressRequest, _callback);

    }


    private ApiResponse<AddGpBankAccount201Response> addGpBankAccountWithHttpInfo(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = addGpBankAccountValidateBeforeCall(workerId, updateGPEmployeeAddressRequest, null);
        Type localVarReturnType = new TypeToken<AddGpBankAccount201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGpBankAccountAsync(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback<AddGpBankAccount201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGpBankAccountValidateBeforeCall(workerId, updateGPEmployeeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<AddGpBankAccount201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddGpBankAccountRequest {
        private final UUID workerId;
        private final UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest;

        private APIaddGpBankAccountRequest(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) {
            this.workerId = workerId;
            this.updateGPEmployeeAddressRequest = updateGPEmployeeAddressRequest;
        }

        /**
         * Build call for addGpBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addGpBankAccountCall(workerId, updateGPEmployeeAddressRequest, _callback);
        }

        /**
         * Execute addGpBankAccount request
         * @return AddGpBankAccount201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AddGpBankAccount201Response execute() throws ApiException {
            ApiResponse<AddGpBankAccount201Response> localVarResp = addGpBankAccountWithHttpInfo(workerId, updateGPEmployeeAddressRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addGpBankAccount request with HTTP info returned
         * @return ApiResponse&lt;AddGpBankAccount201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddGpBankAccount201Response> executeWithHttpInfo() throws ApiException {
            return addGpBankAccountWithHttpInfo(workerId, updateGPEmployeeAddressRequest);
        }

        /**
         * Execute addGpBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddGpBankAccount201Response> _callback) throws ApiException {
            return addGpBankAccountAsync(workerId, updateGPEmployeeAddressRequest, _callback);
        }
    }

    /**
     * Add bank account
     * Add a new bank account for an employee.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param updateGPEmployeeAddressRequest Request body containing the details of the bank account to be added. (required)
     * @return APIaddGpBankAccountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIaddGpBankAccountRequest addGpBankAccount(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) {
        return new APIaddGpBankAccountRequest(workerId, updateGPEmployeeAddressRequest);
    }
    private okhttp3.Call createGPContractCall(CreateGPContractRequest createGPContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGPContractRequest;

        // create path and map variables
        String localVarPath = "/contracts/gp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGPContractValidateBeforeCall(CreateGPContractRequest createGPContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGPContractRequest' is set
        if (createGPContractRequest == null) {
            throw new ApiException("Missing the required parameter 'createGPContractRequest' when calling createGPContract(Async)");
        }

        return createGPContractCall(createGPContractRequest, _callback);

    }


    private ApiResponse<CreateGPContract201Response> createGPContractWithHttpInfo(CreateGPContractRequest createGPContractRequest) throws ApiException {
        okhttp3.Call localVarCall = createGPContractValidateBeforeCall(createGPContractRequest, null);
        Type localVarReturnType = new TypeToken<CreateGPContract201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGPContractAsync(CreateGPContractRequest createGPContractRequest, final ApiCallback<CreateGPContract201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGPContractValidateBeforeCall(createGPContractRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateGPContract201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateGPContractRequest {
        private final CreateGPContractRequest createGPContractRequest;

        private APIcreateGPContractRequest(CreateGPContractRequest createGPContractRequest) {
            this.createGPContractRequest = createGPContractRequest;
        }

        /**
         * Build call for createGPContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createGPContractCall(createGPContractRequest, _callback);
        }

        /**
         * Execute createGPContract request
         * @return CreateGPContract201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateGPContract201Response execute() throws ApiException {
            ApiResponse<CreateGPContract201Response> localVarResp = createGPContractWithHttpInfo(createGPContractRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createGPContract request with HTTP info returned
         * @return ApiResponse&lt;CreateGPContract201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateGPContract201Response> executeWithHttpInfo() throws ApiException {
            return createGPContractWithHttpInfo(createGPContractRequest);
        }

        /**
         * Execute createGPContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateGPContract201Response> _callback) throws ApiException {
            return createGPContractAsync(createGPContractRequest, _callback);
        }
    }

    /**
     * Create a contract
     * Create a Global Payroll contract.
     * @param createGPContractRequest Global Payroll (GP) contract object that needs to be created (required)
     * @return APIcreateGPContractRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateGPContractRequest createGPContract(CreateGPContractRequest createGPContractRequest) {
        return new APIcreateGPContractRequest(createGPContractRequest);
    }
    private okhttp3.Call downloadGrossToNetGPReportCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/reports/{gp_report_id}/gross_to_net/csv"
            .replace("{" + "gp_report_id" + "}", localVarApiClient.escapeString(gpReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGrossToNetGPReportValidateBeforeCall(UUID gpReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpReportId' is set
        if (gpReportId == null) {
            throw new ApiException("Missing the required parameter 'gpReportId' when calling downloadGrossToNetGPReport(Async)");
        }

        return downloadGrossToNetGPReportCall(gpReportId, _callback);

    }


    private ApiResponse<String> downloadGrossToNetGPReportWithHttpInfo(UUID gpReportId) throws ApiException {
        okhttp3.Call localVarCall = downloadGrossToNetGPReportValidateBeforeCall(gpReportId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadGrossToNetGPReportAsync(UUID gpReportId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGrossToNetGPReportValidateBeforeCall(gpReportId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadGrossToNetGPReportRequest {
        private final UUID gpReportId;

        private APIdownloadGrossToNetGPReportRequest(UUID gpReportId) {
            this.gpReportId = gpReportId;
        }

        /**
         * Build call for downloadGrossToNetGPReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadGrossToNetGPReportCall(gpReportId, _callback);
        }

        /**
         * Execute downloadGrossToNetGPReport request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadGrossToNetGPReportWithHttpInfo(gpReportId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadGrossToNetGPReport request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadGrossToNetGPReportWithHttpInfo(gpReportId);
        }

        /**
         * Execute downloadGrossToNetGPReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadGrossToNetGPReportAsync(gpReportId, _callback);
        }
    }

    /**
     * Download gross-to-net report
     * Download global payroll reports detailing gross-to-net calculations.
     * @param gpReportId Id of gp report. (required)
     * @return APIdownloadGrossToNetGPReportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadGrossToNetGPReportRequest downloadGrossToNetGPReport(UUID gpReportId) {
        return new APIdownloadGrossToNetGPReportRequest(gpReportId);
    }
    private okhttp3.Call getDownloadUrlForGPPayslipCall(UUID id, UUID payslipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{id}/payslips/{payslipId}/download"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "payslipId" + "}", localVarApiClient.escapeString(payslipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDownloadUrlForGPPayslipValidateBeforeCall(UUID id, UUID payslipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDownloadUrlForGPPayslip(Async)");
        }

        // verify the required parameter 'payslipId' is set
        if (payslipId == null) {
            throw new ApiException("Missing the required parameter 'payslipId' when calling getDownloadUrlForGPPayslip(Async)");
        }

        return getDownloadUrlForGPPayslipCall(id, payslipId, _callback);

    }


    private ApiResponse<GetDownloadUrlForGPPayslip200Response> getDownloadUrlForGPPayslipWithHttpInfo(UUID id, UUID payslipId) throws ApiException {
        okhttp3.Call localVarCall = getDownloadUrlForGPPayslipValidateBeforeCall(id, payslipId, null);
        Type localVarReturnType = new TypeToken<GetDownloadUrlForGPPayslip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDownloadUrlForGPPayslipAsync(UUID id, UUID payslipId, final ApiCallback<GetDownloadUrlForGPPayslip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDownloadUrlForGPPayslipValidateBeforeCall(id, payslipId, _callback);
        Type localVarReturnType = new TypeToken<GetDownloadUrlForGPPayslip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDownloadUrlForGPPayslipRequest {
        private final UUID id;
        private final UUID payslipId;

        private APIgetDownloadUrlForGPPayslipRequest(UUID id, UUID payslipId) {
            this.id = id;
            this.payslipId = payslipId;
        }

        /**
         * Build call for getDownloadUrlForGPPayslip
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDownloadUrlForGPPayslipCall(id, payslipId, _callback);
        }

        /**
         * Execute getDownloadUrlForGPPayslip request
         * @return GetDownloadUrlForGPPayslip200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetDownloadUrlForGPPayslip200Response execute() throws ApiException {
            ApiResponse<GetDownloadUrlForGPPayslip200Response> localVarResp = getDownloadUrlForGPPayslipWithHttpInfo(id, payslipId);
            return localVarResp.getData();
        }

        /**
         * Execute getDownloadUrlForGPPayslip request with HTTP info returned
         * @return ApiResponse&lt;GetDownloadUrlForGPPayslip200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDownloadUrlForGPPayslip200Response> executeWithHttpInfo() throws ApiException {
            return getDownloadUrlForGPPayslipWithHttpInfo(id, payslipId);
        }

        /**
         * Execute getDownloadUrlForGPPayslip request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDownloadUrlForGPPayslip200Response> _callback) throws ApiException {
            return getDownloadUrlForGPPayslipAsync(id, payslipId, _callback);
        }
    }

    /**
     * Download payslip PDF
     * Get a pre-signed download URL for a GP payslip PDF.
     * @param id Unique identifier for the worker. (required)
     * @param payslipId Unique identifier for the payslip. (required)
     * @return APIgetDownloadUrlForGPPayslipRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDownloadUrlForGPPayslipRequest getDownloadUrlForGPPayslip(UUID id, UUID payslipId) {
        return new APIgetDownloadUrlForGPPayslipRequest(id, payslipId);
    }
    private okhttp3.Call getGPLegalEntitiesCall(UUID id, LocalDate startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/legal-entities/{id}/reports"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGPLegalEntitiesValidateBeforeCall(UUID id, LocalDate startDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGPLegalEntities(Async)");
        }

        return getGPLegalEntitiesCall(id, startDate, _callback);

    }


    private ApiResponse<GetGPLegalEntities200Response> getGPLegalEntitiesWithHttpInfo(UUID id, LocalDate startDate) throws ApiException {
        okhttp3.Call localVarCall = getGPLegalEntitiesValidateBeforeCall(id, startDate, null);
        Type localVarReturnType = new TypeToken<GetGPLegalEntities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGPLegalEntitiesAsync(UUID id, LocalDate startDate, final ApiCallback<GetGPLegalEntities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGPLegalEntitiesValidateBeforeCall(id, startDate, _callback);
        Type localVarReturnType = new TypeToken<GetGPLegalEntities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGPLegalEntitiesRequest {
        private final UUID id;
        private LocalDate startDate;

        private APIgetGPLegalEntitiesRequest(UUID id) {
            this.id = id;
        }

        /**
         * Set startDate
         * @param startDate Filter payroll events starting from this date. (optional)
         * @return APIgetGPLegalEntitiesRequest
         */
        public APIgetGPLegalEntitiesRequest startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Build call for getGPLegalEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGPLegalEntitiesCall(id, startDate, _callback);
        }

        /**
         * Execute getGPLegalEntities request
         * @return GetGPLegalEntities200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetGPLegalEntities200Response execute() throws ApiException {
            ApiResponse<GetGPLegalEntities200Response> localVarResp = getGPLegalEntitiesWithHttpInfo(id, startDate);
            return localVarResp.getData();
        }

        /**
         * Execute getGPLegalEntities request with HTTP info returned
         * @return ApiResponse&lt;GetGPLegalEntities200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGPLegalEntities200Response> executeWithHttpInfo() throws ApiException {
            return getGPLegalEntitiesWithHttpInfo(id, startDate);
        }

        /**
         * Execute getGPLegalEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGPLegalEntities200Response> _callback) throws ApiException {
            return getGPLegalEntitiesAsync(id, startDate, _callback);
        }
    }

    /**
     * List payroll events by legal entity
     * Get a list of global payroll events by legal entities.
     * @param id Unique identifier for the legal entity. (required)
     * @return APIgetGPLegalEntitiesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGPLegalEntitiesRequest getGPLegalEntities(UUID id) {
        return new APIgetGPLegalEntitiesRequest(id);
    }
    private okhttp3.Call getGpBankAccountsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGpBankAccountsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getGpBankAccounts(Async)");
        }

        return getGpBankAccountsCall(workerId, _callback);

    }


    private ApiResponse<GetGpBankAccounts200Response> getGpBankAccountsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getGpBankAccountsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<GetGpBankAccounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGpBankAccountsAsync(String workerId, final ApiCallback<GetGpBankAccounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGpBankAccountsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<GetGpBankAccounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGpBankAccountsRequest {
        private final String workerId;

        private APIgetGpBankAccountsRequest(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getGpBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGpBankAccountsCall(workerId, _callback);
        }

        /**
         * Execute getGpBankAccounts request
         * @return GetGpBankAccounts200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetGpBankAccounts200Response execute() throws ApiException {
            ApiResponse<GetGpBankAccounts200Response> localVarResp = getGpBankAccountsWithHttpInfo(workerId);
            return localVarResp.getData();
        }

        /**
         * Execute getGpBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;GetGpBankAccounts200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGpBankAccounts200Response> executeWithHttpInfo() throws ApiException {
            return getGpBankAccountsWithHttpInfo(workerId);
        }

        /**
         * Execute getGpBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGpBankAccounts200Response> _callback) throws ApiException {
            return getGpBankAccountsAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve bank accounts
     * Retrieve all bank accounts for an employee.
     * @param workerId Unique identifier for a worker. (required)
     * @return APIgetGpBankAccountsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGpBankAccountsRequest getGpBankAccounts(String workerId) {
        return new APIgetGpBankAccountsRequest(workerId);
    }
    private okhttp3.Call getGpBankGuideCall(UUID workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks/guide"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGpBankGuideValidateBeforeCall(UUID workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getGpBankGuide(Async)");
        }

        return getGpBankGuideCall(workerId, _callback);

    }


    private ApiResponse<GetGpBankGuide200Response> getGpBankGuideWithHttpInfo(UUID workerId) throws ApiException {
        okhttp3.Call localVarCall = getGpBankGuideValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<GetGpBankGuide200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGpBankGuideAsync(UUID workerId, final ApiCallback<GetGpBankGuide200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGpBankGuideValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<GetGpBankGuide200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGpBankGuideRequest {
        private final UUID workerId;

        private APIgetGpBankGuideRequest(UUID workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getGpBankGuide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGpBankGuideCall(workerId, _callback);
        }

        /**
         * Execute getGpBankGuide request
         * @return GetGpBankGuide200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetGpBankGuide200Response execute() throws ApiException {
            ApiResponse<GetGpBankGuide200Response> localVarResp = getGpBankGuideWithHttpInfo(workerId);
            return localVarResp.getData();
        }

        /**
         * Execute getGpBankGuide request with HTTP info returned
         * @return ApiResponse&lt;GetGpBankGuide200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGpBankGuide200Response> executeWithHttpInfo() throws ApiException {
            return getGpBankGuideWithHttpInfo(workerId);
        }

        /**
         * Execute getGpBankGuide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGpBankGuide200Response> _callback) throws ApiException {
            return getGpBankGuideAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve bank guide
     * Retrieve the bank form guide for an employee.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @return APIgetGpBankGuideRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGpBankGuideRequest getGpBankGuide(UUID workerId) {
        return new APIgetGpBankGuideRequest(workerId);
    }
    private okhttp3.Call getGrossToNetGPReportsCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/reports/{id}/gross_to_net"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrossToNetGPReportsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGrossToNetGPReports(Async)");
        }

        return getGrossToNetGPReportsCall(id, _callback);

    }


    private ApiResponse<GetGrossToNetGPReports200Response> getGrossToNetGPReportsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getGrossToNetGPReportsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetGrossToNetGPReports200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrossToNetGPReportsAsync(UUID id, final ApiCallback<GetGrossToNetGPReports200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrossToNetGPReportsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetGrossToNetGPReports200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGrossToNetGPReportsRequest {
        private final UUID id;

        private APIgetGrossToNetGPReportsRequest(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getGrossToNetGPReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrossToNetGPReportsCall(id, _callback);
        }

        /**
         * Execute getGrossToNetGPReports request
         * @return GetGrossToNetGPReports200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetGrossToNetGPReports200Response execute() throws ApiException {
            ApiResponse<GetGrossToNetGPReports200Response> localVarResp = getGrossToNetGPReportsWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getGrossToNetGPReports request with HTTP info returned
         * @return ApiResponse&lt;GetGrossToNetGPReports200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGrossToNetGPReports200Response> executeWithHttpInfo() throws ApiException {
            return getGrossToNetGPReportsWithHttpInfo(id);
        }

        /**
         * Execute getGrossToNetGPReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGrossToNetGPReports200Response> _callback) throws ApiException {
            return getGrossToNetGPReportsAsync(id, _callback);
        }
    }

    /**
     * List gross-to-net report
     * Get a list of global payroll reports detailing gross-to-net calculations.
     * @param id Unique identifier for the payroll report in UUID format. (required)
     * @return APIgetGrossToNetGPReportsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGrossToNetGPReportsRequest getGrossToNetGPReports(UUID id) {
        return new APIgetGrossToNetGPReportsRequest(id);
    }
    private okhttp3.Call getWorkerPayslipsCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gp/workers/{id}/payslips"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerPayslipsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWorkerPayslips(Async)");
        }

        return getWorkerPayslipsCall(id, _callback);

    }


    private ApiResponse<GetWorkerPayslips200Response> getWorkerPayslipsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getWorkerPayslipsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetWorkerPayslips200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkerPayslipsAsync(UUID id, final ApiCallback<GetWorkerPayslips200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerPayslipsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetWorkerPayslips200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWorkerPayslipsRequest {
        private final UUID id;

        private APIgetWorkerPayslipsRequest(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getWorkerPayslips
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkerPayslipsCall(id, _callback);
        }

        /**
         * Execute getWorkerPayslips request
         * @return GetWorkerPayslips200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetWorkerPayslips200Response execute() throws ApiException {
            ApiResponse<GetWorkerPayslips200Response> localVarResp = getWorkerPayslipsWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getWorkerPayslips request with HTTP info returned
         * @return ApiResponse&lt;GetWorkerPayslips200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetWorkerPayslips200Response> executeWithHttpInfo() throws ApiException {
            return getWorkerPayslipsWithHttpInfo(id);
        }

        /**
         * Execute getWorkerPayslips request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetWorkerPayslips200Response> _callback) throws ApiException {
            return getWorkerPayslipsAsync(id, _callback);
        }
    }

    /**
     * Retrieve employee payslips
     * Get a list of payslips for an employee.
     * @param id Unique identifier for the worker. (required)
     * @return APIgetWorkerPayslipsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWorkerPayslipsRequest getWorkerPayslips(UUID id) {
        return new APIgetWorkerPayslipsRequest(id);
    }
    private okhttp3.Call patchGpBankAccountCall(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeeAddressRequestData;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/banks/{bank_id}"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchGpBankAccountValidateBeforeCall(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling patchGpBankAccount(Async)");
        }

        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling patchGpBankAccount(Async)");
        }

        // verify the required parameter 'updateGPEmployeeAddressRequestData' is set
        if (updateGPEmployeeAddressRequestData == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeeAddressRequestData' when calling patchGpBankAccount(Async)");
        }

        return patchGpBankAccountCall(workerId, bankId, updateGPEmployeeAddressRequestData, _callback);

    }


    private ApiResponse<PatchGpBankAccount200Response> patchGpBankAccountWithHttpInfo(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData) throws ApiException {
        okhttp3.Call localVarCall = patchGpBankAccountValidateBeforeCall(workerId, bankId, updateGPEmployeeAddressRequestData, null);
        Type localVarReturnType = new TypeToken<PatchGpBankAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchGpBankAccountAsync(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData, final ApiCallback<PatchGpBankAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchGpBankAccountValidateBeforeCall(workerId, bankId, updateGPEmployeeAddressRequestData, _callback);
        Type localVarReturnType = new TypeToken<PatchGpBankAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchGpBankAccountRequest {
        private final UUID workerId;
        private final UUID bankId;
        private final UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData;

        private APIpatchGpBankAccountRequest(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData) {
            this.workerId = workerId;
            this.bankId = bankId;
            this.updateGPEmployeeAddressRequestData = updateGPEmployeeAddressRequestData;
        }

        /**
         * Build call for patchGpBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchGpBankAccountCall(workerId, bankId, updateGPEmployeeAddressRequestData, _callback);
        }

        /**
         * Execute patchGpBankAccount request
         * @return PatchGpBankAccount200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public PatchGpBankAccount200Response execute() throws ApiException {
            ApiResponse<PatchGpBankAccount200Response> localVarResp = patchGpBankAccountWithHttpInfo(workerId, bankId, updateGPEmployeeAddressRequestData);
            return localVarResp.getData();
        }

        /**
         * Execute patchGpBankAccount request with HTTP info returned
         * @return ApiResponse&lt;PatchGpBankAccount200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PatchGpBankAccount200Response> executeWithHttpInfo() throws ApiException {
            return patchGpBankAccountWithHttpInfo(workerId, bankId, updateGPEmployeeAddressRequestData);
        }

        /**
         * Execute patchGpBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PatchGpBankAccount200Response> _callback) throws ApiException {
            return patchGpBankAccountAsync(workerId, bankId, updateGPEmployeeAddressRequestData, _callback);
        }
    }

    /**
     * Modify bank account
     * Modify bank account for an employee.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param bankId Unique identifier for the bank account in UUID format. (required)
     * @param updateGPEmployeeAddressRequestData Request body to modify an existing bank account for an employee. (required)
     * @return APIpatchGpBankAccountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchGpBankAccountRequest patchGpBankAccount(UUID workerId, UUID bankId, UpdateGPEmployeeAddressRequestData updateGPEmployeeAddressRequestData) {
        return new APIpatchGpBankAccountRequest(workerId, bankId, updateGPEmployeeAddressRequestData);
    }
    private okhttp3.Call requestTerminationCall(UUID workerId, RequestTerminationRequest requestTerminationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestTerminationRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/terminations"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestTerminationValidateBeforeCall(UUID workerId, RequestTerminationRequest requestTerminationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling requestTermination(Async)");
        }

        // verify the required parameter 'requestTerminationRequest' is set
        if (requestTerminationRequest == null) {
            throw new ApiException("Missing the required parameter 'requestTerminationRequest' when calling requestTermination(Async)");
        }

        return requestTerminationCall(workerId, requestTerminationRequest, _callback);

    }


    private ApiResponse<RequestTermination201Response> requestTerminationWithHttpInfo(UUID workerId, RequestTerminationRequest requestTerminationRequest) throws ApiException {
        okhttp3.Call localVarCall = requestTerminationValidateBeforeCall(workerId, requestTerminationRequest, null);
        Type localVarReturnType = new TypeToken<RequestTermination201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestTerminationAsync(UUID workerId, RequestTerminationRequest requestTerminationRequest, final ApiCallback<RequestTermination201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestTerminationValidateBeforeCall(workerId, requestTerminationRequest, _callback);
        Type localVarReturnType = new TypeToken<RequestTermination201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrequestTerminationRequest {
        private final UUID workerId;
        private final RequestTerminationRequest requestTerminationRequest;

        private APIrequestTerminationRequest(UUID workerId, RequestTerminationRequest requestTerminationRequest) {
            this.workerId = workerId;
            this.requestTerminationRequest = requestTerminationRequest;
        }

        /**
         * Build call for requestTermination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestTerminationCall(workerId, requestTerminationRequest, _callback);
        }

        /**
         * Execute requestTermination request
         * @return RequestTermination201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RequestTermination201Response execute() throws ApiException {
            ApiResponse<RequestTermination201Response> localVarResp = requestTerminationWithHttpInfo(workerId, requestTerminationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute requestTermination request with HTTP info returned
         * @return ApiResponse&lt;RequestTermination201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestTermination201Response> executeWithHttpInfo() throws ApiException {
            return requestTerminationWithHttpInfo(workerId, requestTerminationRequest);
        }

        /**
         * Execute requestTermination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestTermination201Response> _callback) throws ApiException {
            return requestTerminationAsync(workerId, requestTerminationRequest, _callback);
        }
    }

    /**
     * Request termination
     * Request a termination for a global payroll employee. A successful call starts the termination process and does not confirm termination.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param requestTerminationRequest Request body to request a termination for an employee. (required)
     * @return APIrequestTerminationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIrequestTerminationRequest requestTermination(UUID workerId, RequestTerminationRequest requestTerminationRequest) {
        return new APIrequestTerminationRequest(workerId, requestTerminationRequest);
    }
    private okhttp3.Call updateGPEmployeeAddressCall(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeeAddressRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/address"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGPEmployeeAddressValidateBeforeCall(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateGPEmployeeAddress(Async)");
        }

        // verify the required parameter 'updateGPEmployeeAddressRequest' is set
        if (updateGPEmployeeAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeeAddressRequest' when calling updateGPEmployeeAddress(Async)");
        }

        return updateGPEmployeeAddressCall(workerId, updateGPEmployeeAddressRequest, _callback);

    }


    private ApiResponse<GPEmployeeAddressUpdatedContainer> updateGPEmployeeAddressWithHttpInfo(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGPEmployeeAddressValidateBeforeCall(workerId, updateGPEmployeeAddressRequest, null);
        Type localVarReturnType = new TypeToken<GPEmployeeAddressUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGPEmployeeAddressAsync(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest, final ApiCallback<GPEmployeeAddressUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGPEmployeeAddressValidateBeforeCall(workerId, updateGPEmployeeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<GPEmployeeAddressUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateGPEmployeeAddressRequest {
        private final UUID workerId;
        private final UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest;

        private APIupdateGPEmployeeAddressRequest(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) {
            this.workerId = workerId;
            this.updateGPEmployeeAddressRequest = updateGPEmployeeAddressRequest;
        }

        /**
         * Build call for updateGPEmployeeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateGPEmployeeAddressCall(workerId, updateGPEmployeeAddressRequest, _callback);
        }

        /**
         * Execute updateGPEmployeeAddress request
         * @return GPEmployeeAddressUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GPEmployeeAddressUpdatedContainer execute() throws ApiException {
            ApiResponse<GPEmployeeAddressUpdatedContainer> localVarResp = updateGPEmployeeAddressWithHttpInfo(workerId, updateGPEmployeeAddressRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateGPEmployeeAddress request with HTTP info returned
         * @return ApiResponse&lt;GPEmployeeAddressUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPEmployeeAddressUpdatedContainer> executeWithHttpInfo() throws ApiException {
            return updateGPEmployeeAddressWithHttpInfo(workerId, updateGPEmployeeAddressRequest);
        }

        /**
         * Execute updateGPEmployeeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPEmployeeAddressUpdatedContainer> _callback) throws ApiException {
            return updateGPEmployeeAddressAsync(workerId, updateGPEmployeeAddressRequest, _callback);
        }
    }

    /**
     * Update address
     * Update the address of a Global Payroll employee.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param updateGPEmployeeAddressRequest Request body containing the new address and related details. (required)
     * @return APIupdateGPEmployeeAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateGPEmployeeAddressRequest updateGPEmployeeAddress(UUID workerId, UpdateGPEmployeeAddressRequest updateGPEmployeeAddressRequest) {
        return new APIupdateGPEmployeeAddressRequest(workerId, updateGPEmployeeAddressRequest);
    }
    private okhttp3.Call updateGPEmployeeCompensationCall(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeeCompensationRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/compensation"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGPEmployeeCompensationValidateBeforeCall(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateGPEmployeeCompensation(Async)");
        }

        // verify the required parameter 'updateGPEmployeeCompensationRequest' is set
        if (updateGPEmployeeCompensationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeeCompensationRequest' when calling updateGPEmployeeCompensation(Async)");
        }

        return updateGPEmployeeCompensationCall(workerId, updateGPEmployeeCompensationRequest, _callback);

    }


    private ApiResponse<UpdateGPEmployeeCompensation200Response> updateGPEmployeeCompensationWithHttpInfo(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGPEmployeeCompensationValidateBeforeCall(workerId, updateGPEmployeeCompensationRequest, null);
        Type localVarReturnType = new TypeToken<UpdateGPEmployeeCompensation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGPEmployeeCompensationAsync(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest, final ApiCallback<UpdateGPEmployeeCompensation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGPEmployeeCompensationValidateBeforeCall(workerId, updateGPEmployeeCompensationRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGPEmployeeCompensation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateGPEmployeeCompensationRequest {
        private final UUID workerId;
        private final UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest;

        private APIupdateGPEmployeeCompensationRequest(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest) {
            this.workerId = workerId;
            this.updateGPEmployeeCompensationRequest = updateGPEmployeeCompensationRequest;
        }

        /**
         * Build call for updateGPEmployeeCompensation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateGPEmployeeCompensationCall(workerId, updateGPEmployeeCompensationRequest, _callback);
        }

        /**
         * Execute updateGPEmployeeCompensation request
         * @return UpdateGPEmployeeCompensation200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateGPEmployeeCompensation200Response execute() throws ApiException {
            ApiResponse<UpdateGPEmployeeCompensation200Response> localVarResp = updateGPEmployeeCompensationWithHttpInfo(workerId, updateGPEmployeeCompensationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateGPEmployeeCompensation request with HTTP info returned
         * @return ApiResponse&lt;UpdateGPEmployeeCompensation200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateGPEmployeeCompensation200Response> executeWithHttpInfo() throws ApiException {
            return updateGPEmployeeCompensationWithHttpInfo(workerId, updateGPEmployeeCompensationRequest);
        }

        /**
         * Execute updateGPEmployeeCompensation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateGPEmployeeCompensation200Response> _callback) throws ApiException {
            return updateGPEmployeeCompensationAsync(workerId, updateGPEmployeeCompensationRequest, _callback);
        }
    }

    /**
     * Update compensation
     * Update the compensation of a Global Payroll employee. Returns the full compensation history including the update.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param updateGPEmployeeCompensationRequest Request body containing the data to update the compensation of the employee. (required)
     * @return APIupdateGPEmployeeCompensationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateGPEmployeeCompensationRequest updateGPEmployeeCompensation(UUID workerId, UpdateGPEmployeeCompensationRequest updateGPEmployeeCompensationRequest) {
        return new APIupdateGPEmployeeCompensationRequest(workerId, updateGPEmployeeCompensationRequest);
    }
    private okhttp3.Call updateGPEmployeeInformationCall(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeeInformationRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/employee-information"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGPEmployeeInformationValidateBeforeCall(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateGPEmployeeInformation(Async)");
        }

        // verify the required parameter 'updateGPEmployeeInformationRequest' is set
        if (updateGPEmployeeInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeeInformationRequest' when calling updateGPEmployeeInformation(Async)");
        }

        return updateGPEmployeeInformationCall(workerId, updateGPEmployeeInformationRequest, _callback);

    }


    private ApiResponse<GPEmployeeInformationUpdatedContainer> updateGPEmployeeInformationWithHttpInfo(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGPEmployeeInformationValidateBeforeCall(workerId, updateGPEmployeeInformationRequest, null);
        Type localVarReturnType = new TypeToken<GPEmployeeInformationUpdatedContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGPEmployeeInformationAsync(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest, final ApiCallback<GPEmployeeInformationUpdatedContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGPEmployeeInformationValidateBeforeCall(workerId, updateGPEmployeeInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<GPEmployeeInformationUpdatedContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateGPEmployeeInformationRequest {
        private final UUID workerId;
        private final UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest;

        private APIupdateGPEmployeeInformationRequest(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest) {
            this.workerId = workerId;
            this.updateGPEmployeeInformationRequest = updateGPEmployeeInformationRequest;
        }

        /**
         * Build call for updateGPEmployeeInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateGPEmployeeInformationCall(workerId, updateGPEmployeeInformationRequest, _callback);
        }

        /**
         * Execute updateGPEmployeeInformation request
         * @return GPEmployeeInformationUpdatedContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GPEmployeeInformationUpdatedContainer execute() throws ApiException {
            ApiResponse<GPEmployeeInformationUpdatedContainer> localVarResp = updateGPEmployeeInformationWithHttpInfo(workerId, updateGPEmployeeInformationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateGPEmployeeInformation request with HTTP info returned
         * @return ApiResponse&lt;GPEmployeeInformationUpdatedContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GPEmployeeInformationUpdatedContainer> executeWithHttpInfo() throws ApiException {
            return updateGPEmployeeInformationWithHttpInfo(workerId, updateGPEmployeeInformationRequest);
        }

        /**
         * Execute updateGPEmployeeInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GPEmployeeInformationUpdatedContainer> _callback) throws ApiException {
            return updateGPEmployeeInformationAsync(workerId, updateGPEmployeeInformationRequest, _callback);
        }
    }

    /**
     * Update employee information
     * Update Global Payroll employee information.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param updateGPEmployeeInformationRequest  (required)
     * @return APIupdateGPEmployeeInformationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateGPEmployeeInformationRequest updateGPEmployeeInformation(UUID workerId, UpdateGPEmployeeInformationRequest updateGPEmployeeInformationRequest) {
        return new APIupdateGPEmployeeInformationRequest(workerId, updateGPEmployeeInformationRequest);
    }
    private okhttp3.Call updateGPEmployeePtoCall(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGPEmployeePtoRequest;

        // create path and map variables
        String localVarPath = "/gp/workers/{worker_id}/pto-policy"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGPEmployeePtoValidateBeforeCall(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateGPEmployeePto(Async)");
        }

        // verify the required parameter 'updateGPEmployeePtoRequest' is set
        if (updateGPEmployeePtoRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGPEmployeePtoRequest' when calling updateGPEmployeePto(Async)");
        }

        return updateGPEmployeePtoCall(workerId, updateGPEmployeePtoRequest, _callback);

    }


    private ApiResponse<UpdateGPEmployeePto200Response> updateGPEmployeePtoWithHttpInfo(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGPEmployeePtoValidateBeforeCall(workerId, updateGPEmployeePtoRequest, null);
        Type localVarReturnType = new TypeToken<UpdateGPEmployeePto200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGPEmployeePtoAsync(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest, final ApiCallback<UpdateGPEmployeePto200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGPEmployeePtoValidateBeforeCall(workerId, updateGPEmployeePtoRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGPEmployeePto200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateGPEmployeePtoRequest {
        private final UUID workerId;
        private final UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest;

        private APIupdateGPEmployeePtoRequest(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest) {
            this.workerId = workerId;
            this.updateGPEmployeePtoRequest = updateGPEmployeePtoRequest;
        }

        /**
         * Build call for updateGPEmployeePto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateGPEmployeePtoCall(workerId, updateGPEmployeePtoRequest, _callback);
        }

        /**
         * Execute updateGPEmployeePto request
         * @return UpdateGPEmployeePto200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateGPEmployeePto200Response execute() throws ApiException {
            ApiResponse<UpdateGPEmployeePto200Response> localVarResp = updateGPEmployeePtoWithHttpInfo(workerId, updateGPEmployeePtoRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateGPEmployeePto request with HTTP info returned
         * @return ApiResponse&lt;UpdateGPEmployeePto200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateGPEmployeePto200Response> executeWithHttpInfo() throws ApiException {
            return updateGPEmployeePtoWithHttpInfo(workerId, updateGPEmployeePtoRequest);
        }

        /**
         * Execute updateGPEmployeePto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateGPEmployeePto200Response> _callback) throws ApiException {
            return updateGPEmployeePtoAsync(workerId, updateGPEmployeePtoRequest, _callback);
        }
    }

    /**
     * Update PTO policy
     * Update the PTO policy of a Global Payroll employee.
     * @param workerId Unique identifier for a worker in UUID format. (required)
     * @param updateGPEmployeePtoRequest Contract object that needs to be amended. (required)
     * @return APIupdateGPEmployeePtoRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateGPEmployeePtoRequest updateGPEmployeePto(UUID workerId, UpdateGPEmployeePtoRequest updateGPEmployeePtoRequest) {
        return new APIupdateGPEmployeePtoRequest(workerId, updateGPEmployeePtoRequest);
    }
}
