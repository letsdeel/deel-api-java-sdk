/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateInvoiceAdjustmentRequest;
import org.openapitools.client.model.CreateInvoiceAdjustmentRequest1;
import org.openapitools.client.model.CreateTimesheet201Response;
import org.openapitools.client.model.GenericResultCreated;
import org.openapitools.client.model.GetInvoiceAdjustments200Response;
import org.openapitools.client.model.GetInvoiceAdjustmentsByContractId200Response;
import org.openapitools.client.model.GetInvoiceAdjustmentsByContractIdTypesParameter;
import org.openapitools.client.model.GetTimesheetsByContractContractTypesParameter;
import org.openapitools.client.model.GetTimesheetsStatusesParameter;
import org.openapitools.client.model.InvoiceAdjustmentReviewsToCreateContainer;
import java.time.LocalDate;
import java.util.UUID;
import org.openapitools.client.model.UpdateAdjustment200Response;
import org.openapitools.client.model.UpdateInvoiceAdjustment200Response;
import org.openapitools.client.model.UpdateInvoiceAdjustmentByIdRequest;
import org.openapitools.client.model.UpdateInvoiceAdjustmentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInvoiceAdjustmentCall(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest, String recurring, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvoiceAdjustmentRequest;

        // create path and map variables
        String localVarPath = "/invoice-adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recurring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recurring", recurring));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceAdjustmentValidateBeforeCall(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest, String recurring, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInvoiceAdjustmentRequest' is set
        if (createInvoiceAdjustmentRequest == null) {
            throw new ApiException("Missing the required parameter 'createInvoiceAdjustmentRequest' when calling createInvoiceAdjustment(Async)");
        }

        return createInvoiceAdjustmentCall(createInvoiceAdjustmentRequest, recurring, _callback);

    }


    private ApiResponse<CreateTimesheet201Response> createInvoiceAdjustmentWithHttpInfo(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest, String recurring) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceAdjustmentValidateBeforeCall(createInvoiceAdjustmentRequest, recurring, null);
        Type localVarReturnType = new TypeToken<CreateTimesheet201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInvoiceAdjustmentAsync(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest, String recurring, final ApiCallback<CreateTimesheet201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceAdjustmentValidateBeforeCall(createInvoiceAdjustmentRequest, recurring, _callback);
        Type localVarReturnType = new TypeToken<CreateTimesheet201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInvoiceAdjustmentRequest {
        private final CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest;
        private String recurring;

        private APIcreateInvoiceAdjustmentRequest(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest) {
            this.createInvoiceAdjustmentRequest = createInvoiceAdjustmentRequest;
        }

        /**
         * Set recurring
         * @param recurring Add this invoice adjustment as recurring (optional)
         * @return APIcreateInvoiceAdjustmentRequest
         */
        public APIcreateInvoiceAdjustmentRequest recurring(String recurring) {
            this.recurring = recurring;
            return this;
        }

        /**
         * Build call for createInvoiceAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInvoiceAdjustmentCall(createInvoiceAdjustmentRequest, recurring, _callback);
        }

        /**
         * Execute createInvoiceAdjustment request
         * @return CreateTimesheet201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateTimesheet201Response execute() throws ApiException {
            ApiResponse<CreateTimesheet201Response> localVarResp = createInvoiceAdjustmentWithHttpInfo(createInvoiceAdjustmentRequest, recurring);
            return localVarResp.getData();
        }

        /**
         * Execute createInvoiceAdjustment request with HTTP info returned
         * @return ApiResponse&lt;CreateTimesheet201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTimesheet201Response> executeWithHttpInfo() throws ApiException {
            return createInvoiceAdjustmentWithHttpInfo(createInvoiceAdjustmentRequest, recurring);
        }

        /**
         * Execute createInvoiceAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTimesheet201Response> _callback) throws ApiException {
            return createInvoiceAdjustmentAsync(createInvoiceAdjustmentRequest, recurring, _callback);
        }
    }

    /**
     * Create an invoice adjustment
     * Create an invoice adjustment using this endpoint. For example, you can add a bonus, commission, VAT %, deduction etc. to an invoice.
     * @param createInvoiceAdjustmentRequest InvoiceAdjustment object that needs to be created (required)
     * @return APIcreateInvoiceAdjustmentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInvoiceAdjustmentRequest createInvoiceAdjustment(CreateInvoiceAdjustmentRequest createInvoiceAdjustmentRequest) {
        return new APIcreateInvoiceAdjustmentRequest(createInvoiceAdjustmentRequest);
    }
    private okhttp3.Call createInvoiceAdjustmentReviewsCall(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentReviewsToCreateContainer;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/many/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceAdjustmentReviewsValidateBeforeCall(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        return createInvoiceAdjustmentReviewsCall(invoiceAdjustmentReviewsToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> createInvoiceAdjustmentReviewsWithHttpInfo(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceAdjustmentReviewsValidateBeforeCall(invoiceAdjustmentReviewsToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInvoiceAdjustmentReviewsAsync(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceAdjustmentReviewsValidateBeforeCall(invoiceAdjustmentReviewsToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInvoiceAdjustmentReviewsRequest {
        private InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer;

        private APIcreateInvoiceAdjustmentReviewsRequest() {
        }

        /**
         * Set invoiceAdjustmentReviewsToCreateContainer
         * @param invoiceAdjustmentReviewsToCreateContainer InvoiceAdjustment review objects that need to be created (optional)
         * @return APIcreateInvoiceAdjustmentReviewsRequest
         */
        public APIcreateInvoiceAdjustmentReviewsRequest invoiceAdjustmentReviewsToCreateContainer(InvoiceAdjustmentReviewsToCreateContainer invoiceAdjustmentReviewsToCreateContainer) {
            this.invoiceAdjustmentReviewsToCreateContainer = invoiceAdjustmentReviewsToCreateContainer;
            return this;
        }

        /**
         * Build call for createInvoiceAdjustmentReviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInvoiceAdjustmentReviewsCall(invoiceAdjustmentReviewsToCreateContainer, _callback);
        }

        /**
         * Execute createInvoiceAdjustmentReviews request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ApiResponse<GenericResultCreated> localVarResp = createInvoiceAdjustmentReviewsWithHttpInfo(invoiceAdjustmentReviewsToCreateContainer);
            return localVarResp.getData();
        }

        /**
         * Execute createInvoiceAdjustmentReviews request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            return createInvoiceAdjustmentReviewsWithHttpInfo(invoiceAdjustmentReviewsToCreateContainer);
        }

        /**
         * Execute createInvoiceAdjustmentReviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            return createInvoiceAdjustmentReviewsAsync(invoiceAdjustmentReviewsToCreateContainer, _callback);
        }
    }

    /**
     * Bulk review invoice adjustments
     * Review multiple invoice adjustments to approve or decline a batch.
     * @return APIcreateInvoiceAdjustmentReviewsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInvoiceAdjustmentReviewsRequest createInvoiceAdjustmentReviews() {
        return new APIcreateInvoiceAdjustmentReviewsRequest();
    }
    private okhttp3.Call getInvoiceAdjustmentsCall(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice-adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_id", contractId));
        }

        if (contractTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_types", contractTypes));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_id", invoiceId));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAdjustmentsValidateBeforeCall(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback _callback) throws ApiException {
        return getInvoiceAdjustmentsCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<GetInvoiceAdjustments200Response> getInvoiceAdjustmentsWithHttpInfo(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAdjustmentsValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetInvoiceAdjustments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoiceAdjustmentsAsync(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback<GetInvoiceAdjustments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAdjustmentsValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetInvoiceAdjustments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInvoiceAdjustmentsRequest {
        private String contractId;
        private GetTimesheetsByContractContractTypesParameter contractTypes;
        private GetInvoiceAdjustmentsByContractIdTypesParameter types;
        private GetTimesheetsStatusesParameter statuses;
        private String invoiceId;
        private UUID reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private String limit;
        private String offset;

        private APIgetInvoiceAdjustmentsRequest() {
        }

        /**
         * Set contractId
         * @param contractId Id of an Deel contract. (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest contractId(String contractId) {
            this.contractId = contractId;
            return this;
        }

        /**
         * Set contractTypes
         * @param contractTypes types of contracts to filter (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest contractTypes(GetTimesheetsByContractContractTypesParameter contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }

        /**
         * Set types
         * @param types types of invoice adjustments to filter (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest types(GetInvoiceAdjustmentsByContractIdTypesParameter types) {
            this.types = types;
            return this;
        }

        /**
         * Set statuses
         * @param statuses statuses of invoice adjustment to filter (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest statuses(GetTimesheetsStatusesParameter statuses) {
            this.statuses = statuses;
            return this;
        }

        /**
         * Set invoiceId
         * @param invoiceId ID of an existing invoice (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest invoiceId(String invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        /**
         * Set reporterId
         * @param reporterId ID of an existing profile (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest reporterId(UUID reporterId) {
            this.reporterId = reporterId;
            return this;
        }

        /**
         * Set dateFrom
         * @param dateFrom To get invoice adjustments submitted on or after given start date (inclusive). Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31. (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Set dateTo
         * @param dateTo To get invoice adjustments submitted before given end date (excludes records submitted on this date). Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31. (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return APIgetInvoiceAdjustmentsRequest
         */
        public APIgetInvoiceAdjustmentsRequest offset(String offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getInvoiceAdjustments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoiceAdjustmentsCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }

        /**
         * Execute getInvoiceAdjustments request
         * @return GetInvoiceAdjustments200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetInvoiceAdjustments200Response execute() throws ApiException {
            ApiResponse<GetInvoiceAdjustments200Response> localVarResp = getInvoiceAdjustmentsWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getInvoiceAdjustments request with HTTP info returned
         * @return ApiResponse&lt;GetInvoiceAdjustments200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetInvoiceAdjustments200Response> executeWithHttpInfo() throws ApiException {
            return getInvoiceAdjustmentsWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute getInvoiceAdjustments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetInvoiceAdjustments200Response> _callback) throws ApiException {
            return getInvoiceAdjustmentsAsync(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * List invoice adjustments
     * Retrieve invoice adjustments. You can filter the list by providing additional parameters e.g. contract_id, contract_type etc.
     * @return APIgetInvoiceAdjustmentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInvoiceAdjustmentsRequest getInvoiceAdjustments() {
        return new APIgetInvoiceAdjustmentsRequest();
    }
    private okhttp3.Call getInvoiceAdjustmentsByContractIdCall(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/invoice-adjustments"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_types", contractTypes));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_id", invoiceId));
        }

        if (reporterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporter_id", reporterId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAdjustmentsByContractIdValidateBeforeCall(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getInvoiceAdjustmentsByContractId(Async)");
        }

        return getInvoiceAdjustmentsByContractIdCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);

    }


    private ApiResponse<GetInvoiceAdjustmentsByContractId200Response> getInvoiceAdjustmentsByContractIdWithHttpInfo(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAdjustmentsByContractIdValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetInvoiceAdjustmentsByContractId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoiceAdjustmentsByContractIdAsync(String contractId, GetTimesheetsByContractContractTypesParameter contractTypes, GetInvoiceAdjustmentsByContractIdTypesParameter types, GetTimesheetsStatusesParameter statuses, String invoiceId, UUID reporterId, LocalDate dateFrom, LocalDate dateTo, String limit, String offset, final ApiCallback<GetInvoiceAdjustmentsByContractId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAdjustmentsByContractIdValidateBeforeCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetInvoiceAdjustmentsByContractId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInvoiceAdjustmentsByContractIdRequest {
        private final String contractId;
        private GetTimesheetsByContractContractTypesParameter contractTypes;
        private GetInvoiceAdjustmentsByContractIdTypesParameter types;
        private GetTimesheetsStatusesParameter statuses;
        private String invoiceId;
        private UUID reporterId;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private String limit;
        private String offset;

        private APIgetInvoiceAdjustmentsByContractIdRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set contractTypes
         * @param contractTypes types of contracts to filter (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest contractTypes(GetTimesheetsByContractContractTypesParameter contractTypes) {
            this.contractTypes = contractTypes;
            return this;
        }

        /**
         * Set types
         * @param types types of invoice adjustments to filter (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest types(GetInvoiceAdjustmentsByContractIdTypesParameter types) {
            this.types = types;
            return this;
        }

        /**
         * Set statuses
         * @param statuses statuses of invoice adjustment to filter (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest statuses(GetTimesheetsStatusesParameter statuses) {
            this.statuses = statuses;
            return this;
        }

        /**
         * Set invoiceId
         * @param invoiceId ID of an existing invoice (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest invoiceId(String invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        /**
         * Set reporterId
         * @param reporterId ID of an existing profile (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest reporterId(UUID reporterId) {
            this.reporterId = reporterId;
            return this;
        }

        /**
         * Set dateFrom
         * @param dateFrom To get invoice adjustments submitted on or after given start date (inclusive).    Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31. (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Set dateTo
         * @param dateTo To get invoice adjustments submitted before given end date (excludes records submitted on this date).    Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31. (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings (optional)
         * @return APIgetInvoiceAdjustmentsByContractIdRequest
         */
        public APIgetInvoiceAdjustmentsByContractIdRequest offset(String offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getInvoiceAdjustmentsByContractId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoiceAdjustmentsByContractIdCall(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }

        /**
         * Execute getInvoiceAdjustmentsByContractId request
         * @return GetInvoiceAdjustmentsByContractId200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetInvoiceAdjustmentsByContractId200Response execute() throws ApiException {
            ApiResponse<GetInvoiceAdjustmentsByContractId200Response> localVarResp = getInvoiceAdjustmentsByContractIdWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getInvoiceAdjustmentsByContractId request with HTTP info returned
         * @return ApiResponse&lt;GetInvoiceAdjustmentsByContractId200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetInvoiceAdjustmentsByContractId200Response> executeWithHttpInfo() throws ApiException {
            return getInvoiceAdjustmentsByContractIdWithHttpInfo(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset);
        }

        /**
         * Execute getInvoiceAdjustmentsByContractId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetInvoiceAdjustmentsByContractId200Response> _callback) throws ApiException {
            return getInvoiceAdjustmentsByContractIdAsync(contractId, contractTypes, types, statuses, invoiceId, reporterId, dateFrom, dateTo, limit, offset, _callback);
        }
    }

    /**
     * Invoice line items by contract
     * Retrieve invoice line items for a given contract id.
     * @param contractId Deel contract id. (required)
     * @return APIgetInvoiceAdjustmentsByContractIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInvoiceAdjustmentsByContractIdRequest getInvoiceAdjustmentsByContractId(String contractId) {
        return new APIgetInvoiceAdjustmentsByContractIdRequest(contractId);
    }
    private okhttp3.Call updateInvoiceAdjustmentCall(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInvoiceAdjustmentRequest;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInvoiceAdjustmentValidateBeforeCall(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateInvoiceAdjustment(Async)");
        }

        // verify the required parameter 'updateInvoiceAdjustmentRequest' is set
        if (updateInvoiceAdjustmentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateInvoiceAdjustmentRequest' when calling updateInvoiceAdjustment(Async)");
        }

        return updateInvoiceAdjustmentCall(id, updateInvoiceAdjustmentRequest, _callback);

    }


    private ApiResponse<UpdateInvoiceAdjustment200Response> updateInvoiceAdjustmentWithHttpInfo(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInvoiceAdjustmentValidateBeforeCall(id, updateInvoiceAdjustmentRequest, null);
        Type localVarReturnType = new TypeToken<UpdateInvoiceAdjustment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInvoiceAdjustmentAsync(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest, final ApiCallback<UpdateInvoiceAdjustment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInvoiceAdjustmentValidateBeforeCall(id, updateInvoiceAdjustmentRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateInvoiceAdjustment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateInvoiceAdjustmentRequest {
        private final String id;
        private final UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest;

        private APIupdateInvoiceAdjustmentRequest(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest) {
            this.id = id;
            this.updateInvoiceAdjustmentRequest = updateInvoiceAdjustmentRequest;
        }

        /**
         * Build call for updateInvoiceAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInvoiceAdjustmentCall(id, updateInvoiceAdjustmentRequest, _callback);
        }

        /**
         * Execute updateInvoiceAdjustment request
         * @return UpdateInvoiceAdjustment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateInvoiceAdjustment200Response execute() throws ApiException {
            ApiResponse<UpdateInvoiceAdjustment200Response> localVarResp = updateInvoiceAdjustmentWithHttpInfo(id, updateInvoiceAdjustmentRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateInvoiceAdjustment request with HTTP info returned
         * @return ApiResponse&lt;UpdateInvoiceAdjustment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateInvoiceAdjustment200Response> executeWithHttpInfo() throws ApiException {
            return updateInvoiceAdjustmentWithHttpInfo(id, updateInvoiceAdjustmentRequest);
        }

        /**
         * Execute updateInvoiceAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateInvoiceAdjustment200Response> _callback) throws ApiException {
            return updateInvoiceAdjustmentAsync(id, updateInvoiceAdjustmentRequest, _callback);
        }
    }

    /**
     * Update an invoice adjustment
     * Update an invoice adjustment.
     * @param id Invoice adjustment id. (required)
     * @param updateInvoiceAdjustmentRequest  (required)
     * @return APIupdateInvoiceAdjustmentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInvoiceAdjustmentRequest updateInvoiceAdjustment(String id, UpdateInvoiceAdjustmentRequest updateInvoiceAdjustmentRequest) {
        return new APIupdateInvoiceAdjustmentRequest(id, updateInvoiceAdjustmentRequest);
    }
    private okhttp3.Call updateInvoiceAdjustmentByIdCall(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInvoiceAdjustmentByIdRequest;

        // create path and map variables
        String localVarPath = "/invoice-adjustments/{id}/reviews"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInvoiceAdjustmentByIdValidateBeforeCall(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateInvoiceAdjustmentById(Async)");
        }

        // verify the required parameter 'updateInvoiceAdjustmentByIdRequest' is set
        if (updateInvoiceAdjustmentByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'updateInvoiceAdjustmentByIdRequest' when calling updateInvoiceAdjustmentById(Async)");
        }

        return updateInvoiceAdjustmentByIdCall(id, updateInvoiceAdjustmentByIdRequest, _callback);

    }


    private ApiResponse<UpdateAdjustment200Response> updateInvoiceAdjustmentByIdWithHttpInfo(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInvoiceAdjustmentByIdValidateBeforeCall(id, updateInvoiceAdjustmentByIdRequest, null);
        Type localVarReturnType = new TypeToken<UpdateAdjustment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInvoiceAdjustmentByIdAsync(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest, final ApiCallback<UpdateAdjustment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInvoiceAdjustmentByIdValidateBeforeCall(id, updateInvoiceAdjustmentByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateAdjustment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateInvoiceAdjustmentByIdRequest {
        private final String id;
        private final UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest;

        private APIupdateInvoiceAdjustmentByIdRequest(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest) {
            this.id = id;
            this.updateInvoiceAdjustmentByIdRequest = updateInvoiceAdjustmentByIdRequest;
        }

        /**
         * Build call for updateInvoiceAdjustmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInvoiceAdjustmentByIdCall(id, updateInvoiceAdjustmentByIdRequest, _callback);
        }

        /**
         * Execute updateInvoiceAdjustmentById request
         * @return UpdateAdjustment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateAdjustment200Response execute() throws ApiException {
            ApiResponse<UpdateAdjustment200Response> localVarResp = updateInvoiceAdjustmentByIdWithHttpInfo(id, updateInvoiceAdjustmentByIdRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateInvoiceAdjustmentById request with HTTP info returned
         * @return ApiResponse&lt;UpdateAdjustment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateAdjustment200Response> executeWithHttpInfo() throws ApiException {
            return updateInvoiceAdjustmentByIdWithHttpInfo(id, updateInvoiceAdjustmentByIdRequest);
        }

        /**
         * Execute updateInvoiceAdjustmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateAdjustment200Response> _callback) throws ApiException {
            return updateInvoiceAdjustmentByIdAsync(id, updateInvoiceAdjustmentByIdRequest, _callback);
        }
    }

    /**
     * Update an invoice adjustment
     * Update an existing invoice adjustment. It is not possible to update VAT adjustments, we recommend you to delete the existing VAT adjust and create a new one.
     * @param id ID of an existing invoice adjustment. (required)
     * @param updateInvoiceAdjustmentByIdRequest  (required)
     * @return APIupdateInvoiceAdjustmentByIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentById(String id, UpdateInvoiceAdjustmentByIdRequest updateInvoiceAdjustmentByIdRequest) {
        return new APIupdateInvoiceAdjustmentByIdRequest(id, updateInvoiceAdjustmentByIdRequest);
    }
}
