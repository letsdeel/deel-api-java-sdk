/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateBenefitProviderIntegrationClient200Response;
import org.openapitools.client.model.Get401kPlansDefinition200ResponseInner;
import org.openapitools.client.model.Post401kPlansDefinition200Response;
import org.openapitools.client.model.Post401kPlansDefinitionRequest;
import org.openapitools.client.model.Put401kPlansDefinition200Response;
import org.openapitools.client.model.Put401kPlansDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class401KPlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class401KPlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class401KPlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cleanUpPlanCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/401k/plans/clean-up"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cleanUpPlanValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cleanUpPlan(Async)");
        }

        return cleanUpPlanCall(id, _callback);

    }


    private ApiResponse<Void> cleanUpPlanWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = cleanUpPlanValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cleanUpPlanAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cleanUpPlanValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcleanUpPlanRequest {
        private final String id;

        private APIcleanUpPlanRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for cleanUpPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation, no content returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cleanUpPlanCall(id, _callback);
        }

        /**
         * Execute cleanUpPlan request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation, no content returned. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cleanUpPlanWithHttpInfo(id);
        }

        /**
         * Execute cleanUpPlan request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation, no content returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cleanUpPlanWithHttpInfo(id);
        }

        /**
         * Execute cleanUpPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation, no content returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cleanUpPlanAsync(id, _callback);
        }
    }

    /**
     * Clean up plan for a given legal entity
     * Clean up plan for a given legal entity  **Token scopes**: &#x60;benefits:write&#x60;
     * @param id Id from the legal entity to clean up (required)
     * @return APIcleanUpPlanRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, no content returned. </td><td>  -  </td></tr>
     </table>
     */
    public APIcleanUpPlanRequest cleanUpPlan(String id) {
        return new APIcleanUpPlanRequest(id);
    }
    private okhttp3.Call createBenefitProviderIntegrationClientCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/benefits/401k/activate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBenefitProviderIntegrationClientValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createBenefitProviderIntegrationClient(Async)");
        }

        return createBenefitProviderIntegrationClientCall(id, _callback);

    }


    private ApiResponse<CreateBenefitProviderIntegrationClient200Response> createBenefitProviderIntegrationClientWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createBenefitProviderIntegrationClientValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateBenefitProviderIntegrationClient200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBenefitProviderIntegrationClientAsync(String id, final ApiCallback<CreateBenefitProviderIntegrationClient200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBenefitProviderIntegrationClientValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateBenefitProviderIntegrationClient200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateBenefitProviderIntegrationClientRequest {
        private final String id;

        private APIcreateBenefitProviderIntegrationClientRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for createBenefitProviderIntegrationClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createBenefitProviderIntegrationClientCall(id, _callback);
        }

        /**
         * Execute createBenefitProviderIntegrationClient request
         * @return CreateBenefitProviderIntegrationClient200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public CreateBenefitProviderIntegrationClient200Response execute() throws ApiException {
            ApiResponse<CreateBenefitProviderIntegrationClient200Response> localVarResp = createBenefitProviderIntegrationClientWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute createBenefitProviderIntegrationClient request with HTTP info returned
         * @return ApiResponse&lt;CreateBenefitProviderIntegrationClient200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateBenefitProviderIntegrationClient200Response> executeWithHttpInfo() throws ApiException {
            return createBenefitProviderIntegrationClientWithHttpInfo(id);
        }

        /**
         * Execute createBenefitProviderIntegrationClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateBenefitProviderIntegrationClient200Response> _callback) throws ApiException {
            return createBenefitProviderIntegrationClientAsync(id, _callback);
        }
    }

    /**
     * Activate the 401k integration for the legal entity
     * Activate the 401k integration for the legal entity  **Token scopes**: &#x60;benefits:write&#x60;
     * @param id Id from the legal entity to activate 401k integration (required)
     * @return APIcreateBenefitProviderIntegrationClientRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateBenefitProviderIntegrationClientRequest createBenefitProviderIntegrationClient(String id) {
        return new APIcreateBenefitProviderIntegrationClientRequest(id);
    }
    private okhttp3.Call delete401kPlanDefinitionCall(String id, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/401k/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete401kPlanDefinitionValidateBeforeCall(String id, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling delete401kPlanDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling delete401kPlanDefinition(Async)");
        }

        return delete401kPlanDefinitionCall(id, planId, _callback);

    }


    private ApiResponse<Object> delete401kPlanDefinitionWithHttpInfo(String id, String planId) throws ApiException {
        okhttp3.Call localVarCall = delete401kPlanDefinitionValidateBeforeCall(id, planId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call delete401kPlanDefinitionAsync(String id, String planId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete401kPlanDefinitionValidateBeforeCall(id, planId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdelete401kPlanDefinitionRequest {
        private final String id;
        private final String planId;

        private APIdelete401kPlanDefinitionRequest(String id, String planId) {
            this.id = id;
            this.planId = planId;
        }

        /**
         * Build call for delete401kPlanDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return delete401kPlanDefinitionCall(id, planId, _callback);
        }

        /**
         * Execute delete401kPlanDefinition request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = delete401kPlanDefinitionWithHttpInfo(id, planId);
            return localVarResp.getData();
        }

        /**
         * Execute delete401kPlanDefinition request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return delete401kPlanDefinitionWithHttpInfo(id, planId);
        }

        /**
         * Execute delete401kPlanDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return delete401kPlanDefinitionAsync(id, planId, _callback);
        }
    }

    /**
     * Delete a 401k plan
     * Delete a 401k plan  **Token scopes**: &#x60;benefits:write&#x60;
     * @param id Legal entity id which plans belongs (required)
     * @param planId Plan id (required)
     * @return APIdelete401kPlanDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIdelete401kPlanDefinitionRequest delete401kPlanDefinition(String id, String planId) {
        return new APIdelete401kPlanDefinitionRequest(id, planId);
    }
    private okhttp3.Call get401kPlansDefinitionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/401k/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call get401kPlansDefinitionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get401kPlansDefinition(Async)");
        }

        return get401kPlansDefinitionCall(id, _callback);

    }


    private ApiResponse<List<Get401kPlansDefinition200ResponseInner>> get401kPlansDefinitionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = get401kPlansDefinitionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Get401kPlansDefinition200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call get401kPlansDefinitionAsync(String id, final ApiCallback<List<Get401kPlansDefinition200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = get401kPlansDefinitionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Get401kPlansDefinition200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIget401kPlansDefinitionRequest {
        private final String id;

        private APIget401kPlansDefinitionRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for get401kPlansDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return get401kPlansDefinitionCall(id, _callback);
        }

        /**
         * Execute get401kPlansDefinition request
         * @return List&lt;Get401kPlansDefinition200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public List<Get401kPlansDefinition200ResponseInner> execute() throws ApiException {
            ApiResponse<List<Get401kPlansDefinition200ResponseInner>> localVarResp = get401kPlansDefinitionWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute get401kPlansDefinition request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Get401kPlansDefinition200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Get401kPlansDefinition200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return get401kPlansDefinitionWithHttpInfo(id);
        }

        /**
         * Execute get401kPlansDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Get401kPlansDefinition200ResponseInner>> _callback) throws ApiException {
            return get401kPlansDefinitionAsync(id, _callback);
        }
    }

    /**
     * Get 401k plans for legal entity
     * Get 401k plans legal entity  **Token scopes**: &#x60;benefits:read&#x60;
     * @param id Id from the legal entity to fetch 401k plans (required)
     * @return APIget401kPlansDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIget401kPlansDefinitionRequest get401kPlansDefinition(String id) {
        return new APIget401kPlansDefinitionRequest(id);
    }
    private okhttp3.Call post401kPlansDefinitionCall(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post401kPlansDefinitionRequest;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/401k/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call post401kPlansDefinitionValidateBeforeCall(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling post401kPlansDefinition(Async)");
        }

        // verify the required parameter 'post401kPlansDefinitionRequest' is set
        if (post401kPlansDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'post401kPlansDefinitionRequest' when calling post401kPlansDefinition(Async)");
        }

        return post401kPlansDefinitionCall(id, post401kPlansDefinitionRequest, _callback);

    }


    private ApiResponse<Post401kPlansDefinition200Response> post401kPlansDefinitionWithHttpInfo(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = post401kPlansDefinitionValidateBeforeCall(id, post401kPlansDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Post401kPlansDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call post401kPlansDefinitionAsync(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest, final ApiCallback<Post401kPlansDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = post401kPlansDefinitionValidateBeforeCall(id, post401kPlansDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Post401kPlansDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpost401kPlansDefinitionRequest {
        private final String id;
        private final Post401kPlansDefinitionRequest post401kPlansDefinitionRequest;

        private APIpost401kPlansDefinitionRequest(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest) {
            this.id = id;
            this.post401kPlansDefinitionRequest = post401kPlansDefinitionRequest;
        }

        /**
         * Build call for post401kPlansDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return post401kPlansDefinitionCall(id, post401kPlansDefinitionRequest, _callback);
        }

        /**
         * Execute post401kPlansDefinition request
         * @return Post401kPlansDefinition200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Post401kPlansDefinition200Response execute() throws ApiException {
            ApiResponse<Post401kPlansDefinition200Response> localVarResp = post401kPlansDefinitionWithHttpInfo(id, post401kPlansDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute post401kPlansDefinition request with HTTP info returned
         * @return ApiResponse&lt;Post401kPlansDefinition200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Post401kPlansDefinition200Response> executeWithHttpInfo() throws ApiException {
            return post401kPlansDefinitionWithHttpInfo(id, post401kPlansDefinitionRequest);
        }

        /**
         * Execute post401kPlansDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Post401kPlansDefinition200Response> _callback) throws ApiException {
            return post401kPlansDefinitionAsync(id, post401kPlansDefinitionRequest, _callback);
        }
    }

    /**
     * Create 401k plan for legal entity
     * Create a new 401k plan for existing provider to legal entity  **Token scopes**: &#x60;benefits:write&#x60;
     * @param id Id from the legal entity to receive a new 401k plan (required)
     * @param post401kPlansDefinitionRequest  (required)
     * @return APIpost401kPlansDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIpost401kPlansDefinitionRequest post401kPlansDefinition(String id, Post401kPlansDefinitionRequest post401kPlansDefinitionRequest) {
        return new APIpost401kPlansDefinitionRequest(id, post401kPlansDefinitionRequest);
    }
    private okhttp3.Call put401kPlansDefinitionCall(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = put401kPlansDefinitionRequest;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{id}/401k/plans/{plan_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call put401kPlansDefinitionValidateBeforeCall(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling put401kPlansDefinition(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling put401kPlansDefinition(Async)");
        }

        // verify the required parameter 'put401kPlansDefinitionRequest' is set
        if (put401kPlansDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'put401kPlansDefinitionRequest' when calling put401kPlansDefinition(Async)");
        }

        return put401kPlansDefinitionCall(id, planId, put401kPlansDefinitionRequest, _callback);

    }


    private ApiResponse<Put401kPlansDefinition200Response> put401kPlansDefinitionWithHttpInfo(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = put401kPlansDefinitionValidateBeforeCall(id, planId, put401kPlansDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Put401kPlansDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call put401kPlansDefinitionAsync(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest, final ApiCallback<Put401kPlansDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = put401kPlansDefinitionValidateBeforeCall(id, planId, put401kPlansDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Put401kPlansDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIput401kPlansDefinitionRequest {
        private final String id;
        private final String planId;
        private final Put401kPlansDefinitionRequest put401kPlansDefinitionRequest;

        private APIput401kPlansDefinitionRequest(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest) {
            this.id = id;
            this.planId = planId;
            this.put401kPlansDefinitionRequest = put401kPlansDefinitionRequest;
        }

        /**
         * Build call for put401kPlansDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return put401kPlansDefinitionCall(id, planId, put401kPlansDefinitionRequest, _callback);
        }

        /**
         * Execute put401kPlansDefinition request
         * @return Put401kPlansDefinition200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public Put401kPlansDefinition200Response execute() throws ApiException {
            ApiResponse<Put401kPlansDefinition200Response> localVarResp = put401kPlansDefinitionWithHttpInfo(id, planId, put401kPlansDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute put401kPlansDefinition request with HTTP info returned
         * @return ApiResponse&lt;Put401kPlansDefinition200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Put401kPlansDefinition200Response> executeWithHttpInfo() throws ApiException {
            return put401kPlansDefinitionWithHttpInfo(id, planId, put401kPlansDefinitionRequest);
        }

        /**
         * Execute put401kPlansDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Put401kPlansDefinition200Response> _callback) throws ApiException {
            return put401kPlansDefinitionAsync(id, planId, put401kPlansDefinitionRequest, _callback);
        }
    }

    /**
     * Update 401k plan
     * Update 401k plan  **Token scopes**: &#x60;benefits:write&#x60;
     * @param id Id from the legal entity to update a 401k plan (required)
     * @param planId 401K plan id (required)
     * @param put401kPlansDefinitionRequest  (required)
     * @return APIput401kPlansDefinitionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIput401kPlansDefinitionRequest put401kPlansDefinition(String id, String planId, Put401kPlansDefinitionRequest put401kPlansDefinitionRequest) {
        return new APIput401kPlansDefinitionRequest(id, planId, put401kPlansDefinitionRequest);
    }
}
