/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetBenefitPaystubs200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaystubsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaystubsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaystubsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBenefitPaystubsCall(String legalEntityId, String states, String dateStart, String dateEnd, Integer itemsPerPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/benefits/legal-entities/{legalEntityId}/paystubs"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (states != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("states", states));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items_per_page", itemsPerPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitPaystubsValidateBeforeCall(String legalEntityId, String states, String dateStart, String dateEnd, Integer itemsPerPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getBenefitPaystubs(Async)");
        }

        return getBenefitPaystubsCall(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor, _callback);

    }


    private ApiResponse<GetBenefitPaystubs200Response> getBenefitPaystubsWithHttpInfo(String legalEntityId, String states, String dateStart, String dateEnd, Integer itemsPerPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getBenefitPaystubsValidateBeforeCall(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor, null);
        Type localVarReturnType = new TypeToken<GetBenefitPaystubs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBenefitPaystubsAsync(String legalEntityId, String states, String dateStart, String dateEnd, Integer itemsPerPage, String cursor, final ApiCallback<GetBenefitPaystubs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitPaystubsValidateBeforeCall(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<GetBenefitPaystubs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetBenefitPaystubsRequest {
        private final String legalEntityId;
        private String states;
        private String dateStart;
        private String dateEnd;
        private Integer itemsPerPage;
        private String cursor;

        private APIgetBenefitPaystubsRequest(String legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set states
         * @param states Payroll states: OPEN | LOCKED | CLOSED (OPEN doesn&#39;t have &#x60;employees&#x60; info) (optional)
         * @return APIgetBenefitPaystubsRequest
         */
        public APIgetBenefitPaystubsRequest states(String states) {
            this.states = states;
            return this;
        }

        /**
         * Set dateStart
         * @param dateStart Start date to fectch the paystubs from (optional)
         * @return APIgetBenefitPaystubsRequest
         */
        public APIgetBenefitPaystubsRequest dateStart(String dateStart) {
            this.dateStart = dateStart;
            return this;
        }

        /**
         * Set dateEnd
         * @param dateEnd End date to fectch the paystubs (optional)
         * @return APIgetBenefitPaystubsRequest
         */
        public APIgetBenefitPaystubsRequest dateEnd(String dateEnd) {
            this.dateEnd = dateEnd;
            return this;
        }

        /**
         * Set itemsPerPage
         * @param itemsPerPage Items per page (optional, default to 10)
         * @return APIgetBenefitPaystubsRequest
         */
        public APIgetBenefitPaystubsRequest itemsPerPage(Integer itemsPerPage) {
            this.itemsPerPage = itemsPerPage;
            return this;
        }

        /**
         * Set cursor
         * @param cursor The last fetched id to start querying from (optional)
         * @return APIgetBenefitPaystubsRequest
         */
        public APIgetBenefitPaystubsRequest cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }

        /**
         * Build call for getBenefitPaystubs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitPaystubsCall(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor, _callback);
        }

        /**
         * Execute getBenefitPaystubs request
         * @return GetBenefitPaystubs200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GetBenefitPaystubs200Response execute() throws ApiException {
            ApiResponse<GetBenefitPaystubs200Response> localVarResp = getBenefitPaystubsWithHttpInfo(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor);
            return localVarResp.getData();
        }

        /**
         * Execute getBenefitPaystubs request with HTTP info returned
         * @return ApiResponse&lt;GetBenefitPaystubs200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetBenefitPaystubs200Response> executeWithHttpInfo() throws ApiException {
            return getBenefitPaystubsWithHttpInfo(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor);
        }

        /**
         * Execute getBenefitPaystubs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetBenefitPaystubs200Response> _callback) throws ApiException {
            return getBenefitPaystubsAsync(legalEntityId, states, dateStart, dateEnd, itemsPerPage, cursor, _callback);
        }
    }

    /**
     * Get paystubs from legal entity integrated with external benefits vendor
     * Get paystubs from legal entity integrated with external benefits vendor
     * @param legalEntityId Id from the legal entity to fetch data (required)
     * @return APIgetBenefitPaystubsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetBenefitPaystubsRequest getBenefitPaystubs(String legalEntityId) {
        return new APIgetBenefitPaystubsRequest(legalEntityId);
    }
}
