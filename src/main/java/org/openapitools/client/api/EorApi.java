/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CalculateEorEmploymentCost200Response;
import org.openapitools.client.model.CalculateEorEmploymentCostRequest;
import org.openapitools.client.model.CreateEorContract200Response;
import org.openapitools.client.model.CreateEorContractRequest;
import org.openapitools.client.model.EorContractCreatedContainer;
import org.openapitools.client.model.GetEORContractBenefits200Response;
import org.openapitools.client.model.GetEORWorkerPayslipDownloadUrl200Response;
import org.openapitools.client.model.GetEORWorkerPayslips200Response;
import org.openapitools.client.model.GetEorCountryValidations200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateEorEmploymentCostCall(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calculateEorEmploymentCostRequest;

        // create path and map variables
        String localVarPath = "/eor/employment_cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "public", "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateEorEmploymentCostValidateBeforeCall(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calculateEorEmploymentCostRequest' is set
        if (calculateEorEmploymentCostRequest == null) {
            throw new ApiException("Missing the required parameter 'calculateEorEmploymentCostRequest' when calling calculateEorEmploymentCost(Async)");
        }

        return calculateEorEmploymentCostCall(calculateEorEmploymentCostRequest, _callback);

    }


    private ApiResponse<CalculateEorEmploymentCost200Response> calculateEorEmploymentCostWithHttpInfo(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateEorEmploymentCostValidateBeforeCall(calculateEorEmploymentCostRequest, null);
        Type localVarReturnType = new TypeToken<CalculateEorEmploymentCost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateEorEmploymentCostAsync(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest, final ApiCallback<CalculateEorEmploymentCost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateEorEmploymentCostValidateBeforeCall(calculateEorEmploymentCostRequest, _callback);
        Type localVarReturnType = new TypeToken<CalculateEorEmploymentCost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcalculateEorEmploymentCostRequest {
        private final CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest;

        private APIcalculateEorEmploymentCostRequest(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest) {
            this.calculateEorEmploymentCostRequest = calculateEorEmploymentCostRequest;
        }

        /**
         * Build call for calculateEorEmploymentCost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated employee costs. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Some required fields are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. Something went wrong while calculating costs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateEorEmploymentCostCall(calculateEorEmploymentCostRequest, _callback);
        }

        /**
         * Execute calculateEorEmploymentCost request
         * @return CalculateEorEmploymentCost200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated employee costs. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Some required fields are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. Something went wrong while calculating costs. </td><td>  -  </td></tr>
         </table>
         */
        public CalculateEorEmploymentCost200Response execute() throws ApiException {
            ApiResponse<CalculateEorEmploymentCost200Response> localVarResp = calculateEorEmploymentCostWithHttpInfo(calculateEorEmploymentCostRequest);
            return localVarResp.getData();
        }

        /**
         * Execute calculateEorEmploymentCost request with HTTP info returned
         * @return ApiResponse&lt;CalculateEorEmploymentCost200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated employee costs. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Some required fields are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. Something went wrong while calculating costs. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculateEorEmploymentCost200Response> executeWithHttpInfo() throws ApiException {
            return calculateEorEmploymentCostWithHttpInfo(calculateEorEmploymentCostRequest);
        }

        /**
         * Execute calculateEorEmploymentCost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated employee costs. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Some required fields are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. Something went wrong while calculating costs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculateEorEmploymentCost200Response> _callback) throws ApiException {
            return calculateEorEmploymentCostAsync(calculateEorEmploymentCostRequest, _callback);
        }
    }

    /**
     * Calculate Employee Costs Globally
     * Determine the total employment costs for an Employee of Record (EOR) arrangement across different countries, including salary, employer costs, benefits, and additional fees.
     * @param calculateEorEmploymentCostRequest  (required)
     * @return APIcalculateEorEmploymentCostRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully calculated employee costs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Some required fields are missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. Something went wrong while calculating costs. </td><td>  -  </td></tr>
     </table>
     */
    public APIcalculateEorEmploymentCostRequest calculateEorEmploymentCost(CalculateEorEmploymentCostRequest calculateEorEmploymentCostRequest) {
        return new APIcalculateEorEmploymentCostRequest(calculateEorEmploymentCostRequest);
    }
    private okhttp3.Call createEorContractCall(CreateEorContractRequest createEorContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEorContractRequest;

        // create path and map variables
        String localVarPath = "/eor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEorContractValidateBeforeCall(CreateEorContractRequest createEorContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEorContractRequest' is set
        if (createEorContractRequest == null) {
            throw new ApiException("Missing the required parameter 'createEorContractRequest' when calling createEorContract(Async)");
        }

        return createEorContractCall(createEorContractRequest, _callback);

    }


    private ApiResponse<CreateEorContract200Response> createEorContractWithHttpInfo(CreateEorContractRequest createEorContractRequest) throws ApiException {
        okhttp3.Call localVarCall = createEorContractValidateBeforeCall(createEorContractRequest, null);
        Type localVarReturnType = new TypeToken<CreateEorContract200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEorContractAsync(CreateEorContractRequest createEorContractRequest, final ApiCallback<CreateEorContract200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEorContractValidateBeforeCall(createEorContractRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateEorContract200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateEorContractRequest {
        private final CreateEorContractRequest createEorContractRequest;

        private APIcreateEorContractRequest(CreateEorContractRequest createEorContractRequest) {
            this.createEorContractRequest = createEorContractRequest;
        }

        /**
         * Build call for createEorContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the EOR contract quote. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createEorContractCall(createEorContractRequest, _callback);
        }

        /**
         * Execute createEorContract request
         * @return CreateEorContract200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the EOR contract quote. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public CreateEorContract200Response execute() throws ApiException {
            ApiResponse<CreateEorContract200Response> localVarResp = createEorContractWithHttpInfo(createEorContractRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createEorContract request with HTTP info returned
         * @return ApiResponse&lt;CreateEorContract200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the EOR contract quote. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateEorContract200Response> executeWithHttpInfo() throws ApiException {
            return createEorContractWithHttpInfo(createEorContractRequest);
        }

        /**
         * Execute createEorContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the EOR contract quote. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateEorContract200Response> _callback) throws ApiException {
            return createEorContractAsync(createEorContractRequest, _callback);
        }
    }

    /**
     * Create an EOR contract
     * Creates an Employee of Record (EOR) contract quote. This endpoint allows to submit details for an EOR contract. Deel will process the information and return a quote for the requested contract.  **Token scopes**: &#x60;contracts:write&#x60;
     * @param createEorContractRequest The details of the Employee (EOR) contract to be created. (required)
     * @return APIcreateEorContractRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the EOR contract quote. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateEorContractRequest createEorContract(CreateEorContractRequest createEorContractRequest) {
        return new APIcreateEorContractRequest(createEorContractRequest);
    }
    private okhttp3.Call getEORContractBenefitsCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/{contract_id}/benefits"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEORContractBenefitsValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getEORContractBenefits(Async)");
        }

        return getEORContractBenefitsCall(contractId, _callback);

    }


    private ApiResponse<GetEORContractBenefits200Response> getEORContractBenefitsWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getEORContractBenefitsValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<GetEORContractBenefits200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEORContractBenefitsAsync(String contractId, final ApiCallback<GetEORContractBenefits200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEORContractBenefitsValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<GetEORContractBenefits200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEORContractBenefitsRequest {
        private final String contractId;

        private APIgetEORContractBenefitsRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getEORContractBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the list of EOR contract benefits. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The &#x60;contract_id&#x60; parameter is missing or improperly formatted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist or has no associated benefits. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEORContractBenefitsCall(contractId, _callback);
        }

        /**
         * Execute getEORContractBenefits request
         * @return GetEORContractBenefits200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the list of EOR contract benefits. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The &#x60;contract_id&#x60; parameter is missing or improperly formatted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist or has no associated benefits. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetEORContractBenefits200Response execute() throws ApiException {
            ApiResponse<GetEORContractBenefits200Response> localVarResp = getEORContractBenefitsWithHttpInfo(contractId);
            return localVarResp.getData();
        }

        /**
         * Execute getEORContractBenefits request with HTTP info returned
         * @return ApiResponse&lt;GetEORContractBenefits200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the list of EOR contract benefits. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The &#x60;contract_id&#x60; parameter is missing or improperly formatted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist or has no associated benefits. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEORContractBenefits200Response> executeWithHttpInfo() throws ApiException {
            return getEORContractBenefitsWithHttpInfo(contractId);
        }

        /**
         * Execute getEORContractBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the list of EOR contract benefits. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The &#x60;contract_id&#x60; parameter is missing or improperly formatted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist or has no associated benefits. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEORContractBenefits200Response> _callback) throws ApiException {
            return getEORContractBenefitsAsync(contractId, _callback);
        }
    }

    /**
     * Retrieve Benefits for EOR Contract
     * Fetch detailed information about benefits associated with a specific Employee of Record (EOR) contract. The benefits include plan details, provider information, and enrollment statuses.  **Token scopes**: &#x60;contracts:read&#x60;
     * @param contractId Deel contract ID. (required)
     * @return APIgetEORContractBenefitsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of EOR contract benefits. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. The &#x60;contract_id&#x60; parameter is missing or improperly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified contract ID does not exist or has no associated benefits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEORContractBenefitsRequest getEORContractBenefits(String contractId) {
        return new APIgetEORContractBenefitsRequest(contractId);
    }
    private okhttp3.Call getEORWorkerPayslipDownloadUrlCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/workers/{worker_id}/payslips/{payslip_id}/download"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "payslip_id" + "}", localVarApiClient.escapeString(payslipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEORWorkerPayslipDownloadUrlValidateBeforeCall(String workerId, String payslipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getEORWorkerPayslipDownloadUrl(Async)");
        }

        // verify the required parameter 'payslipId' is set
        if (payslipId == null) {
            throw new ApiException("Missing the required parameter 'payslipId' when calling getEORWorkerPayslipDownloadUrl(Async)");
        }

        return getEORWorkerPayslipDownloadUrlCall(workerId, payslipId, _callback);

    }


    private ApiResponse<GetEORWorkerPayslipDownloadUrl200Response> getEORWorkerPayslipDownloadUrlWithHttpInfo(String workerId, String payslipId) throws ApiException {
        okhttp3.Call localVarCall = getEORWorkerPayslipDownloadUrlValidateBeforeCall(workerId, payslipId, null);
        Type localVarReturnType = new TypeToken<GetEORWorkerPayslipDownloadUrl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEORWorkerPayslipDownloadUrlAsync(String workerId, String payslipId, final ApiCallback<GetEORWorkerPayslipDownloadUrl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEORWorkerPayslipDownloadUrlValidateBeforeCall(workerId, payslipId, _callback);
        Type localVarReturnType = new TypeToken<GetEORWorkerPayslipDownloadUrl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEORWorkerPayslipDownloadUrlRequest {
        private final String workerId;
        private final String payslipId;

        private APIgetEORWorkerPayslipDownloadUrlRequest(String workerId, String payslipId) {
            this.workerId = workerId;
            this.payslipId = payslipId;
        }

        /**
         * Build call for getEORWorkerPayslipDownloadUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the payslip download link. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Either the worker ID or payslip ID is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payslip not found. The specified worker ID or payslip ID does not match any records. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEORWorkerPayslipDownloadUrlCall(workerId, payslipId, _callback);
        }

        /**
         * Execute getEORWorkerPayslipDownloadUrl request
         * @return GetEORWorkerPayslipDownloadUrl200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the payslip download link. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Either the worker ID or payslip ID is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payslip not found. The specified worker ID or payslip ID does not match any records. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetEORWorkerPayslipDownloadUrl200Response execute() throws ApiException {
            ApiResponse<GetEORWorkerPayslipDownloadUrl200Response> localVarResp = getEORWorkerPayslipDownloadUrlWithHttpInfo(workerId, payslipId);
            return localVarResp.getData();
        }

        /**
         * Execute getEORWorkerPayslipDownloadUrl request with HTTP info returned
         * @return ApiResponse&lt;GetEORWorkerPayslipDownloadUrl200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the payslip download link. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Either the worker ID or payslip ID is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payslip not found. The specified worker ID or payslip ID does not match any records. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEORWorkerPayslipDownloadUrl200Response> executeWithHttpInfo() throws ApiException {
            return getEORWorkerPayslipDownloadUrlWithHttpInfo(workerId, payslipId);
        }

        /**
         * Execute getEORWorkerPayslipDownloadUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the payslip download link. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. Either the worker ID or payslip ID is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payslip not found. The specified worker ID or payslip ID does not match any records. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEORWorkerPayslipDownloadUrl200Response> _callback) throws ApiException {
            return getEORWorkerPayslipDownloadUrlAsync(workerId, payslipId, _callback);
        }
    }

    /**
     * Retrieve payslip PDF download link
     * Retrieve a URL to download a specific payslip PDF for a EoR worker. This endpoint is useful for accessing detailed payment records in a portable document format.  **Token scopes**: &#x60;payslips:read&#x60;
     * @param workerId The ID of the worker whose payslip download link is being requested. (required)
     * @param payslipId The ID of the specific payslip to download. (required)
     * @return APIgetEORWorkerPayslipDownloadUrlRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the payslip download link. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Either the worker ID or payslip ID is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payslip not found. The specified worker ID or payslip ID does not match any records. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEORWorkerPayslipDownloadUrlRequest getEORWorkerPayslipDownloadUrl(String workerId, String payslipId) {
        return new APIgetEORWorkerPayslipDownloadUrlRequest(workerId, payslipId);
    }
    private okhttp3.Call getEORWorkerPayslipsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/workers/{worker_id}/payslips"
            .replace("{" + "worker_id" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEORWorkerPayslipsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getEORWorkerPayslips(Async)");
        }

        return getEORWorkerPayslipsCall(workerId, _callback);

    }


    private ApiResponse<GetEORWorkerPayslips200Response> getEORWorkerPayslipsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getEORWorkerPayslipsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<GetEORWorkerPayslips200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEORWorkerPayslipsAsync(String workerId, final ApiCallback<GetEORWorkerPayslips200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEORWorkerPayslipsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<GetEORWorkerPayslips200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEORWorkerPayslipsRequest {
        private final String workerId;

        private APIgetEORWorkerPayslipsRequest(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getEORWorkerPayslips
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payslip records successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The worker ID format is incorrect. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Worker not found or no payslips available. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEORWorkerPayslipsCall(workerId, _callback);
        }

        /**
         * Execute getEORWorkerPayslips request
         * @return GetEORWorkerPayslips200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payslip records successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The worker ID format is incorrect. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Worker not found or no payslips available. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetEORWorkerPayslips200Response execute() throws ApiException {
            ApiResponse<GetEORWorkerPayslips200Response> localVarResp = getEORWorkerPayslipsWithHttpInfo(workerId);
            return localVarResp.getData();
        }

        /**
         * Execute getEORWorkerPayslips request with HTTP info returned
         * @return ApiResponse&lt;GetEORWorkerPayslips200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payslip records successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The worker ID format is incorrect. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Worker not found or no payslips available. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEORWorkerPayslips200Response> executeWithHttpInfo() throws ApiException {
            return getEORWorkerPayslipsWithHttpInfo(workerId);
        }

        /**
         * Execute getEORWorkerPayslips request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payslip records successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The worker ID format is incorrect. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Worker not found or no payslips available. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEORWorkerPayslips200Response> _callback) throws ApiException {
            return getEORWorkerPayslipsAsync(workerId, _callback);
        }
    }

    /**
     * Retrieve employee payslip records
     * Retrieve a list of payslip records for a specific employee, detailing payment periods, status, and associated identifiers.  **Token scopes**: &#x60;payslips:read&#x60;
     * @param workerId The ID of the worker whose payslips are being retrieved. (required)
     * @return APIgetEORWorkerPayslipsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payslip records successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. The worker ID format is incorrect. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Worker not found or no payslips available. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEORWorkerPayslipsRequest getEORWorkerPayslips(String workerId) {
        return new APIgetEORWorkerPayslipsRequest(workerId);
    }
    private okhttp3.Call getEorCountryValidationsCall(String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eor/validations/{country_code}"
            .replace("{" + "country_code" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEorCountryValidationsValidateBeforeCall(String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getEorCountryValidations(Async)");
        }

        return getEorCountryValidationsCall(countryCode, _callback);

    }


    private ApiResponse<GetEorCountryValidations200Response> getEorCountryValidationsWithHttpInfo(String countryCode) throws ApiException {
        okhttp3.Call localVarCall = getEorCountryValidationsValidateBeforeCall(countryCode, null);
        Type localVarReturnType = new TypeToken<GetEorCountryValidations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEorCountryValidationsAsync(String countryCode, final ApiCallback<GetEorCountryValidations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEorCountryValidationsValidateBeforeCall(countryCode, _callback);
        Type localVarReturnType = new TypeToken<GetEorCountryValidations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEorCountryValidationsRequest {
        private final String countryCode;

        private APIgetEorCountryValidationsRequest(String countryCode) {
            this.countryCode = countryCode;
        }

        /**
         * Build call for getEorCountryValidations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The hiring guide data was successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided country code does not match the expected format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Country data not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEorCountryValidationsCall(countryCode, _callback);
        }

        /**
         * Execute getEorCountryValidations request
         * @return GetEorCountryValidations200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The hiring guide data was successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided country code does not match the expected format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Country data not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetEorCountryValidations200Response execute() throws ApiException {
            ApiResponse<GetEorCountryValidations200Response> localVarResp = getEorCountryValidationsWithHttpInfo(countryCode);
            return localVarResp.getData();
        }

        /**
         * Execute getEorCountryValidations request with HTTP info returned
         * @return ApiResponse&lt;GetEorCountryValidations200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The hiring guide data was successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided country code does not match the expected format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Country data not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEorCountryValidations200Response> executeWithHttpInfo() throws ApiException {
            return getEorCountryValidationsWithHttpInfo(countryCode);
        }

        /**
         * Execute getEorCountryValidations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The hiring guide data was successfully retrieved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided country code does not match the expected format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Country data not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEorCountryValidations200Response> _callback) throws ApiException {
            return getEorCountryValidationsAsync(countryCode, _callback);
        }
    }

    /**
     * Retrieve detailed hiring guide for a country
     * Retrieve comprehensive hiring guide data for a specific country. This data can be used in creation and validation of Employee of Record (EOR) contract quotes, providing details on salaries, holidays, insurance, and other employment specifics.  **Token scopes**: &#x60;contracts:read&#x60;
     * @param countryCode The two-letter ISO code of the country for which to retrieve the hiring guide. (required)
     * @return APIgetEorCountryValidationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The hiring guide data was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. The provided country code does not match the expected format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country data not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEorCountryValidationsRequest getEorCountryValidations(String countryCode) {
        return new APIgetEorCountryValidationsRequest(countryCode);
    }
}
