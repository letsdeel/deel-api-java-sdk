/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateOrUpdateChildRelationBetweenProfilesRequest;
import org.openapitools.client.model.CreateOrUpdateParentRelationBetweenProfilesRequest;
import org.openapitools.client.model.CreateWorkerRelationExternalIdRequest;
import org.openapitools.client.model.CreateWorkerRelationRequest;
import org.openapitools.client.model.CreateWorkerRelationType201Response;
import org.openapitools.client.model.CreateWorkerRelationTypeRequest;
import org.openapitools.client.model.GetAllProfileWorkerRelations200Response;
import org.openapitools.client.model.GetAllProfileWorkerRelationsExternalId200Response;
import org.openapitools.client.model.GetAllWorkerRelationTypes200Response;
import java.util.UUID;
import org.openapitools.client.model.UpdateWorkerRelationType204Response;
import org.openapitools.client.model.UpdateWorkerRelationTypeExternalId204Response;
import org.openapitools.client.model.UpdateWorkerRelationTypeRequest;
import org.openapitools.client.model.UpsertChildWorkerRelationsExternalIdRequest;
import org.openapitools.client.model.UpsertChildWorkerRelationsRequest;
import org.openapitools.client.model.UpsertParentWorkerRelationsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerRelationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerRelationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerRelationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrUpdateChildRelationBetweenProfilesCall(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateChildRelationBetweenProfilesRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external/{hrisProfileExternalId}/child"
            .replace("{" + "hrisProfileExternalId" + "}", localVarApiClient.escapeString(hrisProfileExternalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateChildRelationBetweenProfilesValidateBeforeCall(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileExternalId' is set
        if (hrisProfileExternalId == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileExternalId' when calling createOrUpdateChildRelationBetweenProfiles(Async)");
        }

        // verify the required parameter 'createOrUpdateChildRelationBetweenProfilesRequest' is set
        if (createOrUpdateChildRelationBetweenProfilesRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrUpdateChildRelationBetweenProfilesRequest' when calling createOrUpdateChildRelationBetweenProfiles(Async)");
        }

        return createOrUpdateChildRelationBetweenProfilesCall(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest, _callback);

    }


    private ApiResponse<Void> createOrUpdateChildRelationBetweenProfilesWithHttpInfo(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateChildRelationBetweenProfilesValidateBeforeCall(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOrUpdateChildRelationBetweenProfilesAsync(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateChildRelationBetweenProfilesValidateBeforeCall(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateOrUpdateChildRelationBetweenProfilesRequest {
        private final String hrisProfileExternalId;
        private final CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest;

        private APIcreateOrUpdateChildRelationBetweenProfilesRequest(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest) {
            this.hrisProfileExternalId = hrisProfileExternalId;
            this.createOrUpdateChildRelationBetweenProfilesRequest = createOrUpdateChildRelationBetweenProfilesRequest;
        }

        /**
         * Build call for createOrUpdateChildRelationBetweenProfiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrUpdateChildRelationBetweenProfilesCall(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest, _callback);
        }

        /**
         * Execute createOrUpdateChildRelationBetweenProfiles request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createOrUpdateChildRelationBetweenProfilesWithHttpInfo(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest);
        }

        /**
         * Execute createOrUpdateChildRelationBetweenProfiles request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createOrUpdateChildRelationBetweenProfilesWithHttpInfo(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest);
        }

        /**
         * Execute createOrUpdateChildRelationBetweenProfiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createOrUpdateChildRelationBetweenProfilesAsync(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest, _callback);
        }
    }

    /**
     * Create child worker relation with external Id
     * Create child worker relation with external Id.  **Token scopes**: &#x60;profile:write&#x60;
     * @param hrisProfileExternalId External Profile id (required)
     * @param createOrUpdateChildRelationBetweenProfilesRequest  (required)
     * @return APIcreateOrUpdateChildRelationBetweenProfilesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfiles(String hrisProfileExternalId, CreateOrUpdateChildRelationBetweenProfilesRequest createOrUpdateChildRelationBetweenProfilesRequest) {
        return new APIcreateOrUpdateChildRelationBetweenProfilesRequest(hrisProfileExternalId, createOrUpdateChildRelationBetweenProfilesRequest);
    }
    private okhttp3.Call createOrUpdateParentRelationBetweenProfilesCall(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateParentRelationBetweenProfilesRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external/{hrisProfileExternalId}/parent"
            .replace("{" + "hrisProfileExternalId" + "}", localVarApiClient.escapeString(hrisProfileExternalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateParentRelationBetweenProfilesValidateBeforeCall(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileExternalId' is set
        if (hrisProfileExternalId == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileExternalId' when calling createOrUpdateParentRelationBetweenProfiles(Async)");
        }

        // verify the required parameter 'createOrUpdateParentRelationBetweenProfilesRequest' is set
        if (createOrUpdateParentRelationBetweenProfilesRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrUpdateParentRelationBetweenProfilesRequest' when calling createOrUpdateParentRelationBetweenProfiles(Async)");
        }

        return createOrUpdateParentRelationBetweenProfilesCall(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest, _callback);

    }


    private ApiResponse<Void> createOrUpdateParentRelationBetweenProfilesWithHttpInfo(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateParentRelationBetweenProfilesValidateBeforeCall(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOrUpdateParentRelationBetweenProfilesAsync(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateParentRelationBetweenProfilesValidateBeforeCall(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateOrUpdateParentRelationBetweenProfilesRequest {
        private final UUID hrisProfileExternalId;
        private final CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest;

        private APIcreateOrUpdateParentRelationBetweenProfilesRequest(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest) {
            this.hrisProfileExternalId = hrisProfileExternalId;
            this.createOrUpdateParentRelationBetweenProfilesRequest = createOrUpdateParentRelationBetweenProfilesRequest;
        }

        /**
         * Build call for createOrUpdateParentRelationBetweenProfiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrUpdateParentRelationBetweenProfilesCall(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest, _callback);
        }

        /**
         * Execute createOrUpdateParentRelationBetweenProfiles request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createOrUpdateParentRelationBetweenProfilesWithHttpInfo(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest);
        }

        /**
         * Execute createOrUpdateParentRelationBetweenProfiles request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createOrUpdateParentRelationBetweenProfilesWithHttpInfo(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest);
        }

        /**
         * Execute createOrUpdateParentRelationBetweenProfiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createOrUpdateParentRelationBetweenProfilesAsync(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest, _callback);
        }
    }

    /**
     * Create a parent worker relation with external id
     * Create a parent worker relation with external id.  **Token scopes**: &#x60;profile:write&#x60;
     * @param hrisProfileExternalId HRISProfile public id (required)
     * @param createOrUpdateParentRelationBetweenProfilesRequest  (required)
     * @return APIcreateOrUpdateParentRelationBetweenProfilesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfiles(UUID hrisProfileExternalId, CreateOrUpdateParentRelationBetweenProfilesRequest createOrUpdateParentRelationBetweenProfilesRequest) {
        return new APIcreateOrUpdateParentRelationBetweenProfilesRequest(hrisProfileExternalId, createOrUpdateParentRelationBetweenProfilesRequest);
    }
    private okhttp3.Call createWorkerRelationCall(CreateWorkerRelationRequest createWorkerRelationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWorkerRelationRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkerRelationValidateBeforeCall(CreateWorkerRelationRequest createWorkerRelationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWorkerRelationRequest' is set
        if (createWorkerRelationRequest == null) {
            throw new ApiException("Missing the required parameter 'createWorkerRelationRequest' when calling createWorkerRelation(Async)");
        }

        return createWorkerRelationCall(createWorkerRelationRequest, _callback);

    }


    private ApiResponse<Void> createWorkerRelationWithHttpInfo(CreateWorkerRelationRequest createWorkerRelationRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkerRelationValidateBeforeCall(createWorkerRelationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createWorkerRelationAsync(CreateWorkerRelationRequest createWorkerRelationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkerRelationValidateBeforeCall(createWorkerRelationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateWorkerRelationRequest {
        private final CreateWorkerRelationRequest createWorkerRelationRequest;

        private APIcreateWorkerRelationRequest(CreateWorkerRelationRequest createWorkerRelationRequest) {
            this.createWorkerRelationRequest = createWorkerRelationRequest;
        }

        /**
         * Build call for createWorkerRelation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWorkerRelationCall(createWorkerRelationRequest, _callback);
        }

        /**
         * Execute createWorkerRelation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createWorkerRelationWithHttpInfo(createWorkerRelationRequest);
        }

        /**
         * Execute createWorkerRelation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createWorkerRelationWithHttpInfo(createWorkerRelationRequest);
        }

        /**
         * Execute createWorkerRelation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createWorkerRelationAsync(createWorkerRelationRequest, _callback);
        }
    }

    /**
     * Create a worker relation
     * Create a hierarchical relation between a worker and its subordinates.  **Token scopes**: &#x60;profile:write&#x60;
     * @param createWorkerRelationRequest  (required)
     * @return APIcreateWorkerRelationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWorkerRelationRequest createWorkerRelation(CreateWorkerRelationRequest createWorkerRelationRequest) {
        return new APIcreateWorkerRelationRequest(createWorkerRelationRequest);
    }
    private okhttp3.Call createWorkerRelationExternalIdCall(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWorkerRelationExternalIdRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkerRelationExternalIdValidateBeforeCall(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWorkerRelationExternalIdRequest' is set
        if (createWorkerRelationExternalIdRequest == null) {
            throw new ApiException("Missing the required parameter 'createWorkerRelationExternalIdRequest' when calling createWorkerRelationExternalId(Async)");
        }

        return createWorkerRelationExternalIdCall(createWorkerRelationExternalIdRequest, _callback);

    }


    private ApiResponse<Void> createWorkerRelationExternalIdWithHttpInfo(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkerRelationExternalIdValidateBeforeCall(createWorkerRelationExternalIdRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createWorkerRelationExternalIdAsync(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkerRelationExternalIdValidateBeforeCall(createWorkerRelationExternalIdRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateWorkerRelationExternalIdRequest {
        private final CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest;

        private APIcreateWorkerRelationExternalIdRequest(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest) {
            this.createWorkerRelationExternalIdRequest = createWorkerRelationExternalIdRequest;
        }

        /**
         * Build call for createWorkerRelationExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWorkerRelationExternalIdCall(createWorkerRelationExternalIdRequest, _callback);
        }

        /**
         * Execute createWorkerRelationExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createWorkerRelationExternalIdWithHttpInfo(createWorkerRelationExternalIdRequest);
        }

        /**
         * Execute createWorkerRelationExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createWorkerRelationExternalIdWithHttpInfo(createWorkerRelationExternalIdRequest);
        }

        /**
         * Execute createWorkerRelationExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createWorkerRelationExternalIdAsync(createWorkerRelationExternalIdRequest, _callback);
        }
    }

    /**
     * Create worker relation with external Ids
     * Create a hierarchical relation between a worker and its subordinates using external IDs to identify them.  **Token scopes**: &#x60;profile:write&#x60;
     * @param createWorkerRelationExternalIdRequest  (required)
     * @return APIcreateWorkerRelationExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWorkerRelationExternalIdRequest createWorkerRelationExternalId(CreateWorkerRelationExternalIdRequest createWorkerRelationExternalIdRequest) {
        return new APIcreateWorkerRelationExternalIdRequest(createWorkerRelationExternalIdRequest);
    }
    private okhttp3.Call createWorkerRelationTypeCall(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWorkerRelationTypeRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkerRelationTypeValidateBeforeCall(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWorkerRelationTypeRequest' is set
        if (createWorkerRelationTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'createWorkerRelationTypeRequest' when calling createWorkerRelationType(Async)");
        }

        return createWorkerRelationTypeCall(createWorkerRelationTypeRequest, _callback);

    }


    private ApiResponse<CreateWorkerRelationType201Response> createWorkerRelationTypeWithHttpInfo(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkerRelationTypeValidateBeforeCall(createWorkerRelationTypeRequest, null);
        Type localVarReturnType = new TypeToken<CreateWorkerRelationType201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWorkerRelationTypeAsync(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest, final ApiCallback<CreateWorkerRelationType201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkerRelationTypeValidateBeforeCall(createWorkerRelationTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateWorkerRelationType201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWorkerRelationTypeRequest {
        private final CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest;

        private APIcreateWorkerRelationTypeRequest(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest) {
            this.createWorkerRelationTypeRequest = createWorkerRelationTypeRequest;
        }

        /**
         * Build call for createWorkerRelationType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWorkerRelationTypeCall(createWorkerRelationTypeRequest, _callback);
        }

        /**
         * Execute createWorkerRelationType request
         * @return CreateWorkerRelationType201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateWorkerRelationType201Response execute() throws ApiException {
            ApiResponse<CreateWorkerRelationType201Response> localVarResp = createWorkerRelationTypeWithHttpInfo(createWorkerRelationTypeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createWorkerRelationType request with HTTP info returned
         * @return ApiResponse&lt;CreateWorkerRelationType201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateWorkerRelationType201Response> executeWithHttpInfo() throws ApiException {
            return createWorkerRelationTypeWithHttpInfo(createWorkerRelationTypeRequest);
        }

        /**
         * Execute createWorkerRelationType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateWorkerRelationType201Response> _callback) throws ApiException {
            return createWorkerRelationTypeAsync(createWorkerRelationTypeRequest, _callback);
        }
    }

    /**
     * Create worker relation type
     * Create worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param createWorkerRelationTypeRequest  (required)
     * @return APIcreateWorkerRelationTypeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWorkerRelationTypeRequest createWorkerRelationType(CreateWorkerRelationTypeRequest createWorkerRelationTypeRequest) {
        return new APIcreateWorkerRelationTypeRequest(createWorkerRelationTypeRequest);
    }
    private okhttp3.Call deleteWorkerRelationCall(UUID hrisProfileOid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/{hrisProfileOid}"
            .replace("{" + "hrisProfileOid" + "}", localVarApiClient.escapeString(hrisProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkerRelationValidateBeforeCall(UUID hrisProfileOid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileOid' is set
        if (hrisProfileOid == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileOid' when calling deleteWorkerRelation(Async)");
        }

        return deleteWorkerRelationCall(hrisProfileOid, _callback);

    }


    private ApiResponse<Void> deleteWorkerRelationWithHttpInfo(UUID hrisProfileOid) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkerRelationValidateBeforeCall(hrisProfileOid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkerRelationAsync(UUID hrisProfileOid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkerRelationValidateBeforeCall(hrisProfileOid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWorkerRelationRequest {
        private final UUID hrisProfileOid;

        private APIdeleteWorkerRelationRequest(UUID hrisProfileOid) {
            this.hrisProfileOid = hrisProfileOid;
        }

        /**
         * Build call for deleteWorkerRelation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkerRelationCall(hrisProfileOid, _callback);
        }

        /**
         * Execute deleteWorkerRelation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkerRelationWithHttpInfo(hrisProfileOid);
        }

        /**
         * Execute deleteWorkerRelation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkerRelationWithHttpInfo(hrisProfileOid);
        }

        /**
         * Execute deleteWorkerRelation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkerRelationAsync(hrisProfileOid, _callback);
        }
    }

    /**
     * Delete a worker relation
     * Delete a worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     * @param hrisProfileOid Worker Relation ID (required)
     * @return APIdeleteWorkerRelationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWorkerRelationRequest deleteWorkerRelation(UUID hrisProfileOid) {
        return new APIdeleteWorkerRelationRequest(hrisProfileOid);
    }
    private okhttp3.Call deleteWorkerRelationExternalIdCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkerRelationExternalIdValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteWorkerRelationExternalId(Async)");
        }

        return deleteWorkerRelationExternalIdCall(profileId, _callback);

    }


    private ApiResponse<Void> deleteWorkerRelationExternalIdWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkerRelationExternalIdValidateBeforeCall(profileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkerRelationExternalIdAsync(String profileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkerRelationExternalIdValidateBeforeCall(profileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWorkerRelationExternalIdRequest {
        private final String profileId;

        private APIdeleteWorkerRelationExternalIdRequest(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Build call for deleteWorkerRelationExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkerRelationExternalIdCall(profileId, _callback);
        }

        /**
         * Execute deleteWorkerRelationExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkerRelationExternalIdWithHttpInfo(profileId);
        }

        /**
         * Execute deleteWorkerRelationExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkerRelationExternalIdWithHttpInfo(profileId);
        }

        /**
         * Execute deleteWorkerRelationExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkerRelationExternalIdAsync(profileId, _callback);
        }
    }

    /**
     * Delete a worker relation by external id
     * Delete a worker relation by external id.  **Token scopes**: &#x60;profile:write&#x60;
     * @param profileId Worker Relation external ID (required)
     * @return APIdeleteWorkerRelationExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWorkerRelationExternalIdRequest deleteWorkerRelationExternalId(String profileId) {
        return new APIdeleteWorkerRelationExternalIdRequest(profileId);
    }
    private okhttp3.Call deleteWorkerRelationTypeCall(UUID typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkerRelationTypeValidateBeforeCall(UUID typeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling deleteWorkerRelationType(Async)");
        }

        return deleteWorkerRelationTypeCall(typeId, _callback);

    }


    private ApiResponse<Void> deleteWorkerRelationTypeWithHttpInfo(UUID typeId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkerRelationTypeValidateBeforeCall(typeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkerRelationTypeAsync(UUID typeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkerRelationTypeValidateBeforeCall(typeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWorkerRelationTypeRequest {
        private final UUID typeId;

        private APIdeleteWorkerRelationTypeRequest(UUID typeId) {
            this.typeId = typeId;
        }

        /**
         * Build call for deleteWorkerRelationType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkerRelationTypeCall(typeId, _callback);
        }

        /**
         * Execute deleteWorkerRelationType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkerRelationTypeWithHttpInfo(typeId);
        }

        /**
         * Execute deleteWorkerRelationType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkerRelationTypeWithHttpInfo(typeId);
        }

        /**
         * Execute deleteWorkerRelationType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkerRelationTypeAsync(typeId, _callback);
        }
    }

    /**
     * Delete a worker relation type
     * Delete a worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param typeId Worker Relation Type ID (required)
     * @return APIdeleteWorkerRelationTypeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWorkerRelationTypeRequest deleteWorkerRelationType(UUID typeId) {
        return new APIdeleteWorkerRelationTypeRequest(typeId);
    }
    private okhttp3.Call deleteWorkerRelationTypeExternalIdCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types/external/{externalId}"
            .replace("{" + "externalId" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkerRelationTypeExternalIdValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling deleteWorkerRelationTypeExternalId(Async)");
        }

        return deleteWorkerRelationTypeExternalIdCall(externalId, _callback);

    }


    private ApiResponse<Void> deleteWorkerRelationTypeExternalIdWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkerRelationTypeExternalIdValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkerRelationTypeExternalIdAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkerRelationTypeExternalIdValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWorkerRelationTypeExternalIdRequest {
        private final String externalId;

        private APIdeleteWorkerRelationTypeExternalIdRequest(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for deleteWorkerRelationTypeExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkerRelationTypeExternalIdCall(externalId, _callback);
        }

        /**
         * Execute deleteWorkerRelationTypeExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkerRelationTypeExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteWorkerRelationTypeExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkerRelationTypeExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteWorkerRelationTypeExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkerRelationTypeExternalIdAsync(externalId, _callback);
        }
    }

    /**
     * Delete a worker relation type by external id
     * Delete a Worker Relation Type by the external ID.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param externalId Worker Relation Type external ID (required)
     * @return APIdeleteWorkerRelationTypeExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWorkerRelationTypeExternalIdRequest deleteWorkerRelationTypeExternalId(String externalId) {
        return new APIdeleteWorkerRelationTypeExternalIdRequest(externalId);
    }
    private okhttp3.Call getAllProfileWorkerRelationsCall(UUID hrisProfileOid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/{hrisProfileOid}"
            .replace("{" + "hrisProfileOid" + "}", localVarApiClient.escapeString(hrisProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProfileWorkerRelationsValidateBeforeCall(UUID hrisProfileOid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileOid' is set
        if (hrisProfileOid == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileOid' when calling getAllProfileWorkerRelations(Async)");
        }

        return getAllProfileWorkerRelationsCall(hrisProfileOid, _callback);

    }


    private ApiResponse<GetAllProfileWorkerRelations200Response> getAllProfileWorkerRelationsWithHttpInfo(UUID hrisProfileOid) throws ApiException {
        okhttp3.Call localVarCall = getAllProfileWorkerRelationsValidateBeforeCall(hrisProfileOid, null);
        Type localVarReturnType = new TypeToken<GetAllProfileWorkerRelations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProfileWorkerRelationsAsync(UUID hrisProfileOid, final ApiCallback<GetAllProfileWorkerRelations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProfileWorkerRelationsValidateBeforeCall(hrisProfileOid, _callback);
        Type localVarReturnType = new TypeToken<GetAllProfileWorkerRelations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllProfileWorkerRelationsRequest {
        private final UUID hrisProfileOid;

        private APIgetAllProfileWorkerRelationsRequest(UUID hrisProfileOid) {
            this.hrisProfileOid = hrisProfileOid;
        }

        /**
         * Build call for getAllProfileWorkerRelations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProfileWorkerRelationsCall(hrisProfileOid, _callback);
        }

        /**
         * Execute getAllProfileWorkerRelations request
         * @return GetAllProfileWorkerRelations200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetAllProfileWorkerRelations200Response execute() throws ApiException {
            ApiResponse<GetAllProfileWorkerRelations200Response> localVarResp = getAllProfileWorkerRelationsWithHttpInfo(hrisProfileOid);
            return localVarResp.getData();
        }

        /**
         * Execute getAllProfileWorkerRelations request with HTTP info returned
         * @return ApiResponse&lt;GetAllProfileWorkerRelations200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAllProfileWorkerRelations200Response> executeWithHttpInfo() throws ApiException {
            return getAllProfileWorkerRelationsWithHttpInfo(hrisProfileOid);
        }

        /**
         * Execute getAllProfileWorkerRelations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAllProfileWorkerRelations200Response> _callback) throws ApiException {
            return getAllProfileWorkerRelationsAsync(hrisProfileOid, _callback);
        }
    }

    /**
     * List of worker relations
     * List of worker relations.  **Token scopes**: &#x60;profile:read&#x60;
     * @param hrisProfileOid HrisProfile ID (required)
     * @return APIgetAllProfileWorkerRelationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllProfileWorkerRelationsRequest getAllProfileWorkerRelations(UUID hrisProfileOid) {
        return new APIgetAllProfileWorkerRelationsRequest(hrisProfileOid);
    }
    private okhttp3.Call getAllProfileWorkerRelationsExternalIdCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProfileWorkerRelationsExternalIdValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getAllProfileWorkerRelationsExternalId(Async)");
        }

        return getAllProfileWorkerRelationsExternalIdCall(profileId, _callback);

    }


    private ApiResponse<GetAllProfileWorkerRelationsExternalId200Response> getAllProfileWorkerRelationsExternalIdWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = getAllProfileWorkerRelationsExternalIdValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<GetAllProfileWorkerRelationsExternalId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProfileWorkerRelationsExternalIdAsync(String profileId, final ApiCallback<GetAllProfileWorkerRelationsExternalId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProfileWorkerRelationsExternalIdValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<GetAllProfileWorkerRelationsExternalId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllProfileWorkerRelationsExternalIdRequest {
        private final String profileId;

        private APIgetAllProfileWorkerRelationsExternalIdRequest(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Build call for getAllProfileWorkerRelationsExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProfileWorkerRelationsExternalIdCall(profileId, _callback);
        }

        /**
         * Execute getAllProfileWorkerRelationsExternalId request
         * @return GetAllProfileWorkerRelationsExternalId200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetAllProfileWorkerRelationsExternalId200Response execute() throws ApiException {
            ApiResponse<GetAllProfileWorkerRelationsExternalId200Response> localVarResp = getAllProfileWorkerRelationsExternalIdWithHttpInfo(profileId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllProfileWorkerRelationsExternalId request with HTTP info returned
         * @return ApiResponse&lt;GetAllProfileWorkerRelationsExternalId200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAllProfileWorkerRelationsExternalId200Response> executeWithHttpInfo() throws ApiException {
            return getAllProfileWorkerRelationsExternalIdWithHttpInfo(profileId);
        }

        /**
         * Execute getAllProfileWorkerRelationsExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAllProfileWorkerRelationsExternalId200Response> _callback) throws ApiException {
            return getAllProfileWorkerRelationsExternalIdAsync(profileId, _callback);
        }
    }

    /**
     * Fetch Worker Relations of a given HrisProfile by external id
     * Fetch Worker Relations of a given HrisProfile by external id.  **Token scopes**: &#x60;profile:read&#x60;
     * @param profileId HrisProfile external ID (required)
     * @return APIgetAllProfileWorkerRelationsExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllProfileWorkerRelationsExternalIdRequest getAllProfileWorkerRelationsExternalId(String profileId) {
        return new APIgetAllProfileWorkerRelationsExternalIdRequest(profileId);
    }
    private okhttp3.Call getAllWorkerRelationTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllWorkerRelationTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllWorkerRelationTypesCall(_callback);

    }


    private ApiResponse<GetAllWorkerRelationTypes200Response> getAllWorkerRelationTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllWorkerRelationTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllWorkerRelationTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllWorkerRelationTypesAsync(final ApiCallback<GetAllWorkerRelationTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllWorkerRelationTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllWorkerRelationTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllWorkerRelationTypesRequest {

        private APIgetAllWorkerRelationTypesRequest() {
        }

        /**
         * Build call for getAllWorkerRelationTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllWorkerRelationTypesCall(_callback);
        }

        /**
         * Execute getAllWorkerRelationTypes request
         * @return GetAllWorkerRelationTypes200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetAllWorkerRelationTypes200Response execute() throws ApiException {
            ApiResponse<GetAllWorkerRelationTypes200Response> localVarResp = getAllWorkerRelationTypesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getAllWorkerRelationTypes request with HTTP info returned
         * @return ApiResponse&lt;GetAllWorkerRelationTypes200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAllWorkerRelationTypes200Response> executeWithHttpInfo() throws ApiException {
            return getAllWorkerRelationTypesWithHttpInfo();
        }

        /**
         * Execute getAllWorkerRelationTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAllWorkerRelationTypes200Response> _callback) throws ApiException {
            return getAllWorkerRelationTypesAsync(_callback);
        }
    }

    /**
     * Retrieve all worker relation types
     * Retrieve all worker relation types.  **Token scopes**: &#x60;organizations:read&#x60;
     * @return APIgetAllWorkerRelationTypesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllWorkerRelationTypesRequest getAllWorkerRelationTypes() {
        return new APIgetAllWorkerRelationTypesRequest();
    }
    private okhttp3.Call updateWorkerRelationTypeCall(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkerRelationTypeRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types/{typeId}"
            .replace("{" + "typeId" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkerRelationTypeValidateBeforeCall(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling updateWorkerRelationType(Async)");
        }

        // verify the required parameter 'updateWorkerRelationTypeRequest' is set
        if (updateWorkerRelationTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorkerRelationTypeRequest' when calling updateWorkerRelationType(Async)");
        }

        return updateWorkerRelationTypeCall(typeId, updateWorkerRelationTypeRequest, _callback);

    }


    private ApiResponse<UpdateWorkerRelationType204Response> updateWorkerRelationTypeWithHttpInfo(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkerRelationTypeValidateBeforeCall(typeId, updateWorkerRelationTypeRequest, null);
        Type localVarReturnType = new TypeToken<UpdateWorkerRelationType204Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkerRelationTypeAsync(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback<UpdateWorkerRelationType204Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkerRelationTypeValidateBeforeCall(typeId, updateWorkerRelationTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateWorkerRelationType204Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWorkerRelationTypeRequest {
        private final UUID typeId;
        private final UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest;

        private APIupdateWorkerRelationTypeRequest(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) {
            this.typeId = typeId;
            this.updateWorkerRelationTypeRequest = updateWorkerRelationTypeRequest;
        }

        /**
         * Build call for updateWorkerRelationType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWorkerRelationTypeCall(typeId, updateWorkerRelationTypeRequest, _callback);
        }

        /**
         * Execute updateWorkerRelationType request
         * @return UpdateWorkerRelationType204Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateWorkerRelationType204Response execute() throws ApiException {
            ApiResponse<UpdateWorkerRelationType204Response> localVarResp = updateWorkerRelationTypeWithHttpInfo(typeId, updateWorkerRelationTypeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateWorkerRelationType request with HTTP info returned
         * @return ApiResponse&lt;UpdateWorkerRelationType204Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateWorkerRelationType204Response> executeWithHttpInfo() throws ApiException {
            return updateWorkerRelationTypeWithHttpInfo(typeId, updateWorkerRelationTypeRequest);
        }

        /**
         * Execute updateWorkerRelationType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateWorkerRelationType204Response> _callback) throws ApiException {
            return updateWorkerRelationTypeAsync(typeId, updateWorkerRelationTypeRequest, _callback);
        }
    }

    /**
     * Update a worker relation type
     * Update a worker relation type.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param typeId Worker Relation Type id (required)
     * @param updateWorkerRelationTypeRequest  (required)
     * @return APIupdateWorkerRelationTypeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWorkerRelationTypeRequest updateWorkerRelationType(UUID typeId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) {
        return new APIupdateWorkerRelationTypeRequest(typeId, updateWorkerRelationTypeRequest);
    }
    private okhttp3.Call updateWorkerRelationTypeExternalIdCall(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkerRelationTypeRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/types/external/{externalId}"
            .replace("{" + "externalId" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkerRelationTypeExternalIdValidateBeforeCall(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling updateWorkerRelationTypeExternalId(Async)");
        }

        // verify the required parameter 'updateWorkerRelationTypeRequest' is set
        if (updateWorkerRelationTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorkerRelationTypeRequest' when calling updateWorkerRelationTypeExternalId(Async)");
        }

        return updateWorkerRelationTypeExternalIdCall(externalId, updateWorkerRelationTypeRequest, _callback);

    }


    private ApiResponse<UpdateWorkerRelationTypeExternalId204Response> updateWorkerRelationTypeExternalIdWithHttpInfo(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkerRelationTypeExternalIdValidateBeforeCall(externalId, updateWorkerRelationTypeRequest, null);
        Type localVarReturnType = new TypeToken<UpdateWorkerRelationTypeExternalId204Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkerRelationTypeExternalIdAsync(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest, final ApiCallback<UpdateWorkerRelationTypeExternalId204Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkerRelationTypeExternalIdValidateBeforeCall(externalId, updateWorkerRelationTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateWorkerRelationTypeExternalId204Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWorkerRelationTypeExternalIdRequest {
        private final String externalId;
        private final UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest;

        private APIupdateWorkerRelationTypeExternalIdRequest(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) {
            this.externalId = externalId;
            this.updateWorkerRelationTypeRequest = updateWorkerRelationTypeRequest;
        }

        /**
         * Build call for updateWorkerRelationTypeExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWorkerRelationTypeExternalIdCall(externalId, updateWorkerRelationTypeRequest, _callback);
        }

        /**
         * Execute updateWorkerRelationTypeExternalId request
         * @return UpdateWorkerRelationTypeExternalId204Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateWorkerRelationTypeExternalId204Response execute() throws ApiException {
            ApiResponse<UpdateWorkerRelationTypeExternalId204Response> localVarResp = updateWorkerRelationTypeExternalIdWithHttpInfo(externalId, updateWorkerRelationTypeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateWorkerRelationTypeExternalId request with HTTP info returned
         * @return ApiResponse&lt;UpdateWorkerRelationTypeExternalId204Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateWorkerRelationTypeExternalId204Response> executeWithHttpInfo() throws ApiException {
            return updateWorkerRelationTypeExternalIdWithHttpInfo(externalId, updateWorkerRelationTypeRequest);
        }

        /**
         * Execute updateWorkerRelationTypeExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateWorkerRelationTypeExternalId204Response> _callback) throws ApiException {
            return updateWorkerRelationTypeExternalIdAsync(externalId, updateWorkerRelationTypeRequest, _callback);
        }
    }

    /**
     * Update a worker relation type by external id
     * Update a worker relation type by external id.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param externalId Worker Relation Type external ID (required)
     * @param updateWorkerRelationTypeRequest  (required)
     * @return APIupdateWorkerRelationTypeExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWorkerRelationTypeExternalIdRequest updateWorkerRelationTypeExternalId(String externalId, UpdateWorkerRelationTypeRequest updateWorkerRelationTypeRequest) {
        return new APIupdateWorkerRelationTypeExternalIdRequest(externalId, updateWorkerRelationTypeRequest);
    }
    private okhttp3.Call upsertChildWorkerRelationsCall(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertChildWorkerRelationsRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/{hrisProfileOid}/child"
            .replace("{" + "hrisProfileOid" + "}", localVarApiClient.escapeString(hrisProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertChildWorkerRelationsValidateBeforeCall(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileOid' is set
        if (hrisProfileOid == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileOid' when calling upsertChildWorkerRelations(Async)");
        }

        // verify the required parameter 'upsertChildWorkerRelationsRequest' is set
        if (upsertChildWorkerRelationsRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertChildWorkerRelationsRequest' when calling upsertChildWorkerRelations(Async)");
        }

        return upsertChildWorkerRelationsCall(hrisProfileOid, upsertChildWorkerRelationsRequest, _callback);

    }


    private ApiResponse<Void> upsertChildWorkerRelationsWithHttpInfo(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertChildWorkerRelationsValidateBeforeCall(hrisProfileOid, upsertChildWorkerRelationsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call upsertChildWorkerRelationsAsync(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertChildWorkerRelationsValidateBeforeCall(hrisProfileOid, upsertChildWorkerRelationsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupsertChildWorkerRelationsRequest {
        private final UUID hrisProfileOid;
        private final UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest;

        private APIupsertChildWorkerRelationsRequest(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest) {
            this.hrisProfileOid = hrisProfileOid;
            this.upsertChildWorkerRelationsRequest = upsertChildWorkerRelationsRequest;
        }

        /**
         * Build call for upsertChildWorkerRelations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertChildWorkerRelationsCall(hrisProfileOid, upsertChildWorkerRelationsRequest, _callback);
        }

        /**
         * Execute upsertChildWorkerRelations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            upsertChildWorkerRelationsWithHttpInfo(hrisProfileOid, upsertChildWorkerRelationsRequest);
        }

        /**
         * Execute upsertChildWorkerRelations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return upsertChildWorkerRelationsWithHttpInfo(hrisProfileOid, upsertChildWorkerRelationsRequest);
        }

        /**
         * Execute upsertChildWorkerRelations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return upsertChildWorkerRelationsAsync(hrisProfileOid, upsertChildWorkerRelationsRequest, _callback);
        }
    }

    /**
     * Create child worker relation
     * Create child worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     * @param hrisProfileOid HrisProfile ID (required)
     * @param upsertChildWorkerRelationsRequest  (required)
     * @return APIupsertChildWorkerRelationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertChildWorkerRelationsRequest upsertChildWorkerRelations(UUID hrisProfileOid, UpsertChildWorkerRelationsRequest upsertChildWorkerRelationsRequest) {
        return new APIupsertChildWorkerRelationsRequest(hrisProfileOid, upsertChildWorkerRelationsRequest);
    }
    private okhttp3.Call upsertChildWorkerRelationsExternalIdCall(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertChildWorkerRelationsExternalIdRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/external/{profileId}/child"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertChildWorkerRelationsExternalIdValidateBeforeCall(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling upsertChildWorkerRelationsExternalId(Async)");
        }

        // verify the required parameter 'upsertChildWorkerRelationsExternalIdRequest' is set
        if (upsertChildWorkerRelationsExternalIdRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertChildWorkerRelationsExternalIdRequest' when calling upsertChildWorkerRelationsExternalId(Async)");
        }

        return upsertChildWorkerRelationsExternalIdCall(profileId, upsertChildWorkerRelationsExternalIdRequest, _callback);

    }


    private ApiResponse<Void> upsertChildWorkerRelationsExternalIdWithHttpInfo(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertChildWorkerRelationsExternalIdValidateBeforeCall(profileId, upsertChildWorkerRelationsExternalIdRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call upsertChildWorkerRelationsExternalIdAsync(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertChildWorkerRelationsExternalIdValidateBeforeCall(profileId, upsertChildWorkerRelationsExternalIdRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupsertChildWorkerRelationsExternalIdRequest {
        private final String profileId;
        private final UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest;

        private APIupsertChildWorkerRelationsExternalIdRequest(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest) {
            this.profileId = profileId;
            this.upsertChildWorkerRelationsExternalIdRequest = upsertChildWorkerRelationsExternalIdRequest;
        }

        /**
         * Build call for upsertChildWorkerRelationsExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertChildWorkerRelationsExternalIdCall(profileId, upsertChildWorkerRelationsExternalIdRequest, _callback);
        }

        /**
         * Execute upsertChildWorkerRelationsExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            upsertChildWorkerRelationsExternalIdWithHttpInfo(profileId, upsertChildWorkerRelationsExternalIdRequest);
        }

        /**
         * Execute upsertChildWorkerRelationsExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return upsertChildWorkerRelationsExternalIdWithHttpInfo(profileId, upsertChildWorkerRelationsExternalIdRequest);
        }

        /**
         * Execute upsertChildWorkerRelationsExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return upsertChildWorkerRelationsExternalIdAsync(profileId, upsertChildWorkerRelationsExternalIdRequest, _callback);
        }
    }

    /**
     * Create child worker relation with external Id
     * Create child worker relation with external Id.  **Token scopes**: &#x60;profile:write&#x60;
     * @param profileId HrisProfile external ID (required)
     * @param upsertChildWorkerRelationsExternalIdRequest  (required)
     * @return APIupsertChildWorkerRelationsExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalId(String profileId, UpsertChildWorkerRelationsExternalIdRequest upsertChildWorkerRelationsExternalIdRequest) {
        return new APIupsertChildWorkerRelationsExternalIdRequest(profileId, upsertChildWorkerRelationsExternalIdRequest);
    }
    private okhttp3.Call upsertParentWorkerRelationsCall(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertParentWorkerRelationsRequest;

        // create path and map variables
        String localVarPath = "/hris/worker_relations/profile/{hrisProfileOid}/parent"
            .replace("{" + "hrisProfileOid" + "}", localVarApiClient.escapeString(hrisProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertParentWorkerRelationsValidateBeforeCall(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileOid' is set
        if (hrisProfileOid == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileOid' when calling upsertParentWorkerRelations(Async)");
        }

        // verify the required parameter 'upsertParentWorkerRelationsRequest' is set
        if (upsertParentWorkerRelationsRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertParentWorkerRelationsRequest' when calling upsertParentWorkerRelations(Async)");
        }

        return upsertParentWorkerRelationsCall(hrisProfileOid, upsertParentWorkerRelationsRequest, _callback);

    }


    private ApiResponse<Void> upsertParentWorkerRelationsWithHttpInfo(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertParentWorkerRelationsValidateBeforeCall(hrisProfileOid, upsertParentWorkerRelationsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call upsertParentWorkerRelationsAsync(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertParentWorkerRelationsValidateBeforeCall(hrisProfileOid, upsertParentWorkerRelationsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupsertParentWorkerRelationsRequest {
        private final UUID hrisProfileOid;
        private final UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest;

        private APIupsertParentWorkerRelationsRequest(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest) {
            this.hrisProfileOid = hrisProfileOid;
            this.upsertParentWorkerRelationsRequest = upsertParentWorkerRelationsRequest;
        }

        /**
         * Build call for upsertParentWorkerRelations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertParentWorkerRelationsCall(hrisProfileOid, upsertParentWorkerRelationsRequest, _callback);
        }

        /**
         * Execute upsertParentWorkerRelations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            upsertParentWorkerRelationsWithHttpInfo(hrisProfileOid, upsertParentWorkerRelationsRequest);
        }

        /**
         * Execute upsertParentWorkerRelations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return upsertParentWorkerRelationsWithHttpInfo(hrisProfileOid, upsertParentWorkerRelationsRequest);
        }

        /**
         * Execute upsertParentWorkerRelations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return upsertParentWorkerRelationsAsync(hrisProfileOid, upsertParentWorkerRelationsRequest, _callback);
        }
    }

    /**
     * Create a parent worker relation
     * Create a parent worker relation.  **Token scopes**: &#x60;profile:write&#x60;
     * @param hrisProfileOid HrisProfile ID (required)
     * @param upsertParentWorkerRelationsRequest  (required)
     * @return APIupsertParentWorkerRelationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertParentWorkerRelationsRequest upsertParentWorkerRelations(UUID hrisProfileOid, UpsertParentWorkerRelationsRequest upsertParentWorkerRelationsRequest) {
        return new APIupsertParentWorkerRelationsRequest(hrisProfileOid, upsertParentWorkerRelationsRequest);
    }
}
