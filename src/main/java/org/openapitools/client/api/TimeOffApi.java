/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateTimeOff201Response;
import org.openapitools.client.model.CreateTimeOffRequest;
import org.openapitools.client.model.GetPoliciesForProfile200Response;
import org.openapitools.client.model.GetProfileEntitlements200Response;
import org.openapitools.client.model.GetTimeOffsQuery200Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.UpdateTimeOff200Response;
import org.openapitools.client.model.UpdateTimeOffRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeOffApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTimeOffCall(CreateTimeOffRequest createTimeOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeOffRequest;

        // create path and map variables
        String localVarPath = "/time_offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTimeOffValidateBeforeCall(CreateTimeOffRequest createTimeOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTimeOffRequest' is set
        if (createTimeOffRequest == null) {
            throw new ApiException("Missing the required parameter 'createTimeOffRequest' when calling createTimeOff(Async)");
        }

        return createTimeOffCall(createTimeOffRequest, _callback);

    }


    private ApiResponse<CreateTimeOff201Response> createTimeOffWithHttpInfo(CreateTimeOffRequest createTimeOffRequest) throws ApiException {
        okhttp3.Call localVarCall = createTimeOffValidateBeforeCall(createTimeOffRequest, null);
        Type localVarReturnType = new TypeToken<CreateTimeOff201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTimeOffAsync(CreateTimeOffRequest createTimeOffRequest, final ApiCallback<CreateTimeOff201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTimeOffValidateBeforeCall(createTimeOffRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTimeOff201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTimeOffRequest {
        private final CreateTimeOffRequest createTimeOffRequest;

        private APIcreateTimeOffRequest(CreateTimeOffRequest createTimeOffRequest) {
            this.createTimeOffRequest = createTimeOffRequest;
        }

        /**
         * Build call for createTimeOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Time off created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTimeOffCall(createTimeOffRequest, _callback);
        }

        /**
         * Execute createTimeOff request
         * @return CreateTimeOff201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Time off created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateTimeOff201Response execute() throws ApiException {
            ApiResponse<CreateTimeOff201Response> localVarResp = createTimeOffWithHttpInfo(createTimeOffRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTimeOff request with HTTP info returned
         * @return ApiResponse&lt;CreateTimeOff201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Time off created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTimeOff201Response> executeWithHttpInfo() throws ApiException {
            return createTimeOffWithHttpInfo(createTimeOffRequest);
        }

        /**
         * Execute createTimeOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Time off created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTimeOff201Response> _callback) throws ApiException {
            return createTimeOffAsync(createTimeOffRequest, _callback);
        }
    }

    /**
     * Create time-off request
     * Create time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     * @param createTimeOffRequest The time off request data (required)
     * @return APIcreateTimeOffRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Time off created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTimeOffRequest createTimeOff(CreateTimeOffRequest createTimeOffRequest) {
        return new APIcreateTimeOffRequest(createTimeOffRequest);
    }
    private okhttp3.Call deleteTimeOffCall(UUID timeOffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_offs/{time_off_id}"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTimeOffValidateBeforeCall(UUID timeOffId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling deleteTimeOff(Async)");
        }

        return deleteTimeOffCall(timeOffId, _callback);

    }


    private ApiResponse<Object> deleteTimeOffWithHttpInfo(UUID timeOffId) throws ApiException {
        okhttp3.Call localVarCall = deleteTimeOffValidateBeforeCall(timeOffId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTimeOffAsync(UUID timeOffId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTimeOffValidateBeforeCall(timeOffId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTimeOffRequest {
        private final UUID timeOffId;

        private APIdeleteTimeOffRequest(UUID timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Build call for deleteTimeOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> time off deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTimeOffCall(timeOffId, _callback);
        }

        /**
         * Execute deleteTimeOff request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> time off deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteTimeOffWithHttpInfo(timeOffId);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTimeOff request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> time off deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteTimeOffWithHttpInfo(timeOffId);
        }

        /**
         * Execute deleteTimeOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> time off deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteTimeOffAsync(timeOffId, _callback);
        }
    }

    /**
     * Delete time-off request
     * Delete time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     * @param timeOffId Time off request id (required)
     * @return APIdeleteTimeOffRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> time off deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTimeOffRequest deleteTimeOff(UUID timeOffId) {
        return new APIdeleteTimeOffRequest(timeOffId);
    }
    private okhttp3.Call getPoliciesForProfileCall(String hrisProfileId, String policyTypeName, String policyTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_offs/profile/{hris_profile_id}/policies"
            .replace("{" + "hris_profile_id" + "}", localVarApiClient.escapeString(hrisProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyTypeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_type_name", policyTypeName));
        }

        if (policyTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_type_id", policyTypeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliciesForProfileValidateBeforeCall(String hrisProfileId, String policyTypeName, String policyTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileId' is set
        if (hrisProfileId == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileId' when calling getPoliciesForProfile(Async)");
        }

        return getPoliciesForProfileCall(hrisProfileId, policyTypeName, policyTypeId, _callback);

    }


    private ApiResponse<GetPoliciesForProfile200Response> getPoliciesForProfileWithHttpInfo(String hrisProfileId, String policyTypeName, String policyTypeId) throws ApiException {
        okhttp3.Call localVarCall = getPoliciesForProfileValidateBeforeCall(hrisProfileId, policyTypeName, policyTypeId, null);
        Type localVarReturnType = new TypeToken<GetPoliciesForProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPoliciesForProfileAsync(String hrisProfileId, String policyTypeName, String policyTypeId, final ApiCallback<GetPoliciesForProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliciesForProfileValidateBeforeCall(hrisProfileId, policyTypeName, policyTypeId, _callback);
        Type localVarReturnType = new TypeToken<GetPoliciesForProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPoliciesForProfileRequest {
        private final String hrisProfileId;
        private String policyTypeName;
        private String policyTypeId;

        private APIgetPoliciesForProfileRequest(String hrisProfileId) {
            this.hrisProfileId = hrisProfileId;
        }

        /**
         * Set policyTypeName
         * @param policyTypeName Policy type name. (optional)
         * @return APIgetPoliciesForProfileRequest
         */
        public APIgetPoliciesForProfileRequest policyTypeName(String policyTypeName) {
            this.policyTypeName = policyTypeName;
            return this;
        }

        /**
         * Set policyTypeId
         * @param policyTypeId policy type id (optional)
         * @return APIgetPoliciesForProfileRequest
         */
        public APIgetPoliciesForProfileRequest policyTypeId(String policyTypeId) {
            this.policyTypeId = policyTypeId;
            return this;
        }

        /**
         * Build call for getPoliciesForProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliciesForProfileCall(hrisProfileId, policyTypeName, policyTypeId, _callback);
        }

        /**
         * Execute getPoliciesForProfile request
         * @return GetPoliciesForProfile200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetPoliciesForProfile200Response execute() throws ApiException {
            ApiResponse<GetPoliciesForProfile200Response> localVarResp = getPoliciesForProfileWithHttpInfo(hrisProfileId, policyTypeName, policyTypeId);
            return localVarResp.getData();
        }

        /**
         * Execute getPoliciesForProfile request with HTTP info returned
         * @return ApiResponse&lt;GetPoliciesForProfile200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPoliciesForProfile200Response> executeWithHttpInfo() throws ApiException {
            return getPoliciesForProfileWithHttpInfo(hrisProfileId, policyTypeName, policyTypeId);
        }

        /**
         * Execute getPoliciesForProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPoliciesForProfile200Response> _callback) throws ApiException {
            return getPoliciesForProfileAsync(hrisProfileId, policyTypeName, policyTypeId, _callback);
        }
    }

    /**
     * List policies
     * List policies  **Token scopes**: &#x60;time-off:read&#x60;
     * @param hrisProfileId hrisProfileId id. (required)
     * @return APIgetPoliciesForProfileRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPoliciesForProfileRequest getPoliciesForProfile(String hrisProfileId) {
        return new APIgetPoliciesForProfileRequest(hrisProfileId);
    }
    private okhttp3.Call getProfileEntitlementsCall(UUID hrisProfileId, String policyTypeName, LocalDate trackingPeriodDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_offs/profile/{hris_profile_id}/entitlements"
            .replace("{" + "hris_profile_id" + "}", localVarApiClient.escapeString(hrisProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyTypeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_type_name", policyTypeName));
        }

        if (trackingPeriodDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_period_date", trackingPeriodDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileEntitlementsValidateBeforeCall(UUID hrisProfileId, String policyTypeName, LocalDate trackingPeriodDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileId' is set
        if (hrisProfileId == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileId' when calling getProfileEntitlements(Async)");
        }

        return getProfileEntitlementsCall(hrisProfileId, policyTypeName, trackingPeriodDate, _callback);

    }


    private ApiResponse<GetProfileEntitlements200Response> getProfileEntitlementsWithHttpInfo(UUID hrisProfileId, String policyTypeName, LocalDate trackingPeriodDate) throws ApiException {
        okhttp3.Call localVarCall = getProfileEntitlementsValidateBeforeCall(hrisProfileId, policyTypeName, trackingPeriodDate, null);
        Type localVarReturnType = new TypeToken<GetProfileEntitlements200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileEntitlementsAsync(UUID hrisProfileId, String policyTypeName, LocalDate trackingPeriodDate, final ApiCallback<GetProfileEntitlements200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileEntitlementsValidateBeforeCall(hrisProfileId, policyTypeName, trackingPeriodDate, _callback);
        Type localVarReturnType = new TypeToken<GetProfileEntitlements200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetProfileEntitlementsRequest {
        private final UUID hrisProfileId;
        private String policyTypeName;
        private LocalDate trackingPeriodDate;

        private APIgetProfileEntitlementsRequest(UUID hrisProfileId) {
            this.hrisProfileId = hrisProfileId;
        }

        /**
         * Set policyTypeName
         * @param policyTypeName  (optional)
         * @return APIgetProfileEntitlementsRequest
         */
        public APIgetProfileEntitlementsRequest policyTypeName(String policyTypeName) {
            this.policyTypeName = policyTypeName;
            return this;
        }

        /**
         * Set trackingPeriodDate
         * @param trackingPeriodDate Tracking period date (optional)
         * @return APIgetProfileEntitlementsRequest
         */
        public APIgetProfileEntitlementsRequest trackingPeriodDate(LocalDate trackingPeriodDate) {
            this.trackingPeriodDate = trackingPeriodDate;
            return this;
        }

        /**
         * Build call for getProfileEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileEntitlementsCall(hrisProfileId, policyTypeName, trackingPeriodDate, _callback);
        }

        /**
         * Execute getProfileEntitlements request
         * @return GetProfileEntitlements200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetProfileEntitlements200Response execute() throws ApiException {
            ApiResponse<GetProfileEntitlements200Response> localVarResp = getProfileEntitlementsWithHttpInfo(hrisProfileId, policyTypeName, trackingPeriodDate);
            return localVarResp.getData();
        }

        /**
         * Execute getProfileEntitlements request with HTTP info returned
         * @return ApiResponse&lt;GetProfileEntitlements200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProfileEntitlements200Response> executeWithHttpInfo() throws ApiException {
            return getProfileEntitlementsWithHttpInfo(hrisProfileId, policyTypeName, trackingPeriodDate);
        }

        /**
         * Execute getProfileEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProfileEntitlements200Response> _callback) throws ApiException {
            return getProfileEntitlementsAsync(hrisProfileId, policyTypeName, trackingPeriodDate, _callback);
        }
    }

    /**
     * Get Profile Entitlements
     * List time-off entitlements.  **Token scopes**: &#x60;time-off:read&#x60;
     * @param hrisProfileId HRIS profile ID (required)
     * @return APIgetProfileEntitlementsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetProfileEntitlementsRequest getProfileEntitlements(UUID hrisProfileId) {
        return new APIgetProfileEntitlementsRequest(hrisProfileId);
    }
    private okhttp3.Call getTimeOffsQueryCall(UUID hrisProfileId, String organizationId, List<String> status, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime approvalStartDate, OffsetDateTime approvalEndDate, OffsetDateTime updatedStartDate, OffsetDateTime updatedEndDate, Integer pageSize, List<UUID> policyTypes, String next, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_offs/profile/{hris_profile_id}"
            .replace("{" + "hris_profile_id" + "}", localVarApiClient.escapeString(hrisProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_id", organizationId));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (approvalStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approval_start_date", approvalStartDate));
        }

        if (approvalEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approval_end_date", approvalEndDate));
        }

        if (updatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_start_date", updatedStartDate));
        }

        if (updatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_end_date", updatedEndDate));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "policy_types", policyTypes));
        }

        if (next != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffsQueryValidateBeforeCall(UUID hrisProfileId, String organizationId, List<String> status, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime approvalStartDate, OffsetDateTime approvalEndDate, OffsetDateTime updatedStartDate, OffsetDateTime updatedEndDate, Integer pageSize, List<UUID> policyTypes, String next, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hrisProfileId' is set
        if (hrisProfileId == null) {
            throw new ApiException("Missing the required parameter 'hrisProfileId' when calling getTimeOffsQuery(Async)");
        }

        return getTimeOffsQueryCall(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next, _callback);

    }


    private ApiResponse<GetTimeOffsQuery200Response> getTimeOffsQueryWithHttpInfo(UUID hrisProfileId, String organizationId, List<String> status, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime approvalStartDate, OffsetDateTime approvalEndDate, OffsetDateTime updatedStartDate, OffsetDateTime updatedEndDate, Integer pageSize, List<UUID> policyTypes, String next) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffsQueryValidateBeforeCall(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next, null);
        Type localVarReturnType = new TypeToken<GetTimeOffsQuery200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffsQueryAsync(UUID hrisProfileId, String organizationId, List<String> status, OffsetDateTime startDate, OffsetDateTime endDate, OffsetDateTime approvalStartDate, OffsetDateTime approvalEndDate, OffsetDateTime updatedStartDate, OffsetDateTime updatedEndDate, Integer pageSize, List<UUID> policyTypes, String next, final ApiCallback<GetTimeOffsQuery200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffsQueryValidateBeforeCall(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next, _callback);
        Type localVarReturnType = new TypeToken<GetTimeOffsQuery200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTimeOffsQueryRequest {
        private final UUID hrisProfileId;
        private String organizationId;
        private List<String> status;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private OffsetDateTime approvalStartDate;
        private OffsetDateTime approvalEndDate;
        private OffsetDateTime updatedStartDate;
        private OffsetDateTime updatedEndDate;
        private Integer pageSize;
        private List<UUID> policyTypes;
        private String next;

        private APIgetTimeOffsQueryRequest(UUID hrisProfileId) {
            this.hrisProfileId = hrisProfileId;
        }

        /**
         * Set organizationId
         * @param organizationId Organization id (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest organizationId(String organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        /**
         * Set status
         * @param status Time off status (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest status(List<String> status) {
            this.status = status;
            return this;
        }

        /**
         * Set startDate
         * @param startDate Start date of time off (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Set endDate
         * @param endDate End date of time off (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Set approvalStartDate
         * @param approvalStartDate Approval start date (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest approvalStartDate(OffsetDateTime approvalStartDate) {
            this.approvalStartDate = approvalStartDate;
            return this;
        }

        /**
         * Set approvalEndDate
         * @param approvalEndDate Approval end date (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest approvalEndDate(OffsetDateTime approvalEndDate) {
            this.approvalEndDate = approvalEndDate;
            return this;
        }

        /**
         * Set updatedStartDate
         * @param updatedStartDate Updated start date (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest updatedStartDate(OffsetDateTime updatedStartDate) {
            this.updatedStartDate = updatedStartDate;
            return this;
        }

        /**
         * Set updatedEndDate
         * @param updatedEndDate Updated end date (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest updatedEndDate(OffsetDateTime updatedEndDate) {
            this.updatedEndDate = updatedEndDate;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Page size (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set policyTypes
         * @param policyTypes Policy types (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest policyTypes(List<UUID> policyTypes) {
            this.policyTypes = policyTypes;
            return this;
        }

        /**
         * Set next
         * @param next Next page (optional)
         * @return APIgetTimeOffsQueryRequest
         */
        public APIgetTimeOffsQueryRequest next(String next) {
            this.next = next;
            return this;
        }

        /**
         * Build call for getTimeOffsQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation time offs returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffsQueryCall(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next, _callback);
        }

        /**
         * Execute getTimeOffsQuery request
         * @return GetTimeOffsQuery200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation time offs returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetTimeOffsQuery200Response execute() throws ApiException {
            ApiResponse<GetTimeOffsQuery200Response> localVarResp = getTimeOffsQueryWithHttpInfo(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next);
            return localVarResp.getData();
        }

        /**
         * Execute getTimeOffsQuery request with HTTP info returned
         * @return ApiResponse&lt;GetTimeOffsQuery200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation time offs returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTimeOffsQuery200Response> executeWithHttpInfo() throws ApiException {
            return getTimeOffsQueryWithHttpInfo(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next);
        }

        /**
         * Execute getTimeOffsQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation time offs returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTimeOffsQuery200Response> _callback) throws ApiException {
            return getTimeOffsQueryAsync(hrisProfileId, organizationId, status, startDate, endDate, approvalStartDate, approvalEndDate, updatedStartDate, updatedEndDate, pageSize, policyTypes, next, _callback);
        }
    }

    /**
     * List time-off requests
     * List time-off requests  **Token scopes**: &#x60;time-off:read&#x60;
     * @param hrisProfileId HRIS profile id (required)
     * @return APIgetTimeOffsQueryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation time offs returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTimeOffsQueryRequest getTimeOffsQuery(UUID hrisProfileId) {
        return new APIgetTimeOffsQueryRequest(hrisProfileId);
    }
    private okhttp3.Call updateTimeOffCall(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTimeOffRequest;

        // create path and map variables
        String localVarPath = "/time_offs/{time_off_id}"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeOffValidateBeforeCall(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling updateTimeOff(Async)");
        }

        // verify the required parameter 'updateTimeOffRequest' is set
        if (updateTimeOffRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTimeOffRequest' when calling updateTimeOff(Async)");
        }

        return updateTimeOffCall(timeOffId, updateTimeOffRequest, _callback);

    }


    private ApiResponse<UpdateTimeOff200Response> updateTimeOffWithHttpInfo(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTimeOffValidateBeforeCall(timeOffId, updateTimeOffRequest, null);
        Type localVarReturnType = new TypeToken<UpdateTimeOff200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimeOffAsync(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest, final ApiCallback<UpdateTimeOff200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeOffValidateBeforeCall(timeOffId, updateTimeOffRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTimeOff200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateTimeOffRequest {
        private final UUID timeOffId;
        private final UpdateTimeOffRequest updateTimeOffRequest;

        private APIupdateTimeOffRequest(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest) {
            this.timeOffId = timeOffId;
            this.updateTimeOffRequest = updateTimeOffRequest;
        }

        /**
         * Build call for updateTimeOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTimeOffCall(timeOffId, updateTimeOffRequest, _callback);
        }

        /**
         * Execute updateTimeOff request
         * @return UpdateTimeOff200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateTimeOff200Response execute() throws ApiException {
            ApiResponse<UpdateTimeOff200Response> localVarResp = updateTimeOffWithHttpInfo(timeOffId, updateTimeOffRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateTimeOff request with HTTP info returned
         * @return ApiResponse&lt;UpdateTimeOff200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateTimeOff200Response> executeWithHttpInfo() throws ApiException {
            return updateTimeOffWithHttpInfo(timeOffId, updateTimeOffRequest);
        }

        /**
         * Execute updateTimeOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateTimeOff200Response> _callback) throws ApiException {
            return updateTimeOffAsync(timeOffId, updateTimeOffRequest, _callback);
        }
    }

    /**
     * Update time-off request
     * Update time-off request  **Token scopes**: &#x60;time-off:write&#x60;
     * @param timeOffId Time off request id (required)
     * @param updateTimeOffRequest Time off request data (required)
     * @return APIupdateTimeOffRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time off updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateTimeOffRequest updateTimeOff(UUID timeOffId, UpdateTimeOffRequest updateTimeOffRequest) {
        return new APIupdateTimeOffRequest(timeOffId, updateTimeOffRequest);
    }
}
