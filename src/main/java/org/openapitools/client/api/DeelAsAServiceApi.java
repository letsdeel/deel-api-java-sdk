/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddEORBankAccount201Response;
import org.openapitools.client.model.AddEORBankAccountRequest;
import org.openapitools.client.model.GetEORBankAccountGuide200Response;
import org.openapitools.client.model.PatchEORBankAccount201Response;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeelAsAServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeelAsAServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeelAsAServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEORBankAccountCall(AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addEORBankAccountRequest;

        // create path and map variables
        String localVarPath = "/daas/banks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEORBankAccountValidateBeforeCall(AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback _callback) throws ApiException {
        return addEORBankAccountCall(addEORBankAccountRequest, _callback);

    }


    private ApiResponse<AddEORBankAccount201Response> addEORBankAccountWithHttpInfo(AddEORBankAccountRequest addEORBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = addEORBankAccountValidateBeforeCall(addEORBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<AddEORBankAccount201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEORBankAccountAsync(AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback<AddEORBankAccount201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEORBankAccountValidateBeforeCall(addEORBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<AddEORBankAccount201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddEORBankAccountRequest {
        private AddEORBankAccountRequest addEORBankAccountRequest;

        private APIaddEORBankAccountRequest() {
        }

        /**
         * Set addEORBankAccountRequest
         * @param addEORBankAccountRequest  (optional)
         * @return APIaddEORBankAccountRequest
         */
        public APIaddEORBankAccountRequest addEORBankAccountRequest(AddEORBankAccountRequest addEORBankAccountRequest) {
            this.addEORBankAccountRequest = addEORBankAccountRequest;
            return this;
        }

        /**
         * Build call for addEORBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addEORBankAccountCall(addEORBankAccountRequest, _callback);
        }

        /**
         * Execute addEORBankAccount request
         * @return AddEORBankAccount201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public AddEORBankAccount201Response execute() throws ApiException {
            ApiResponse<AddEORBankAccount201Response> localVarResp = addEORBankAccountWithHttpInfo(addEORBankAccountRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addEORBankAccount request with HTTP info returned
         * @return ApiResponse&lt;AddEORBankAccount201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddEORBankAccount201Response> executeWithHttpInfo() throws ApiException {
            return addEORBankAccountWithHttpInfo(addEORBankAccountRequest);
        }

        /**
         * Execute addEORBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddEORBankAccount201Response> _callback) throws ApiException {
            return addEORBankAccountAsync(addEORBankAccountRequest, _callback);
        }
    }

    /**
     * Add bank account
     * Add bank account for an EOR employee.  **Token scopes**: &#x60;worker:write&#x60;
     * @return APIaddEORBankAccountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIaddEORBankAccountRequest addEORBankAccount() {
        return new APIaddEORBankAccountRequest();
    }
    private okhttp3.Call getEORBankAccountGuideCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/daas/banks/guide";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEORBankAccountGuideValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEORBankAccountGuideCall(_callback);

    }


    private ApiResponse<GetEORBankAccountGuide200Response> getEORBankAccountGuideWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEORBankAccountGuideValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetEORBankAccountGuide200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEORBankAccountGuideAsync(final ApiCallback<GetEORBankAccountGuide200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEORBankAccountGuideValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetEORBankAccountGuide200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEORBankAccountGuideRequest {

        private APIgetEORBankAccountGuideRequest() {
        }

        /**
         * Build call for getEORBankAccountGuide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEORBankAccountGuideCall(_callback);
        }

        /**
         * Execute getEORBankAccountGuide request
         * @return GetEORBankAccountGuide200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public GetEORBankAccountGuide200Response execute() throws ApiException {
            ApiResponse<GetEORBankAccountGuide200Response> localVarResp = getEORBankAccountGuideWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getEORBankAccountGuide request with HTTP info returned
         * @return ApiResponse&lt;GetEORBankAccountGuide200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEORBankAccountGuide200Response> executeWithHttpInfo() throws ApiException {
            return getEORBankAccountGuideWithHttpInfo();
        }

        /**
         * Execute getEORBankAccountGuide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEORBankAccountGuide200Response> _callback) throws ApiException {
            return getEORBankAccountGuideAsync(_callback);
        }
    }

    /**
     * Retrieve bank account guide
     * Retrieve bank account form guide for an EOR employee. This data can be used to add a new bank account for an employee.  **Token scopes**: &#x60;worker:read&#x60;
     * @return APIgetEORBankAccountGuideRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEORBankAccountGuideRequest getEORBankAccountGuide() {
        return new APIgetEORBankAccountGuideRequest();
    }
    private okhttp3.Call patchEORBankAccountCall(UUID bankId, AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addEORBankAccountRequest;

        // create path and map variables
        String localVarPath = "/daas/banks/{bank_id}"
            .replace("{" + "bank_id" + "}", localVarApiClient.escapeString(bankId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchEORBankAccountValidateBeforeCall(UUID bankId, AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankId' is set
        if (bankId == null) {
            throw new ApiException("Missing the required parameter 'bankId' when calling patchEORBankAccount(Async)");
        }

        return patchEORBankAccountCall(bankId, addEORBankAccountRequest, _callback);

    }


    private ApiResponse<PatchEORBankAccount201Response> patchEORBankAccountWithHttpInfo(UUID bankId, AddEORBankAccountRequest addEORBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = patchEORBankAccountValidateBeforeCall(bankId, addEORBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<PatchEORBankAccount201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchEORBankAccountAsync(UUID bankId, AddEORBankAccountRequest addEORBankAccountRequest, final ApiCallback<PatchEORBankAccount201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchEORBankAccountValidateBeforeCall(bankId, addEORBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchEORBankAccount201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchEORBankAccountRequest {
        private final UUID bankId;
        private AddEORBankAccountRequest addEORBankAccountRequest;

        private APIpatchEORBankAccountRequest(UUID bankId) {
            this.bankId = bankId;
        }

        /**
         * Set addEORBankAccountRequest
         * @param addEORBankAccountRequest Bank Account object that needs to be modified (optional)
         * @return APIpatchEORBankAccountRequest
         */
        public APIpatchEORBankAccountRequest addEORBankAccountRequest(AddEORBankAccountRequest addEORBankAccountRequest) {
            this.addEORBankAccountRequest = addEORBankAccountRequest;
            return this;
        }

        /**
         * Build call for patchEORBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchEORBankAccountCall(bankId, addEORBankAccountRequest, _callback);
        }

        /**
         * Execute patchEORBankAccount request
         * @return PatchEORBankAccount201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public PatchEORBankAccount201Response execute() throws ApiException {
            ApiResponse<PatchEORBankAccount201Response> localVarResp = patchEORBankAccountWithHttpInfo(bankId, addEORBankAccountRequest);
            return localVarResp.getData();
        }

        /**
         * Execute patchEORBankAccount request with HTTP info returned
         * @return ApiResponse&lt;PatchEORBankAccount201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PatchEORBankAccount201Response> executeWithHttpInfo() throws ApiException {
            return patchEORBankAccountWithHttpInfo(bankId, addEORBankAccountRequest);
        }

        /**
         * Execute patchEORBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PatchEORBankAccount201Response> _callback) throws ApiException {
            return patchEORBankAccountAsync(bankId, addEORBankAccountRequest, _callback);
        }
    }

    /**
     * Modify bank account for an EOR employee
     * Modify bank account for an EOR employee.  **Token scopes**: &#x60;worker:write&#x60;
     * @param bankId Unique identifier for a bank in UUID format. (required)
     * @return APIpatchEORBankAccountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchEORBankAccountRequest patchEORBankAccount(UUID bankId) {
        return new APIpatchEORBankAccountRequest(bankId);
    }
}
