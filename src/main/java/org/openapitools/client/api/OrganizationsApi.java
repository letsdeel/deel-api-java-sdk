/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateOrganizationRole200Response;
import org.openapitools.client.model.CreateOrganizationRoleRequest;
import org.openapitools.client.model.GetDepartments200Response;
import org.openapitools.client.model.GetDepartments404Response;
import org.openapitools.client.model.GetLegalEntityList200Response;
import org.openapitools.client.model.GetOrganizationRoles200ResponseInner;
import org.openapitools.client.model.GetOrganizationRoles400Response;
import org.openapitools.client.model.GetOrganizationRoles401Response;
import org.openapitools.client.model.GetOrganizationRoles500Response;
import org.openapitools.client.model.GetOrganizations200Response;
import org.openapitools.client.model.GetOrganizations401Response;
import org.openapitools.client.model.GetOrganizations404Response;
import org.openapitools.client.model.GetOrganizations500Response;
import org.openapitools.client.model.GetTeams200Response;
import org.openapitools.client.model.GetTeams404Response;
import org.openapitools.client.model.UpdateOrganizationRole200Response;
import org.openapitools.client.model.UpdateOrganizationRoleRequest;
import org.openapitools.client.model.WorkingLocationsContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrganizationRoleCall(CreateOrganizationRoleRequest createOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationRoleRequest;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationRoleValidateBeforeCall(CreateOrganizationRoleRequest createOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrganizationRoleRequest' is set
        if (createOrganizationRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationRoleRequest' when calling createOrganizationRole(Async)");
        }

        return createOrganizationRoleCall(createOrganizationRoleRequest, _callback);

    }


    private ApiResponse<CreateOrganizationRole200Response> createOrganizationRoleWithHttpInfo(CreateOrganizationRoleRequest createOrganizationRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationRoleValidateBeforeCall(createOrganizationRoleRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrganizationRoleAsync(CreateOrganizationRoleRequest createOrganizationRoleRequest, final ApiCallback<CreateOrganizationRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationRoleValidateBeforeCall(createOrganizationRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateOrganizationRoleRequest {
        private final CreateOrganizationRoleRequest createOrganizationRoleRequest;

        private APIcreateOrganizationRoleRequest(CreateOrganizationRoleRequest createOrganizationRoleRequest) {
            this.createOrganizationRoleRequest = createOrganizationRoleRequest;
        }

        /**
         * Build call for createOrganizationRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrganizationRoleCall(createOrganizationRoleRequest, _callback);
        }

        /**
         * Execute createOrganizationRole request
         * @return CreateOrganizationRole200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrganizationRole200Response execute() throws ApiException {
            ApiResponse<CreateOrganizationRole200Response> localVarResp = createOrganizationRoleWithHttpInfo(createOrganizationRoleRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createOrganizationRole request with HTTP info returned
         * @return ApiResponse&lt;CreateOrganizationRole200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrganizationRole200Response> executeWithHttpInfo() throws ApiException {
            return createOrganizationRoleWithHttpInfo(createOrganizationRoleRequest);
        }

        /**
         * Execute createOrganizationRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrganizationRole200Response> _callback) throws ApiException {
            return createOrganizationRoleAsync(createOrganizationRoleRequest, _callback);
        }
    }

    /**
     * Create organization custom role.
     * Create organization custom role.  **Token scopes**: &#x60;organizations:write&#x60;
     * @param createOrganizationRoleRequest  (required)
     * @return APIcreateOrganizationRoleRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrganizationRoleRequest createOrganizationRole(CreateOrganizationRoleRequest createOrganizationRoleRequest) {
        return new APIcreateOrganizationRoleRequest(createOrganizationRoleRequest);
    }
    private okhttp3.Call getDepartmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepartmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDepartmentsCall(_callback);

    }


    private ApiResponse<GetDepartments200Response> getDepartmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDepartmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDepartments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDepartmentsAsync(final ApiCallback<GetDepartments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDepartmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDepartments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDepartmentsRequest {

        private APIgetDepartmentsRequest() {
        }

        /**
         * Build call for getDepartments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the list of departments. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No departments found. There are no departments associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDepartmentsCall(_callback);
        }

        /**
         * Execute getDepartments request
         * @return GetDepartments200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the list of departments. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No departments found. There are no departments associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public GetDepartments200Response execute() throws ApiException {
            ApiResponse<GetDepartments200Response> localVarResp = getDepartmentsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getDepartments request with HTTP info returned
         * @return ApiResponse&lt;GetDepartments200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the list of departments. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No departments found. There are no departments associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDepartments200Response> executeWithHttpInfo() throws ApiException {
            return getDepartmentsWithHttpInfo();
        }

        /**
         * Execute getDepartments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the list of departments. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No departments found. There are no departments associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDepartments200Response> _callback) throws ApiException {
            return getDepartmentsAsync(_callback);
        }
    }

    /**
     * Retrieve Departments
     * Retrieve a list of departments within the organization associated with the authenticated user. Each department contains its unique identifier, name, and optionally, the parent department if applicable.  **Token scopes**: &#x60;organizations:read&#x60;
     * @return APIgetDepartmentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of the list of departments. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No departments found. There are no departments associated with the current organization. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDepartmentsRequest getDepartments() {
        return new APIgetDepartmentsRequest();
    }
    private okhttp3.Call getLegalEntityListCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal-entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalEntityListValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        return getLegalEntityListCall(country, _callback);

    }


    private ApiResponse<GetLegalEntityList200Response> getLegalEntityListWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = getLegalEntityListValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<GetLegalEntityList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegalEntityListAsync(String country, final ApiCallback<GetLegalEntityList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalEntityListValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<GetLegalEntityList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLegalEntityListRequest {
        private String country;

        private APIgetLegalEntityListRequest() {
        }

        /**
         * Set country
         * @param country Fetch only legal entities from a specific country (optional)
         * @return APIgetLegalEntityListRequest
         */
        public APIgetLegalEntityListRequest country(String country) {
            this.country = country;
            return this;
        }

        /**
         * Build call for getLegalEntityList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegalEntityListCall(country, _callback);
        }

        /**
         * Execute getLegalEntityList request
         * @return GetLegalEntityList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetLegalEntityList200Response execute() throws ApiException {
            ApiResponse<GetLegalEntityList200Response> localVarResp = getLegalEntityListWithHttpInfo(country);
            return localVarResp.getData();
        }

        /**
         * Execute getLegalEntityList request with HTTP info returned
         * @return ApiResponse&lt;GetLegalEntityList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetLegalEntityList200Response> executeWithHttpInfo() throws ApiException {
            return getLegalEntityListWithHttpInfo(country);
        }

        /**
         * Execute getLegalEntityList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetLegalEntityList200Response> _callback) throws ApiException {
            return getLegalEntityListAsync(country, _callback);
        }
    }

    /**
     * List of legal entities
     * Retrieve a list of legal entities in your account.  **Token scopes**: &#x60;organizations:read&#x60;, &#x60;accounting:read&#x60;
     * @return APIgetLegalEntityListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLegalEntityListRequest getLegalEntityList() {
        return new APIgetLegalEntityListRequest();
    }
    private okhttp3.Call getOrganizationRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrganizationRolesCall(_callback);

    }


    private ApiResponse<List<GetOrganizationRoles200ResponseInner>> getOrganizationRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrganizationRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GetOrganizationRoles200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationRolesAsync(final ApiCallback<List<GetOrganizationRoles200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GetOrganizationRoles200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationRolesRequest {

        private APIgetOrganizationRolesRequest() {
        }

        /**
         * Build call for getOrganizationRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization roles. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. The request was malformed or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationRolesCall(_callback);
        }

        /**
         * Execute getOrganizationRoles request
         * @return List&lt;GetOrganizationRoles200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization roles. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. The request was malformed or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public List<GetOrganizationRoles200ResponseInner> execute() throws ApiException {
            ApiResponse<List<GetOrganizationRoles200ResponseInner>> localVarResp = getOrganizationRolesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getOrganizationRoles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GetOrganizationRoles200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization roles. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. The request was malformed or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GetOrganizationRoles200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return getOrganizationRolesWithHttpInfo();
        }

        /**
         * Execute getOrganizationRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization roles. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. The request was malformed or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GetOrganizationRoles200ResponseInner>> _callback) throws ApiException {
            return getOrganizationRolesAsync(_callback);
        }
    }

    /**
     * Get the roles of the current organization.
     * Retrieve a list of roles assigned within the current organization. Each role has a unique identifier, name, scope, and optional HRIS structure ID. This helps determine the types of roles within the organization and their corresponding access levels.  **Token scopes**: &#x60;organizations:read&#x60;
     * @return APIgetOrganizationRolesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of the organization roles. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request was malformed or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An error occurred while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrganizationRolesRequest getOrganizationRoles() {
        return new APIgetOrganizationRolesRequest();
    }
    private okhttp3.Call getOrganizationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrganizationsCall(_callback);

    }


    private ApiResponse<GetOrganizations200Response> getOrganizationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetOrganizations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationsAsync(final ApiCallback<GetOrganizations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetOrganizations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationsRequest {

        private APIgetOrganizationsRequest() {
        }

        /**
         * Build call for getOrganizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization details. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Organization not found. The current organization associated with the authentication token could not be found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationsCall(_callback);
        }

        /**
         * Execute getOrganizations request
         * @return GetOrganizations200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization details. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Organization not found. The current organization associated with the authentication token could not be found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public GetOrganizations200Response execute() throws ApiException {
            ApiResponse<GetOrganizations200Response> localVarResp = getOrganizationsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getOrganizations request with HTTP info returned
         * @return ApiResponse&lt;GetOrganizations200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization details. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Organization not found. The current organization associated with the authentication token could not be found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetOrganizations200Response> executeWithHttpInfo() throws ApiException {
            return getOrganizationsWithHttpInfo();
        }

        /**
         * Execute getOrganizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the organization details. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Organization not found. The current organization associated with the authentication token could not be found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetOrganizations200Response> _callback) throws ApiException {
            return getOrganizationsAsync(_callback);
        }
    }

    /**
     * Get Current Organization
     * Retrieve details of the current organization associated with the authenticated user. The organization is automatically detected based on the authentication token provided in the request.  **Token scopes**: &#x60;organizations:read&#x60;
     * @return APIgetOrganizationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of the organization details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found. The current organization associated with the authentication token could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrganizationsRequest getOrganizations() {
        return new APIgetOrganizationsRequest();
    }
    private okhttp3.Call getTeamsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTeamsCall(_callback);

    }


    private ApiResponse<GetTeams200Response> getTeamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetTeams200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamsAsync(final ApiCallback<GetTeams200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetTeams200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTeamsRequest {

        private APIgetTeamsRequest() {
        }

        /**
         * Build call for getTeams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the teams in the organization. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No teams found. There are no teams associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamsCall(_callback);
        }

        /**
         * Execute getTeams request
         * @return GetTeams200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the teams in the organization. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No teams found. There are no teams associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public GetTeams200Response execute() throws ApiException {
            ApiResponse<GetTeams200Response> localVarResp = getTeamsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTeams request with HTTP info returned
         * @return ApiResponse&lt;GetTeams200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the teams in the organization. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No teams found. There are no teams associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTeams200Response> executeWithHttpInfo() throws ApiException {
            return getTeamsWithHttpInfo();
        }

        /**
         * Execute getTeams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful retrieval of the teams in the organization. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No teams found. There are no teams associated with the current organization. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTeams200Response> _callback) throws ApiException {
            return getTeamsAsync(_callback);
        }
    }

    /**
     * Get Team List
     * Retrieve a list of teams within the organization associated with the authenticated user. This list provides basic details about each team, including the team ID and name.  **Token scopes**: &#x60;organizations:read&#x60;
     * @return APIgetTeamsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of the teams in the organization. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request is missing authentication credentials or the credentials provided are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No teams found. There are no teams associated with the current organization. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An error occurred on the server while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTeamsRequest getTeams() {
        return new APIgetTeamsRequest();
    }
    private okhttp3.Call getWorkingLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/working-locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkingLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWorkingLocationsCall(_callback);

    }


    private ApiResponse<WorkingLocationsContainer> getWorkingLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWorkingLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WorkingLocationsContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkingLocationsAsync(final ApiCallback<WorkingLocationsContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkingLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WorkingLocationsContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWorkingLocationsRequest {

        private APIgetWorkingLocationsRequest() {
        }

        /**
         * Build call for getWorkingLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkingLocationsCall(_callback);
        }

        /**
         * Execute getWorkingLocations request
         * @return WorkingLocationsContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public WorkingLocationsContainer execute() throws ApiException {
            ApiResponse<WorkingLocationsContainer> localVarResp = getWorkingLocationsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getWorkingLocations request with HTTP info returned
         * @return ApiResponse&lt;WorkingLocationsContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkingLocationsContainer> executeWithHttpInfo() throws ApiException {
            return getWorkingLocationsWithHttpInfo();
        }

        /**
         * Execute getWorkingLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkingLocationsContainer> _callback) throws ApiException {
            return getWorkingLocationsAsync(_callback);
        }
    }

    /**
     * Retrieve working locations
     * Get organization working locations.
     * @return APIgetWorkingLocationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWorkingLocationsRequest getWorkingLocations() {
        return new APIgetWorkingLocationsRequest();
    }
    private okhttp3.Call updateOrganizationRoleCall(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationRoleRequest;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationRoleValidateBeforeCall(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateOrganizationRole(Async)");
        }

        // verify the required parameter 'updateOrganizationRoleRequest' is set
        if (updateOrganizationRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationRoleRequest' when calling updateOrganizationRole(Async)");
        }

        return updateOrganizationRoleCall(roleId, updateOrganizationRoleRequest, _callback);

    }


    private ApiResponse<UpdateOrganizationRole200Response> updateOrganizationRoleWithHttpInfo(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationRoleValidateBeforeCall(roleId, updateOrganizationRoleRequest, null);
        Type localVarReturnType = new TypeToken<UpdateOrganizationRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrganizationRoleAsync(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback<UpdateOrganizationRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationRoleValidateBeforeCall(roleId, updateOrganizationRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateOrganizationRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateOrganizationRoleRequest {
        private final String roleId;
        private final UpdateOrganizationRoleRequest updateOrganizationRoleRequest;

        private APIupdateOrganizationRoleRequest(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest) {
            this.roleId = roleId;
            this.updateOrganizationRoleRequest = updateOrganizationRoleRequest;
        }

        /**
         * Build call for updateOrganizationRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateOrganizationRoleCall(roleId, updateOrganizationRoleRequest, _callback);
        }

        /**
         * Execute updateOrganizationRole request
         * @return UpdateOrganizationRole200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateOrganizationRole200Response execute() throws ApiException {
            ApiResponse<UpdateOrganizationRole200Response> localVarResp = updateOrganizationRoleWithHttpInfo(roleId, updateOrganizationRoleRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateOrganizationRole request with HTTP info returned
         * @return ApiResponse&lt;UpdateOrganizationRole200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateOrganizationRole200Response> executeWithHttpInfo() throws ApiException {
            return updateOrganizationRoleWithHttpInfo(roleId, updateOrganizationRoleRequest);
        }

        /**
         * Execute updateOrganizationRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateOrganizationRole200Response> _callback) throws ApiException {
            return updateOrganizationRoleAsync(roleId, updateOrganizationRoleRequest, _callback);
        }
    }

    /**
     * Update organization custom role
     * undefined  **Token scopes**: &#x60;organizations:write&#x60;
     * @param roleId ID of the role (required)
     * @param updateOrganizationRoleRequest  (required)
     * @return APIupdateOrganizationRoleRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateOrganizationRoleRequest updateOrganizationRole(String roleId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest) {
        return new APIupdateOrganizationRoleRequest(roleId, updateOrganizationRoleRequest);
    }
}
