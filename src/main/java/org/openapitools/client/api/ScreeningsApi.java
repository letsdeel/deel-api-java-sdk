/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateVeriffSession201Response;
import org.openapitools.client.model.CreateVeriffSessionRequest;
import org.openapitools.client.model.GetVerificationMethod200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScreeningsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreeningsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScreeningsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createVeriffSessionCall(CreateVeriffSessionRequest createVeriffSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVeriffSessionRequest;

        // create path and map variables
        String localVarPath = "/veriff/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVeriffSessionValidateBeforeCall(CreateVeriffSessionRequest createVeriffSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createVeriffSessionRequest' is set
        if (createVeriffSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createVeriffSessionRequest' when calling createVeriffSession(Async)");
        }

        return createVeriffSessionCall(createVeriffSessionRequest, _callback);

    }


    private ApiResponse<CreateVeriffSession201Response> createVeriffSessionWithHttpInfo(CreateVeriffSessionRequest createVeriffSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createVeriffSessionValidateBeforeCall(createVeriffSessionRequest, null);
        Type localVarReturnType = new TypeToken<CreateVeriffSession201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVeriffSessionAsync(CreateVeriffSessionRequest createVeriffSessionRequest, final ApiCallback<CreateVeriffSession201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVeriffSessionValidateBeforeCall(createVeriffSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateVeriffSession201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateVeriffSessionRequest {
        private final CreateVeriffSessionRequest createVeriffSessionRequest;

        private APIcreateVeriffSessionRequest(CreateVeriffSessionRequest createVeriffSessionRequest) {
            this.createVeriffSessionRequest = createVeriffSessionRequest;
        }

        /**
         * Build call for createVeriffSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createVeriffSessionCall(createVeriffSessionRequest, _callback);
        }

        /**
         * Execute createVeriffSession request
         * @return CreateVeriffSession201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CreateVeriffSession201Response execute() throws ApiException {
            ApiResponse<CreateVeriffSession201Response> localVarResp = createVeriffSessionWithHttpInfo(createVeriffSessionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createVeriffSession request with HTTP info returned
         * @return ApiResponse&lt;CreateVeriffSession201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateVeriffSession201Response> executeWithHttpInfo() throws ApiException {
            return createVeriffSessionWithHttpInfo(createVeriffSessionRequest);
        }

        /**
         * Execute createVeriffSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateVeriffSession201Response> _callback) throws ApiException {
            return createVeriffSessionAsync(createVeriffSessionRequest, _callback);
        }
    }

    /**
     * Create Veriff session
     * Create Veriff session  **Token scopes**: &#x60;screenings:write&#x60;, &#x60;worker:write&#x60;
     * @param createVeriffSessionRequest  (required)
     * @return APIcreateVeriffSessionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateVeriffSessionRequest createVeriffSession(CreateVeriffSessionRequest createVeriffSessionRequest) {
        return new APIcreateVeriffSessionRequest(createVeriffSessionRequest);
    }
    private okhttp3.Call getVerificationMethodCall(String country, String documentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenings/verification_method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (documentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_type", documentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationMethodValidateBeforeCall(String country, String documentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getVerificationMethod(Async)");
        }

        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling getVerificationMethod(Async)");
        }

        return getVerificationMethodCall(country, documentType, _callback);

    }


    private ApiResponse<GetVerificationMethod200Response> getVerificationMethodWithHttpInfo(String country, String documentType) throws ApiException {
        okhttp3.Call localVarCall = getVerificationMethodValidateBeforeCall(country, documentType, null);
        Type localVarReturnType = new TypeToken<GetVerificationMethod200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVerificationMethodAsync(String country, String documentType, final ApiCallback<GetVerificationMethod200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationMethodValidateBeforeCall(country, documentType, _callback);
        Type localVarReturnType = new TypeToken<GetVerificationMethod200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetVerificationMethodRequest {
        private final String country;
        private final String documentType;

        private APIgetVerificationMethodRequest(String country, String documentType) {
            this.country = country;
            this.documentType = documentType;
        }

        /**
         * Build call for getVerificationMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVerificationMethodCall(country, documentType, _callback);
        }

        /**
         * Execute getVerificationMethod request
         * @return GetVerificationMethod200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public GetVerificationMethod200Response execute() throws ApiException {
            ApiResponse<GetVerificationMethod200Response> localVarResp = getVerificationMethodWithHttpInfo(country, documentType);
            return localVarResp.getData();
        }

        /**
         * Execute getVerificationMethod request with HTTP info returned
         * @return ApiResponse&lt;GetVerificationMethod200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetVerificationMethod200Response> executeWithHttpInfo() throws ApiException {
            return getVerificationMethodWithHttpInfo(country, documentType);
        }

        /**
         * Execute getVerificationMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetVerificationMethod200Response> _callback) throws ApiException {
            return getVerificationMethodAsync(country, documentType, _callback);
        }
    }

    /**
     * Get verification method
     * Get verification method by provided country and document type  **Token scopes**: &#x60;screenings:read&#x60;, &#x60;worker:read&#x60;
     * @param country The document&#39;s issuing country code (ISO 3166-1 alpha-2) (required)
     * @param documentType The document to be provided during KYC (required)
     * @return APIgetVerificationMethodRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public APIgetVerificationMethodRequest getVerificationMethod(String country, String documentType) {
        return new APIgetVerificationMethodRequest(country, documentType);
    }
}
