/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateContractPgoTak201Response;
import org.openapitools.client.model.CreateContractPgoTak400Response;
import org.openapitools.client.model.CreateContractPgoTak401Response;
import org.openapitools.client.model.CreateContractPgoTak500Response;
import org.openapitools.client.model.CreateContractPgoTakRequest;
import org.openapitools.client.model.CreateTaskManyReview201Response;
import org.openapitools.client.model.CreateTaskManyReview400Response;
import org.openapitools.client.model.CreateTaskManyReview404Response;
import org.openapitools.client.model.CreateTaskManyReview500Response;
import org.openapitools.client.model.CreateTaskManyReviewRequest;
import org.openapitools.client.model.CreateTaskReviewById201Response;
import org.openapitools.client.model.CreateTaskReviewById404Response;
import org.openapitools.client.model.CreateTaskReviewById500Response;
import org.openapitools.client.model.CreateTaskReviewByIdRequest;
import org.openapitools.client.model.DeleteContractTaskById200Response;
import org.openapitools.client.model.GetTasksByContract200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createContractPgoTakCall(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContractPgoTakRequest;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContractPgoTakValidateBeforeCall(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createContractPgoTak(Async)");
        }

        // verify the required parameter 'createContractPgoTakRequest' is set
        if (createContractPgoTakRequest == null) {
            throw new ApiException("Missing the required parameter 'createContractPgoTakRequest' when calling createContractPgoTak(Async)");
        }

        return createContractPgoTakCall(contractId, createContractPgoTakRequest, _callback);

    }


    private ApiResponse<CreateContractPgoTak201Response> createContractPgoTakWithHttpInfo(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest) throws ApiException {
        okhttp3.Call localVarCall = createContractPgoTakValidateBeforeCall(contractId, createContractPgoTakRequest, null);
        Type localVarReturnType = new TypeToken<CreateContractPgoTak201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createContractPgoTakAsync(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest, final ApiCallback<CreateContractPgoTak201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContractPgoTakValidateBeforeCall(contractId, createContractPgoTakRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateContractPgoTak201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateContractPgoTakRequest {
        private final String contractId;
        private final CreateContractPgoTakRequest createContractPgoTakRequest;

        private APIcreateContractPgoTakRequest(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest) {
            this.contractId = contractId;
            this.createContractPgoTakRequest = createContractPgoTakRequest;
        }

        /**
         * Build call for createContractPgoTak
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task was successfully created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createContractPgoTakCall(contractId, createContractPgoTakRequest, _callback);
        }

        /**
         * Execute createContractPgoTak request
         * @return CreateContractPgoTak201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task was successfully created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public CreateContractPgoTak201Response execute() throws ApiException {
            ApiResponse<CreateContractPgoTak201Response> localVarResp = createContractPgoTakWithHttpInfo(contractId, createContractPgoTakRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createContractPgoTak request with HTTP info returned
         * @return ApiResponse&lt;CreateContractPgoTak201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task was successfully created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateContractPgoTak201Response> executeWithHttpInfo() throws ApiException {
            return createContractPgoTakWithHttpInfo(contractId, createContractPgoTakRequest);
        }

        /**
         * Execute createContractPgoTak request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task was successfully created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateContractPgoTak201Response> _callback) throws ApiException {
            return createContractPgoTakAsync(contractId, createContractPgoTakRequest, _callback);
        }
    }

    /**
     * Create a new task
     * Create a new task for a contractor associated with a specific Deel contract. A task can include details like amount, description, submission date, and optional attachments.  **Token scopes**: &#x60;contracts:write&#x60;
     * @param contractId The unique Deel contract ID associated with the task. (required)
     * @param createContractPgoTakRequest  (required)
     * @return APIcreateContractPgoTakRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The task was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateContractPgoTakRequest createContractPgoTak(String contractId, CreateContractPgoTakRequest createContractPgoTakRequest) {
        return new APIcreateContractPgoTakRequest(contractId, createContractPgoTakRequest);
    }
    private okhttp3.Call createTaskManyReviewCall(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskManyReviewRequest;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/many/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskManyReviewValidateBeforeCall(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createTaskManyReview(Async)");
        }

        // verify the required parameter 'createTaskManyReviewRequest' is set
        if (createTaskManyReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskManyReviewRequest' when calling createTaskManyReview(Async)");
        }

        return createTaskManyReviewCall(contractId, createTaskManyReviewRequest, _callback);

    }


    private ApiResponse<CreateTaskManyReview201Response> createTaskManyReviewWithHttpInfo(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = createTaskManyReviewValidateBeforeCall(contractId, createTaskManyReviewRequest, null);
        Type localVarReturnType = new TypeToken<CreateTaskManyReview201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTaskManyReviewAsync(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest, final ApiCallback<CreateTaskManyReview201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskManyReviewValidateBeforeCall(contractId, createTaskManyReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTaskManyReview201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTaskManyReviewRequest {
        private final String contractId;
        private final CreateTaskManyReviewRequest createTaskManyReviewRequest;

        private APIcreateTaskManyReviewRequest(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest) {
            this.contractId = contractId;
            this.createTaskManyReviewRequest = createTaskManyReviewRequest;
        }

        /**
         * Build call for createTaskManyReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task reviews were successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. One or more specified tasks or the contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTaskManyReviewCall(contractId, createTaskManyReviewRequest, _callback);
        }

        /**
         * Execute createTaskManyReview request
         * @return CreateTaskManyReview201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task reviews were successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. One or more specified tasks or the contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public CreateTaskManyReview201Response execute() throws ApiException {
            ApiResponse<CreateTaskManyReview201Response> localVarResp = createTaskManyReviewWithHttpInfo(contractId, createTaskManyReviewRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTaskManyReview request with HTTP info returned
         * @return ApiResponse&lt;CreateTaskManyReview201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task reviews were successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. One or more specified tasks or the contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTaskManyReview201Response> executeWithHttpInfo() throws ApiException {
            return createTaskManyReviewWithHttpInfo(contractId, createTaskManyReviewRequest);
        }

        /**
         * Execute createTaskManyReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task reviews were successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. One or more specified tasks or the contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTaskManyReview201Response> _callback) throws ApiException {
            return createTaskManyReviewAsync(contractId, createTaskManyReviewRequest, _callback);
        }
    }

    /**
     * Review multiple tasks
     * Review multiple tasks associated with a Deel contract to approve or decline the submitted work. The review includes a status (approved or declined) for each task and an optional reason for declined tasks.  **Token scopes**: &#x60;contracts:write&#x60;
     * @param contractId The unique Deel contract ID associated with the tasks. (required)
     * @param createTaskManyReviewRequest  (required)
     * @return APIcreateTaskManyReviewRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The task reviews were successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. One or more specified tasks or the contract was not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTaskManyReviewRequest createTaskManyReview(String contractId, CreateTaskManyReviewRequest createTaskManyReviewRequest) {
        return new APIcreateTaskManyReviewRequest(contractId, createTaskManyReviewRequest);
    }
    private okhttp3.Call createTaskReviewByIdCall(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskReviewByIdRequest;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/{task_id}/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskReviewByIdValidateBeforeCall(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createTaskReviewById(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskReviewById(Async)");
        }

        // verify the required parameter 'createTaskReviewByIdRequest' is set
        if (createTaskReviewByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskReviewByIdRequest' when calling createTaskReviewById(Async)");
        }

        return createTaskReviewByIdCall(contractId, taskId, createTaskReviewByIdRequest, _callback);

    }


    private ApiResponse<CreateTaskReviewById201Response> createTaskReviewByIdWithHttpInfo(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = createTaskReviewByIdValidateBeforeCall(contractId, taskId, createTaskReviewByIdRequest, null);
        Type localVarReturnType = new TypeToken<CreateTaskReviewById201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTaskReviewByIdAsync(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest, final ApiCallback<CreateTaskReviewById201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskReviewByIdValidateBeforeCall(contractId, taskId, createTaskReviewByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTaskReviewById201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTaskReviewByIdRequest {
        private final String contractId;
        private final String taskId;
        private final CreateTaskReviewByIdRequest createTaskReviewByIdRequest;

        private APIcreateTaskReviewByIdRequest(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest) {
            this.contractId = contractId;
            this.taskId = taskId;
            this.createTaskReviewByIdRequest = createTaskReviewByIdRequest;
        }

        /**
         * Build call for createTaskReviewById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task review was successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTaskReviewByIdCall(contractId, taskId, createTaskReviewByIdRequest, _callback);
        }

        /**
         * Execute createTaskReviewById request
         * @return CreateTaskReviewById201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task review was successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public CreateTaskReviewById201Response execute() throws ApiException {
            ApiResponse<CreateTaskReviewById201Response> localVarResp = createTaskReviewByIdWithHttpInfo(contractId, taskId, createTaskReviewByIdRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTaskReviewById request with HTTP info returned
         * @return ApiResponse&lt;CreateTaskReviewById201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task review was successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTaskReviewById201Response> executeWithHttpInfo() throws ApiException {
            return createTaskReviewByIdWithHttpInfo(contractId, taskId, createTaskReviewByIdRequest);
        }

        /**
         * Execute createTaskReviewById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The task review was successfully processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found. The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTaskReviewById201Response> _callback) throws ApiException {
            return createTaskReviewByIdAsync(contractId, taskId, createTaskReviewByIdRequest, _callback);
        }
    }

    /**
     * Review a single task
     * Review a specific task associated with a Deel contract to approve or decline the submitted work. The review includes the status (approved or declined) and an optional reason if declined.  **Token scopes**: &#x60;contracts:write&#x60;
     * @param contractId The unique Deel contract ID associated with the task. (required)
     * @param taskId The unique ID of the task to be reviewed. (required)
     * @param createTaskReviewByIdRequest  (required)
     * @return APIcreateTaskReviewByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The task review was successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Missing required fields or invalid data format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Authentication credentials are missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. The specified task or contract was not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. An unexpected error occurred while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTaskReviewByIdRequest createTaskReviewById(String contractId, String taskId, CreateTaskReviewByIdRequest createTaskReviewByIdRequest) {
        return new APIcreateTaskReviewByIdRequest(contractId, taskId, createTaskReviewByIdRequest);
    }
    private okhttp3.Call deleteContractTaskByIdCall(String contractId, String taskId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks/{task_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContractTaskByIdValidateBeforeCall(String contractId, String taskId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling deleteContractTaskById(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteContractTaskById(Async)");
        }

        return deleteContractTaskByIdCall(contractId, taskId, reason, _callback);

    }


    private ApiResponse<DeleteContractTaskById200Response> deleteContractTaskByIdWithHttpInfo(String contractId, String taskId, String reason) throws ApiException {
        okhttp3.Call localVarCall = deleteContractTaskByIdValidateBeforeCall(contractId, taskId, reason, null);
        Type localVarReturnType = new TypeToken<DeleteContractTaskById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteContractTaskByIdAsync(String contractId, String taskId, String reason, final ApiCallback<DeleteContractTaskById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContractTaskByIdValidateBeforeCall(contractId, taskId, reason, _callback);
        Type localVarReturnType = new TypeToken<DeleteContractTaskById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteContractTaskByIdRequest {
        private final String contractId;
        private final String taskId;
        private String reason;

        private APIdeleteContractTaskByIdRequest(String contractId, String taskId) {
            this.contractId = contractId;
            this.taskId = taskId;
        }

        /**
         * Set reason
         * @param reason The reason for deleting the task. This can be used for auditing purposes. (optional)
         * @return APIdeleteContractTaskByIdRequest
         */
        public APIdeleteContractTaskByIdRequest reason(String reason) {
            this.reason = reason;
            return this;
        }

        /**
         * Build call for deleteContractTaskById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. For example, missing required parameters or invalid format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. The user does not have the required access to delete the task. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContractTaskByIdCall(contractId, taskId, reason, _callback);
        }

        /**
         * Execute deleteContractTaskById request
         * @return DeleteContractTaskById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. For example, missing required parameters or invalid format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. The user does not have the required access to delete the task. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public DeleteContractTaskById200Response execute() throws ApiException {
            ApiResponse<DeleteContractTaskById200Response> localVarResp = deleteContractTaskByIdWithHttpInfo(contractId, taskId, reason);
            return localVarResp.getData();
        }

        /**
         * Execute deleteContractTaskById request with HTTP info returned
         * @return ApiResponse&lt;DeleteContractTaskById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. For example, missing required parameters or invalid format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. The user does not have the required access to delete the task. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteContractTaskById200Response> executeWithHttpInfo() throws ApiException {
            return deleteContractTaskByIdWithHttpInfo(contractId, taskId, reason);
        }

        /**
         * Execute deleteContractTaskById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. For example, missing required parameters or invalid format. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied. The user does not have the required access to delete the task. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified task or contract was not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteContractTaskById200Response> _callback) throws ApiException {
            return deleteContractTaskByIdAsync(contractId, taskId, reason, _callback);
        }
    }

    /**
     * Delete task
     * Delete a specific task associated with the contract. Optionally, a reason can be provided for auditing or documentation purposes.  **Token scopes**: &#x60;contracts:write&#x60;
     * @param contractId The unique identifier of the Deel contract. (required)
     * @param taskId The unique identifier of the task to be deleted. (required)
     * @return APIdeleteContractTaskByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. For example, missing required parameters or invalid format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied. The user does not have the required access to delete the task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified task or contract was not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteContractTaskByIdRequest deleteContractTaskById(String contractId, String taskId) {
        return new APIdeleteContractTaskByIdRequest(contractId, taskId);
    }
    private okhttp3.Call getTasksByContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/tasks"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksByContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getTasksByContract(Async)");
        }

        return getTasksByContractCall(contractId, _callback);

    }


    private ApiResponse<GetTasksByContract200Response> getTasksByContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getTasksByContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<GetTasksByContract200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTasksByContractAsync(String contractId, final ApiCallback<GetTasksByContract200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksByContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<GetTasksByContract200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTasksByContractRequest {
        private final String contractId;

        private APIgetTasksByContractRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getTasksByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. A list of tasks associated with the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTasksByContractCall(contractId, _callback);
        }

        /**
         * Execute getTasksByContract request
         * @return GetTasksByContract200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. A list of tasks associated with the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetTasksByContract200Response execute() throws ApiException {
            ApiResponse<GetTasksByContract200Response> localVarResp = getTasksByContractWithHttpInfo(contractId);
            return localVarResp.getData();
        }

        /**
         * Execute getTasksByContract request with HTTP info returned
         * @return ApiResponse&lt;GetTasksByContract200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. A list of tasks associated with the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTasksByContract200Response> executeWithHttpInfo() throws ApiException {
            return getTasksByContractWithHttpInfo(contractId);
        }

        /**
         * Execute getTasksByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. A list of tasks associated with the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTasksByContract200Response> _callback) throws ApiException {
            return getTasksByContractAsync(contractId, _callback);
        }
    }

    /**
     * List of tasks
     * Retrieve a list of tasks associated with a specific contract. Each task contains details such as its ID, amount, submission date, status, and description. This endpoint is useful for tracking the progress and status of tasks related to contracts.  **Token scopes**: &#x60;contracts:read&#x60;
     * @param contractId The unique identifier for the Deel contract. (required)
     * @return APIgetTasksByContractRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. A list of tasks associated with the specified contract. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTasksByContractRequest getTasksByContract(String contractId) {
        return new APIgetTasksByContractRequest(contractId);
    }
}
