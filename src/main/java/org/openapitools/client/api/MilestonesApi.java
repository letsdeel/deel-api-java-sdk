/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateMilestone201Response;
import org.openapitools.client.model.CreateMilestone400Response;
import org.openapitools.client.model.CreateMilestone404Response;
import org.openapitools.client.model.CreateMilestoneRequest;
import org.openapitools.client.model.CreateMilestoneRequest1;
import org.openapitools.client.model.DeleteMilestoneById200Response;
import org.openapitools.client.model.DeleteMilestoneById400Response;
import org.openapitools.client.model.DeleteMilestoneById404Response;
import org.openapitools.client.model.DeleteMilestoneById500Response;
import org.openapitools.client.model.GenericResultCreated;
import org.openapitools.client.model.GetMilestonesByContract200Response;
import org.openapitools.client.model.GetMilestonesByContractAndId200Response;
import org.openapitools.client.model.MilestoneReviewToCreateContainer;
import org.openapitools.client.model.MilestoneReviewsToCreateContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MilestonesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MilestonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MilestonesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMilestoneCall(String contractId, CreateMilestoneRequest createMilestoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMilestoneRequest;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMilestoneValidateBeforeCall(String contractId, CreateMilestoneRequest createMilestoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createMilestone(Async)");
        }

        // verify the required parameter 'createMilestoneRequest' is set
        if (createMilestoneRequest == null) {
            throw new ApiException("Missing the required parameter 'createMilestoneRequest' when calling createMilestone(Async)");
        }

        return createMilestoneCall(contractId, createMilestoneRequest, _callback);

    }


    private ApiResponse<CreateMilestone201Response> createMilestoneWithHttpInfo(String contractId, CreateMilestoneRequest createMilestoneRequest) throws ApiException {
        okhttp3.Call localVarCall = createMilestoneValidateBeforeCall(contractId, createMilestoneRequest, null);
        Type localVarReturnType = new TypeToken<CreateMilestone201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMilestoneAsync(String contractId, CreateMilestoneRequest createMilestoneRequest, final ApiCallback<CreateMilestone201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMilestoneValidateBeforeCall(contractId, createMilestoneRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateMilestone201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateMilestoneRequest {
        private final String contractId;
        private final CreateMilestoneRequest createMilestoneRequest;

        private APIcreateMilestoneRequest(String contractId, CreateMilestoneRequest createMilestoneRequest) {
            this.contractId = contractId;
            this.createMilestoneRequest = createMilestoneRequest;
        }

        /**
         * Build call for createMilestone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Milestone created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The input data did not meet the required validation rules. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMilestoneCall(contractId, createMilestoneRequest, _callback);
        }

        /**
         * Execute createMilestone request
         * @return CreateMilestone201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Milestone created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The input data did not meet the required validation rules. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateMilestone201Response execute() throws ApiException {
            ApiResponse<CreateMilestone201Response> localVarResp = createMilestoneWithHttpInfo(contractId, createMilestoneRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createMilestone request with HTTP info returned
         * @return ApiResponse&lt;CreateMilestone201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Milestone created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The input data did not meet the required validation rules. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateMilestone201Response> executeWithHttpInfo() throws ApiException {
            return createMilestoneWithHttpInfo(contractId, createMilestoneRequest);
        }

        /**
         * Execute createMilestone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Milestone created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The input data did not meet the required validation rules. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The specified contract ID does not exist. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateMilestone201Response> _callback) throws ApiException {
            return createMilestoneAsync(contractId, createMilestoneRequest, _callback);
        }
    }

    /**
     * Create a Milestone
     * Add a new milestone to a specific contract. Milestones represent distinct deliverables or phases in the contract and can include additional details such as attachments.
     * @param contractId The unique identifier of the Deel contract where the milestone will be added. (required)
     * @param createMilestoneRequest The milestone object containing the required details to be added to the contract. (required)
     * @return APIcreateMilestoneRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Milestone created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. The input data did not meet the required validation rules. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified contract ID does not exist. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateMilestoneRequest createMilestone(String contractId, CreateMilestoneRequest createMilestoneRequest) {
        return new APIcreateMilestoneRequest(contractId, createMilestoneRequest);
    }
    private okhttp3.Call createMilestoneReviewCall(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = milestoneReviewToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMilestoneReviewValidateBeforeCall(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createMilestoneReview(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling createMilestoneReview(Async)");
        }

        return createMilestoneReviewCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> createMilestoneReviewWithHttpInfo(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createMilestoneReviewValidateBeforeCall(contractId, milestoneId, milestoneReviewToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMilestoneReviewAsync(String contractId, String milestoneId, MilestoneReviewToCreateContainer milestoneReviewToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMilestoneReviewValidateBeforeCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateMilestoneReviewRequest {
        private final String contractId;
        private final String milestoneId;
        private MilestoneReviewToCreateContainer milestoneReviewToCreateContainer;

        private APIcreateMilestoneReviewRequest(String contractId, String milestoneId) {
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Set milestoneReviewToCreateContainer
         * @param milestoneReviewToCreateContainer Milestone review object that need to be created (optional)
         * @return APIcreateMilestoneReviewRequest
         */
        public APIcreateMilestoneReviewRequest milestoneReviewToCreateContainer(MilestoneReviewToCreateContainer milestoneReviewToCreateContainer) {
            this.milestoneReviewToCreateContainer = milestoneReviewToCreateContainer;
            return this;
        }

        /**
         * Build call for createMilestoneReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMilestoneReviewCall(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        }

        /**
         * Execute createMilestoneReview request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ApiResponse<GenericResultCreated> localVarResp = createMilestoneReviewWithHttpInfo(contractId, milestoneId, milestoneReviewToCreateContainer);
            return localVarResp.getData();
        }

        /**
         * Execute createMilestoneReview request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            return createMilestoneReviewWithHttpInfo(contractId, milestoneId, milestoneReviewToCreateContainer);
        }

        /**
         * Execute createMilestoneReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            return createMilestoneReviewAsync(contractId, milestoneId, milestoneReviewToCreateContainer, _callback);
        }
    }

    /**
     * Review a single milestone
     * Review a milestone to approve or decline submitted work.
     * @param contractId Deel contract id. (required)
     * @param milestoneId ID of milestone to return (required)
     * @return APIcreateMilestoneReviewRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateMilestoneReviewRequest createMilestoneReview(String contractId, String milestoneId) {
        return new APIcreateMilestoneReviewRequest(contractId, milestoneId);
    }
    private okhttp3.Call createMilestoneReviewsCall(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = milestoneReviewsToCreateContainer;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/many/reviews"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMilestoneReviewsValidateBeforeCall(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling createMilestoneReviews(Async)");
        }

        return createMilestoneReviewsCall(contractId, milestoneReviewsToCreateContainer, _callback);

    }


    private ApiResponse<GenericResultCreated> createMilestoneReviewsWithHttpInfo(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer) throws ApiException {
        okhttp3.Call localVarCall = createMilestoneReviewsValidateBeforeCall(contractId, milestoneReviewsToCreateContainer, null);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMilestoneReviewsAsync(String contractId, MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer, final ApiCallback<GenericResultCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMilestoneReviewsValidateBeforeCall(contractId, milestoneReviewsToCreateContainer, _callback);
        Type localVarReturnType = new TypeToken<GenericResultCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateMilestoneReviewsRequest {
        private final String contractId;
        private MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer;

        private APIcreateMilestoneReviewsRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set milestoneReviewsToCreateContainer
         * @param milestoneReviewsToCreateContainer Milestone review objects that need to be created (optional)
         * @return APIcreateMilestoneReviewsRequest
         */
        public APIcreateMilestoneReviewsRequest milestoneReviewsToCreateContainer(MilestoneReviewsToCreateContainer milestoneReviewsToCreateContainer) {
            this.milestoneReviewsToCreateContainer = milestoneReviewsToCreateContainer;
            return this;
        }

        /**
         * Build call for createMilestoneReviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createMilestoneReviewsCall(contractId, milestoneReviewsToCreateContainer, _callback);
        }

        /**
         * Execute createMilestoneReviews request
         * @return GenericResultCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GenericResultCreated execute() throws ApiException {
            ApiResponse<GenericResultCreated> localVarResp = createMilestoneReviewsWithHttpInfo(contractId, milestoneReviewsToCreateContainer);
            return localVarResp.getData();
        }

        /**
         * Execute createMilestoneReviews request with HTTP info returned
         * @return ApiResponse&lt;GenericResultCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenericResultCreated> executeWithHttpInfo() throws ApiException {
            return createMilestoneReviewsWithHttpInfo(contractId, milestoneReviewsToCreateContainer);
        }

        /**
         * Execute createMilestoneReviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenericResultCreated> _callback) throws ApiException {
            return createMilestoneReviewsAsync(contractId, milestoneReviewsToCreateContainer, _callback);
        }
    }

    /**
     * Review multiple milestones
     * Review a batch of milestones to approve or reject submitted work.
     * @param contractId Deel contract id. (required)
     * @return APIcreateMilestoneReviewsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateMilestoneReviewsRequest createMilestoneReviews(String contractId) {
        return new APIcreateMilestoneReviewsRequest(contractId);
    }
    private okhttp3.Call deleteMilestoneByIdCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMilestoneByIdValidateBeforeCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling deleteMilestoneById(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling deleteMilestoneById(Async)");
        }

        return deleteMilestoneByIdCall(contractId, milestoneId, _callback);

    }


    private ApiResponse<DeleteMilestoneById200Response> deleteMilestoneByIdWithHttpInfo(String contractId, String milestoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteMilestoneByIdValidateBeforeCall(contractId, milestoneId, null);
        Type localVarReturnType = new TypeToken<DeleteMilestoneById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMilestoneByIdAsync(String contractId, String milestoneId, final ApiCallback<DeleteMilestoneById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMilestoneByIdValidateBeforeCall(contractId, milestoneId, _callback);
        Type localVarReturnType = new TypeToken<DeleteMilestoneById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteMilestoneByIdRequest {
        private final String contractId;
        private final String milestoneId;

        private APIdeleteMilestoneByIdRequest(String contractId, String milestoneId) {
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Build call for deleteMilestoneById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Milestone successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided contract or milestone ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contract or milestone not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. Something went wrong while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMilestoneByIdCall(contractId, milestoneId, _callback);
        }

        /**
         * Execute deleteMilestoneById request
         * @return DeleteMilestoneById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Milestone successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided contract or milestone ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contract or milestone not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. Something went wrong while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public DeleteMilestoneById200Response execute() throws ApiException {
            ApiResponse<DeleteMilestoneById200Response> localVarResp = deleteMilestoneByIdWithHttpInfo(contractId, milestoneId);
            return localVarResp.getData();
        }

        /**
         * Execute deleteMilestoneById request with HTTP info returned
         * @return ApiResponse&lt;DeleteMilestoneById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Milestone successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided contract or milestone ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contract or milestone not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. Something went wrong while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteMilestoneById200Response> executeWithHttpInfo() throws ApiException {
            return deleteMilestoneByIdWithHttpInfo(contractId, milestoneId);
        }

        /**
         * Execute deleteMilestoneById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Milestone successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request. The provided contract or milestone ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contract or milestone not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error. Something went wrong while processing the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteMilestoneById200Response> _callback) throws ApiException {
            return deleteMilestoneByIdAsync(contractId, milestoneId, _callback);
        }
    }

    /**
     * Delete a Milestone
     * Delete a specific milestone associated with a contract. This operation removes the milestone and its data permanently from the system.
     * @param contractId The unique identifier of the Deel contract from which the milestone will be deleted. (required)
     * @param milestoneId The unique identifier of the milestone that is to be deleted. (required)
     * @return APIdeleteMilestoneByIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Milestone successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. The provided contract or milestone ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contract or milestone not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. Something went wrong while processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteMilestoneByIdRequest deleteMilestoneById(String contractId, String milestoneId) {
        return new APIdeleteMilestoneByIdRequest(contractId, milestoneId);
    }
    private okhttp3.Call getMilestonesByContractCall(String contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMilestonesByContractValidateBeforeCall(String contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getMilestonesByContract(Async)");
        }

        return getMilestonesByContractCall(contractId, _callback);

    }


    private ApiResponse<GetMilestonesByContract200Response> getMilestonesByContractWithHttpInfo(String contractId) throws ApiException {
        okhttp3.Call localVarCall = getMilestonesByContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<GetMilestonesByContract200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMilestonesByContractAsync(String contractId, final ApiCallback<GetMilestonesByContract200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMilestonesByContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<GetMilestonesByContract200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMilestonesByContractRequest {
        private final String contractId;

        private APIgetMilestonesByContractRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for getMilestonesByContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of milestones for the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMilestonesByContractCall(contractId, _callback);
        }

        /**
         * Execute getMilestonesByContract request
         * @return GetMilestonesByContract200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of milestones for the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetMilestonesByContract200Response execute() throws ApiException {
            ApiResponse<GetMilestonesByContract200Response> localVarResp = getMilestonesByContractWithHttpInfo(contractId);
            return localVarResp.getData();
        }

        /**
         * Execute getMilestonesByContract request with HTTP info returned
         * @return ApiResponse&lt;GetMilestonesByContract200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of milestones for the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMilestonesByContract200Response> executeWithHttpInfo() throws ApiException {
            return getMilestonesByContractWithHttpInfo(contractId);
        }

        /**
         * Execute getMilestonesByContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of milestones for the specified contract. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMilestonesByContract200Response> _callback) throws ApiException {
            return getMilestonesByContractAsync(contractId, _callback);
        }
    }

    /**
     * Retrieve Milestones by Contract
     * Retrieve a list of milestones associated with a specific contract. Each milestone includes details such as its title, amount, status, and relevant dates, along with information about the creator and reviewer.
     * @param contractId The unique identifier of the Deel contract for which milestones are being retrieved. (required)
     * @return APIgetMilestonesByContractRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of milestones for the specified contract. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMilestonesByContractRequest getMilestonesByContract(String contractId) {
        return new APIgetMilestonesByContractRequest(contractId);
    }
    private okhttp3.Call getMilestonesByContractAndIdCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contract_id}/milestones/{milestone_id}"
            .replace("{" + "contract_id" + "}", localVarApiClient.escapeString(contractId.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMilestonesByContractAndIdValidateBeforeCall(String contractId, String milestoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getMilestonesByContractAndId(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getMilestonesByContractAndId(Async)");
        }

        return getMilestonesByContractAndIdCall(contractId, milestoneId, _callback);

    }


    private ApiResponse<GetMilestonesByContractAndId200Response> getMilestonesByContractAndIdWithHttpInfo(String contractId, String milestoneId) throws ApiException {
        okhttp3.Call localVarCall = getMilestonesByContractAndIdValidateBeforeCall(contractId, milestoneId, null);
        Type localVarReturnType = new TypeToken<GetMilestonesByContractAndId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMilestonesByContractAndIdAsync(String contractId, String milestoneId, final ApiCallback<GetMilestonesByContractAndId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMilestonesByContractAndIdValidateBeforeCall(contractId, milestoneId, _callback);
        Type localVarReturnType = new TypeToken<GetMilestonesByContractAndId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMilestonesByContractAndIdRequest {
        private final String contractId;
        private final String milestoneId;

        private APIgetMilestonesByContractAndIdRequest(String contractId, String milestoneId) {
            this.contractId = contractId;
            this.milestoneId = milestoneId;
        }

        /**
         * Build call for getMilestonesByContractAndId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMilestonesByContractAndIdCall(contractId, milestoneId, _callback);
        }

        /**
         * Execute getMilestonesByContractAndId request
         * @return GetMilestonesByContractAndId200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetMilestonesByContractAndId200Response execute() throws ApiException {
            ApiResponse<GetMilestonesByContractAndId200Response> localVarResp = getMilestonesByContractAndIdWithHttpInfo(contractId, milestoneId);
            return localVarResp.getData();
        }

        /**
         * Execute getMilestonesByContractAndId request with HTTP info returned
         * @return ApiResponse&lt;GetMilestonesByContractAndId200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMilestonesByContractAndId200Response> executeWithHttpInfo() throws ApiException {
            return getMilestonesByContractAndIdWithHttpInfo(contractId, milestoneId);
        }

        /**
         * Execute getMilestonesByContractAndId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMilestonesByContractAndId200Response> _callback) throws ApiException {
            return getMilestonesByContractAndIdAsync(contractId, milestoneId, _callback);
        }
    }

    /**
     * Retrieve a single milestone
     * Retrieve a single milestone.
     * @param contractId Deel contract id. (required)
     * @param milestoneId ID of milestone to return (required)
     * @return APIgetMilestonesByContractAndIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMilestonesByContractAndIdRequest getMilestonesByContractAndId(String contractId, String milestoneId) {
        return new APIgetMilestonesByContractAndIdRequest(contractId, milestoneId);
    }
}
