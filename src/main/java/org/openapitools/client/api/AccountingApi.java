/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import java.math.BigDecimal;
import org.openapitools.client.model.DeelInvoiceListContainer;
import org.openapitools.client.model.GetBillingInvoiceDownloadLink200Response;
import org.openapitools.client.model.GetContractListCurrenciesParameter;
import org.openapitools.client.model.GetInvoiceList200Response;
import org.openapitools.client.model.GetInvoiceListEntitiesParameter;
import org.openapitools.client.model.GetPaymentList200Response;
import org.openapitools.client.model.GetPaymentsBreakDownById200Response;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBillingInvoiceDownloadLinkCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{id}/download"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingInvoiceDownloadLinkValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBillingInvoiceDownloadLink(Async)");
        }

        return getBillingInvoiceDownloadLinkCall(id, _callback);

    }


    private ApiResponse<GetBillingInvoiceDownloadLink200Response> getBillingInvoiceDownloadLinkWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getBillingInvoiceDownloadLinkValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetBillingInvoiceDownloadLink200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBillingInvoiceDownloadLinkAsync(String id, final ApiCallback<GetBillingInvoiceDownloadLink200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingInvoiceDownloadLinkValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetBillingInvoiceDownloadLink200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetBillingInvoiceDownloadLinkRequest {
        private final String id;

        private APIgetBillingInvoiceDownloadLinkRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getBillingInvoiceDownloadLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBillingInvoiceDownloadLinkCall(id, _callback);
        }

        /**
         * Execute getBillingInvoiceDownloadLink request
         * @return GetBillingInvoiceDownloadLink200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetBillingInvoiceDownloadLink200Response execute() throws ApiException {
            ApiResponse<GetBillingInvoiceDownloadLink200Response> localVarResp = getBillingInvoiceDownloadLinkWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getBillingInvoiceDownloadLink request with HTTP info returned
         * @return ApiResponse&lt;GetBillingInvoiceDownloadLink200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetBillingInvoiceDownloadLink200Response> executeWithHttpInfo() throws ApiException {
            return getBillingInvoiceDownloadLinkWithHttpInfo(id);
        }

        /**
         * Execute getBillingInvoiceDownloadLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetBillingInvoiceDownloadLink200Response> _callback) throws ApiException {
            return getBillingInvoiceDownloadLinkAsync(id, _callback);
        }
    }

    /**
     * Download invoice PDF
     * Get a link to download the invoice PDF.  **Token scopes**: &#x60;accounting:read&#x60;
     * @param id The invoice ID used to identify the invoice to be downloaded. (required)
     * @return APIgetBillingInvoiceDownloadLinkRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetBillingInvoiceDownloadLinkRequest getBillingInvoiceDownloadLink(String id) {
        return new APIgetBillingInvoiceDownloadLinkRequest(id);
    }
    private okhttp3.Call getDeelInvoiceListCall(String contractId, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/deel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (contractId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract_id", contractId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeelInvoiceListValidateBeforeCall(String contractId, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getDeelInvoiceList(Async)");
        }

        return getDeelInvoiceListCall(contractId, limit, offset, _callback);

    }


    private ApiResponse<DeelInvoiceListContainer> getDeelInvoiceListWithHttpInfo(String contractId, BigDecimal limit, BigDecimal offset) throws ApiException {
        okhttp3.Call localVarCall = getDeelInvoiceListValidateBeforeCall(contractId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DeelInvoiceListContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDeelInvoiceListAsync(String contractId, BigDecimal limit, BigDecimal offset, final ApiCallback<DeelInvoiceListContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeelInvoiceListValidateBeforeCall(contractId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DeelInvoiceListContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDeelInvoiceListRequest {
        private final String contractId;
        private BigDecimal limit;
        private BigDecimal offset;

        private APIgetDeelInvoiceListRequest(String contractId) {
            this.contractId = contractId;
        }

        /**
         * Set limit
         * @param limit Return a page of results with given number of records; NOTE technically ALL query parameters are strings or array of strings (optional, default to 10)
         * @return APIgetDeelInvoiceListRequest
         */
        public APIgetDeelInvoiceListRequest limit(BigDecimal limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset Return a page of results after given index of row; NOTE technically ALL query parameters are strings or array of strings&#39; (optional, default to 0)
         * @return APIgetDeelInvoiceListRequest
         */
        public APIgetDeelInvoiceListRequest offset(BigDecimal offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getDeelInvoiceList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeelInvoiceListCall(contractId, limit, offset, _callback);
        }

        /**
         * Execute getDeelInvoiceList request
         * @return DeelInvoiceListContainer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public DeelInvoiceListContainer execute() throws ApiException {
            ApiResponse<DeelInvoiceListContainer> localVarResp = getDeelInvoiceListWithHttpInfo(contractId, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getDeelInvoiceList request with HTTP info returned
         * @return ApiResponse&lt;DeelInvoiceListContainer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeelInvoiceListContainer> executeWithHttpInfo() throws ApiException {
            return getDeelInvoiceListWithHttpInfo(contractId, limit, offset);
        }

        /**
         * Execute getDeelInvoiceList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeelInvoiceListContainer> _callback) throws ApiException {
            return getDeelInvoiceListAsync(contractId, limit, offset, _callback);
        }
    }

    /**
     * Retrieve Deel invoices
     * Retrieve a list of invoices related to Deel fees.
     * @param contractId Deel contract id. (required)
     * @return APIgetDeelInvoiceListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDeelInvoiceListRequest getDeelInvoiceList(String contractId) {
        return new APIgetDeelInvoiceListRequest(contractId);
    }
    private okhttp3.Call getInvoiceListCall(String issuedFromDate, String issuedToDate, GetInvoiceListEntitiesParameter entities, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (issuedFromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issued_from_date", issuedFromDate));
        }

        if (issuedToDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issued_to_date", issuedToDate));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceListValidateBeforeCall(String issuedFromDate, String issuedToDate, GetInvoiceListEntitiesParameter entities, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        return getInvoiceListCall(issuedFromDate, issuedToDate, entities, limit, offset, _callback);

    }


    private ApiResponse<GetInvoiceList200Response> getInvoiceListWithHttpInfo(String issuedFromDate, String issuedToDate, GetInvoiceListEntitiesParameter entities, BigDecimal limit, BigDecimal offset) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceListValidateBeforeCall(issuedFromDate, issuedToDate, entities, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetInvoiceList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoiceListAsync(String issuedFromDate, String issuedToDate, GetInvoiceListEntitiesParameter entities, BigDecimal limit, BigDecimal offset, final ApiCallback<GetInvoiceList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceListValidateBeforeCall(issuedFromDate, issuedToDate, entities, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetInvoiceList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInvoiceListRequest {
        private String issuedFromDate;
        private String issuedToDate;
        private GetInvoiceListEntitiesParameter entities;
        private BigDecimal limit;
        private BigDecimal offset;

        private APIgetInvoiceListRequest() {
        }

        /**
         * Set issuedFromDate
         * @param issuedFromDate Filter invoices issued on or after the specified date. (optional)
         * @return APIgetInvoiceListRequest
         */
        public APIgetInvoiceListRequest issuedFromDate(String issuedFromDate) {
            this.issuedFromDate = issuedFromDate;
            return this;
        }

        /**
         * Set issuedToDate
         * @param issuedToDate Filter invoices issued before the specified date. (optional)
         * @return APIgetInvoiceListRequest
         */
        public APIgetInvoiceListRequest issuedToDate(String issuedToDate) {
            this.issuedToDate = issuedToDate;
            return this;
        }

        /**
         * Set entities
         * @param entities Filter by entity type (e.g., individual or company). (optional)
         * @return APIgetInvoiceListRequest
         */
        public APIgetInvoiceListRequest entities(GetInvoiceListEntitiesParameter entities) {
            this.entities = entities;
            return this;
        }

        /**
         * Set limit
         * @param limit Number of records to retrieve per page. (optional, default to 10)
         * @return APIgetInvoiceListRequest
         */
        public APIgetInvoiceListRequest limit(BigDecimal limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset Index of the first record to return. (optional, default to 0)
         * @return APIgetInvoiceListRequest
         */
        public APIgetInvoiceListRequest offset(BigDecimal offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getInvoiceList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoiceListCall(issuedFromDate, issuedToDate, entities, limit, offset, _callback);
        }

        /**
         * Execute getInvoiceList request
         * @return GetInvoiceList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetInvoiceList200Response execute() throws ApiException {
            ApiResponse<GetInvoiceList200Response> localVarResp = getInvoiceListWithHttpInfo(issuedFromDate, issuedToDate, entities, limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getInvoiceList request with HTTP info returned
         * @return ApiResponse&lt;GetInvoiceList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetInvoiceList200Response> executeWithHttpInfo() throws ApiException {
            return getInvoiceListWithHttpInfo(issuedFromDate, issuedToDate, entities, limit, offset);
        }

        /**
         * Execute getInvoiceList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetInvoiceList200Response> _callback) throws ApiException {
            return getInvoiceListAsync(issuedFromDate, issuedToDate, entities, limit, offset, _callback);
        }
    }

    /**
     * Retrieve invoices
     * Retrieve a list of paid invoices for your workforce.  **Token scopes**: &#x60;accounting:read&#x60;
     * @return APIgetInvoiceListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInvoiceListRequest getInvoiceList() {
        return new APIgetInvoiceListRequest();
    }
    private okhttp3.Call getPaymentListCall(LocalDate dateFrom, LocalDate dateTo, GetContractListCurrenciesParameter currencies, GetInvoiceListEntitiesParameter entities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (currencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencies", currencies));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentListValidateBeforeCall(LocalDate dateFrom, LocalDate dateTo, GetContractListCurrenciesParameter currencies, GetInvoiceListEntitiesParameter entities, final ApiCallback _callback) throws ApiException {
        return getPaymentListCall(dateFrom, dateTo, currencies, entities, _callback);

    }


    private ApiResponse<GetPaymentList200Response> getPaymentListWithHttpInfo(LocalDate dateFrom, LocalDate dateTo, GetContractListCurrenciesParameter currencies, GetInvoiceListEntitiesParameter entities) throws ApiException {
        okhttp3.Call localVarCall = getPaymentListValidateBeforeCall(dateFrom, dateTo, currencies, entities, null);
        Type localVarReturnType = new TypeToken<GetPaymentList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentListAsync(LocalDate dateFrom, LocalDate dateTo, GetContractListCurrenciesParameter currencies, GetInvoiceListEntitiesParameter entities, final ApiCallback<GetPaymentList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentListValidateBeforeCall(dateFrom, dateTo, currencies, entities, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPaymentListRequest {
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private GetContractListCurrenciesParameter currencies;
        private GetInvoiceListEntitiesParameter entities;

        private APIgetPaymentListRequest() {
        }

        /**
         * Set dateFrom
         * @param dateFrom Filters results to include payments created on or after this date (in ISO 8601 format). (optional)
         * @return APIgetPaymentListRequest
         */
        public APIgetPaymentListRequest dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Set dateTo
         * @param dateTo Filters results to include payments created before this date (in ISO 8601 format). (optional)
         * @return APIgetPaymentListRequest
         */
        public APIgetPaymentListRequest dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }

        /**
         * Set currencies
         * @param currencies Filters payments by their currency codes. Can be a single currency code or an array of codes. (optional)
         * @return APIgetPaymentListRequest
         */
        public APIgetPaymentListRequest currencies(GetContractListCurrenciesParameter currencies) {
            this.currencies = currencies;
            return this;
        }

        /**
         * Set entities
         * @param entities Filters payments by legal entity type (e.g., &#39;individual&#39; or &#39;company&#39;). Can be a single entity type or an array. (optional)
         * @return APIgetPaymentListRequest
         */
        public APIgetPaymentListRequest entities(GetInvoiceListEntitiesParameter entities) {
            this.entities = entities;
            return this;
        }

        /**
         * Build call for getPaymentList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentListCall(dateFrom, dateTo, currencies, entities, _callback);
        }

        /**
         * Execute getPaymentList request
         * @return GetPaymentList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetPaymentList200Response execute() throws ApiException {
            ApiResponse<GetPaymentList200Response> localVarResp = getPaymentListWithHttpInfo(dateFrom, dateTo, currencies, entities);
            return localVarResp.getData();
        }

        /**
         * Execute getPaymentList request with HTTP info returned
         * @return ApiResponse&lt;GetPaymentList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPaymentList200Response> executeWithHttpInfo() throws ApiException {
            return getPaymentListWithHttpInfo(dateFrom, dateTo, currencies, entities);
        }

        /**
         * Execute getPaymentList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPaymentList200Response> _callback) throws ApiException {
            return getPaymentListAsync(dateFrom, dateTo, currencies, entities, _callback);
        }
    }

    /**
     * Retrieve payment receipts
     * Retrieve a list of payments made to Deel, including worker details, payment status, and payment methods.  **Token scopes**: &#x60;accounting:read&#x60;
     * @return APIgetPaymentListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPaymentListRequest getPaymentList() {
        return new APIgetPaymentListRequest();
    }
    private okhttp3.Call getPaymentsBreakDownByIdCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{payment_id}/breakdown"
            .replace("{" + "payment_id" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsBreakDownByIdValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentsBreakDownById(Async)");
        }

        return getPaymentsBreakDownByIdCall(paymentId, _callback);

    }


    private ApiResponse<GetPaymentsBreakDownById200Response> getPaymentsBreakDownByIdWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsBreakDownByIdValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<GetPaymentsBreakDownById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentsBreakDownByIdAsync(String paymentId, final ApiCallback<GetPaymentsBreakDownById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsBreakDownByIdValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentsBreakDownById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPaymentsBreakDownByIdRequest {
        private final String paymentId;

        private APIgetPaymentsBreakDownByIdRequest(String paymentId) {
            this.paymentId = paymentId;
        }

        /**
         * Build call for getPaymentsBreakDownById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentsBreakDownByIdCall(paymentId, _callback);
        }

        /**
         * Execute getPaymentsBreakDownById request
         * @return GetPaymentsBreakDownById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetPaymentsBreakDownById200Response execute() throws ApiException {
            ApiResponse<GetPaymentsBreakDownById200Response> localVarResp = getPaymentsBreakDownByIdWithHttpInfo(paymentId);
            return localVarResp.getData();
        }

        /**
         * Execute getPaymentsBreakDownById request with HTTP info returned
         * @return ApiResponse&lt;GetPaymentsBreakDownById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPaymentsBreakDownById200Response> executeWithHttpInfo() throws ApiException {
            return getPaymentsBreakDownByIdWithHttpInfo(paymentId);
        }

        /**
         * Execute getPaymentsBreakDownById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPaymentsBreakDownById200Response> _callback) throws ApiException {
            return getPaymentsBreakDownByIdAsync(paymentId, _callback);
        }
    }

    /**
     * Retrieve a payment breakdown
     * Get a full breakdown of a payment made to Deel. Breakdown will include individual invoices and Deel fee as line items.  **Token scopes**: &#x60;accounting:read&#x60;
     * @param paymentId Unique identifier for the payment to retrieve the breakdown. (required)
     * @return APIgetPaymentsBreakDownByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPaymentsBreakDownByIdRequest getPaymentsBreakDownById(String paymentId) {
        return new APIgetPaymentsBreakDownByIdRequest(paymentId);
    }
}
