/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateShifts201Response;
import org.openapitools.client.model.CreateShiftsRequest;
import org.openapitools.client.model.GetShiftDetails200Response;
import org.openapitools.client.model.GetShiftDetails400Response;
import org.openapitools.client.model.GetShifts200Response;
import org.openapitools.client.model.UpdateShift200Response;
import org.openapitools.client.model.UpdateShiftRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeTrackingShiftsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingShiftsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingShiftsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createShiftsCall(CreateShiftsRequest createShiftsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShiftsRequest;

        // create path and map variables
        String localVarPath = "/time_tracking/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShiftsValidateBeforeCall(CreateShiftsRequest createShiftsRequest, final ApiCallback _callback) throws ApiException {
        return createShiftsCall(createShiftsRequest, _callback);

    }


    private ApiResponse<CreateShifts201Response> createShiftsWithHttpInfo(CreateShiftsRequest createShiftsRequest) throws ApiException {
        okhttp3.Call localVarCall = createShiftsValidateBeforeCall(createShiftsRequest, null);
        Type localVarReturnType = new TypeToken<CreateShifts201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createShiftsAsync(CreateShiftsRequest createShiftsRequest, final ApiCallback<CreateShifts201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShiftsValidateBeforeCall(createShiftsRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateShifts201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateShiftsRequest {
        private CreateShiftsRequest createShiftsRequest;

        private APIcreateShiftsRequest() {
        }

        /**
         * Set createShiftsRequest
         * @param createShiftsRequest Request body to create time tracking shifts. (optional)
         * @return APIcreateShiftsRequest
         */
        public APIcreateShiftsRequest createShiftsRequest(CreateShiftsRequest createShiftsRequest) {
            this.createShiftsRequest = createShiftsRequest;
            return this;
        }

        /**
         * Build call for createShifts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createShiftsCall(createShiftsRequest, _callback);
        }

        /**
         * Execute createShifts request
         * @return CreateShifts201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateShifts201Response execute() throws ApiException {
            ApiResponse<CreateShifts201Response> localVarResp = createShiftsWithHttpInfo(createShiftsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createShifts request with HTTP info returned
         * @return ApiResponse&lt;CreateShifts201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateShifts201Response> executeWithHttpInfo() throws ApiException {
            return createShiftsWithHttpInfo(createShiftsRequest);
        }

        /**
         * Execute createShifts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateShifts201Response> _callback) throws ApiException {
            return createShiftsAsync(createShiftsRequest, _callback);
        }
    }

    /**
     * Create shifts
     * Create shifts  **Token scopes**: &#x60;time-tracking:write&#x60;
     * @return APIcreateShiftsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateShiftsRequest createShifts() {
        return new APIcreateShiftsRequest();
    }
    private okhttp3.Call deleteShiftExternalIdCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shifts/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShiftExternalIdValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling deleteShiftExternalId(Async)");
        }

        return deleteShiftExternalIdCall(externalId, _callback);

    }


    private ApiResponse<Void> deleteShiftExternalIdWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = deleteShiftExternalIdValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteShiftExternalIdAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShiftExternalIdValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteShiftExternalIdRequest {
        private final String externalId;

        private APIdeleteShiftExternalIdRequest(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for deleteShiftExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Shift deleted successfully. No content is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift with the given external ID was not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error while attempting to delete the shift. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteShiftExternalIdCall(externalId, _callback);
        }

        /**
         * Execute deleteShiftExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Shift deleted successfully. No content is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift with the given external ID was not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error while attempting to delete the shift. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteShiftExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteShiftExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Shift deleted successfully. No content is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift with the given external ID was not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error while attempting to delete the shift. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteShiftExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteShiftExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Shift deleted successfully. No content is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift with the given external ID was not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error while attempting to delete the shift. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteShiftExternalIdAsync(externalId, _callback);
        }
    }

    /**
     * Delete a Shift by External ID
     * This endpoint deletes a shift using its external ID. Once deleted, the shift will no longer be retrievable or editable.  **Token scopes**: &#x60;time-tracking:write&#x60;
     * @param externalId The unique external identifier of the shift to be deleted. (required)
     * @return APIdeleteShiftExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Shift deleted successfully. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shift with the given external ID was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error while attempting to delete the shift. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteShiftExternalIdRequest deleteShiftExternalId(String externalId) {
        return new APIdeleteShiftExternalIdRequest(externalId);
    }
    private okhttp3.Call getShiftDetailsCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shifts/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftDetailsValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getShiftDetails(Async)");
        }

        return getShiftDetailsCall(externalId, _callback);

    }


    private ApiResponse<GetShiftDetails200Response> getShiftDetailsWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = getShiftDetailsValidateBeforeCall(externalId, null);
        Type localVarReturnType = new TypeToken<GetShiftDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftDetailsAsync(String externalId, final ApiCallback<GetShiftDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftDetailsValidateBeforeCall(externalId, _callback);
        Type localVarReturnType = new TypeToken<GetShiftDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetShiftDetailsRequest {
        private final String externalId;

        private APIgetShiftDetailsRequest(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for getShiftDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftDetailsCall(externalId, _callback);
        }

        /**
         * Execute getShiftDetails request
         * @return GetShiftDetails200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetShiftDetails200Response execute() throws ApiException {
            ApiResponse<GetShiftDetails200Response> localVarResp = getShiftDetailsWithHttpInfo(externalId);
            return localVarResp.getData();
        }

        /**
         * Execute getShiftDetails request with HTTP info returned
         * @return ApiResponse&lt;GetShiftDetails200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetShiftDetails200Response> executeWithHttpInfo() throws ApiException {
            return getShiftDetailsWithHttpInfo(externalId);
        }

        /**
         * Execute getShiftDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift details retrieved successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetShiftDetails200Response> _callback) throws ApiException {
            return getShiftDetailsAsync(externalId, _callback);
        }
    }

    /**
     * Get shift details
     * Retrieve details of a specific shift by external ID.  **Token scopes**: &#x60;time-tracking:read&#x60;
     * @param externalId  (required)
     * @return APIgetShiftDetailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shift details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetShiftDetailsRequest getShiftDetails(String externalId) {
        return new APIgetShiftDetailsRequest(externalId);
    }
    private okhttp3.Call getShiftsCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftsValidateBeforeCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        return getShiftsCall(limit, offset, _callback);

    }


    private ApiResponse<GetShifts200Response> getShiftsWithHttpInfo(String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getShiftsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<GetShifts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftsAsync(String limit, String offset, final ApiCallback<GetShifts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetShifts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetShiftsRequest {
        private String limit;
        private String offset;

        private APIgetShiftsRequest() {
        }

        /**
         * Set limit
         * @param limit Maximum number of records to return. (optional)
         * @return APIgetShiftsRequest
         */
        public APIgetShiftsRequest limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset Offset/index of record for the next page of records to return. (optional)
         * @return APIgetShiftsRequest
         */
        public APIgetShiftsRequest offset(String offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getShifts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with paginated shifts. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftsCall(limit, offset, _callback);
        }

        /**
         * Execute getShifts request
         * @return GetShifts200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with paginated shifts. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public GetShifts200Response execute() throws ApiException {
            ApiResponse<GetShifts200Response> localVarResp = getShiftsWithHttpInfo(limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getShifts request with HTTP info returned
         * @return ApiResponse&lt;GetShifts200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with paginated shifts. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetShifts200Response> executeWithHttpInfo() throws ApiException {
            return getShiftsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getShifts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response with paginated shifts. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetShifts200Response> _callback) throws ApiException {
            return getShiftsAsync(limit, offset, _callback);
        }
    }

    /**
     * List of shifts
     * Retrieve a paginated list of shifts with details such as start and end times, breaks, metadata, and summary metrics. Supports pagination through &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  **Token scopes**: &#x60;time-tracking:read&#x60;
     * @return APIgetShiftsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with paginated shifts. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetShiftsRequest getShifts() {
        return new APIgetShiftsRequest();
    }
    private okhttp3.Call updateShiftCall(String externalId, UpdateShiftRequest updateShiftRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShiftRequest;

        // create path and map variables
        String localVarPath = "/time_tracking/shifts/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShiftValidateBeforeCall(String externalId, UpdateShiftRequest updateShiftRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling updateShift(Async)");
        }

        // verify the required parameter 'updateShiftRequest' is set
        if (updateShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'updateShiftRequest' when calling updateShift(Async)");
        }

        return updateShiftCall(externalId, updateShiftRequest, _callback);

    }


    private ApiResponse<UpdateShift200Response> updateShiftWithHttpInfo(String externalId, UpdateShiftRequest updateShiftRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(externalId, updateShiftRequest, null);
        Type localVarReturnType = new TypeToken<UpdateShift200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateShiftAsync(String externalId, UpdateShiftRequest updateShiftRequest, final ApiCallback<UpdateShift200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(externalId, updateShiftRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateShift200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateShiftRequest {
        private final String externalId;
        private final UpdateShiftRequest updateShiftRequest;

        private APIupdateShiftRequest(String externalId, UpdateShiftRequest updateShiftRequest) {
            this.externalId = externalId;
            this.updateShiftRequest = updateShiftRequest;
        }

        /**
         * Build call for updateShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateShiftCall(externalId, updateShiftRequest, _callback);
        }

        /**
         * Execute updateShift request
         * @return UpdateShift200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateShift200Response execute() throws ApiException {
            ApiResponse<UpdateShift200Response> localVarResp = updateShiftWithHttpInfo(externalId, updateShiftRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateShift request with HTTP info returned
         * @return ApiResponse&lt;UpdateShift200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateShift200Response> executeWithHttpInfo() throws ApiException {
            return updateShiftWithHttpInfo(externalId, updateShiftRequest);
        }

        /**
         * Execute updateShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift updated successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateShift200Response> _callback) throws ApiException {
            return updateShiftAsync(externalId, updateShiftRequest, _callback);
        }
    }

    /**
     * Update a shift
     * Update specific fields of an existing shift by its unique &#x60;external_id&#x60;. This includes shift metadata (start and end times, breaks, and approval dates) and associated summary details.  **Token scopes**: &#x60;time-tracking:write&#x60;
     * @param externalId  (required)
     * @param updateShiftRequest  (required)
     * @return APIupdateShiftRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shift updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateShiftRequest updateShift(String externalId, UpdateShiftRequest updateShiftRequest) {
        return new APIupdateShiftRequest(externalId, updateShiftRequest);
    }
}
