/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListOnboardingTracker200Response;
import org.openapitools.client.model.ListOnboardingTrackerPaginationParameter;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnboardingTrackerHrisProfileOidGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnboardingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnboardingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listOnboardingTrackerCall(String search, List<String> contractOid, List<String> hiringTypes, List<String> progressStatuses, List<String> countries, List<String> teams, List<String> legalEntities, List<String> hrisDirectManagers, OffsetDateTime fromDate, OffsetDateTime toDate, List<String> actions, Integer limit, String sortBy, String sortOrder, ListOnboardingTrackerPaginationParameter pagination, Boolean includeOverview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarding/tracker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (contractOid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contractOid", contractOid));
        }

        if (hiringTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hiringTypes", hiringTypes));
        }

        if (progressStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "progressStatuses", progressStatuses));
        }

        if (countries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "countries", countries));
        }

        if (teams != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "teams", teams));
        }

        if (legalEntities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "legalEntities", legalEntities));
        }

        if (hrisDirectManagers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hrisDirectManagers", hrisDirectManagers));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "actions", actions));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (includeOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_overview", includeOverview));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOnboardingTrackerValidateBeforeCall(String search, List<String> contractOid, List<String> hiringTypes, List<String> progressStatuses, List<String> countries, List<String> teams, List<String> legalEntities, List<String> hrisDirectManagers, OffsetDateTime fromDate, OffsetDateTime toDate, List<String> actions, Integer limit, String sortBy, String sortOrder, ListOnboardingTrackerPaginationParameter pagination, Boolean includeOverview, final ApiCallback _callback) throws ApiException {
        return listOnboardingTrackerCall(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview, _callback);

    }


    private ApiResponse<ListOnboardingTracker200Response> listOnboardingTrackerWithHttpInfo(String search, List<String> contractOid, List<String> hiringTypes, List<String> progressStatuses, List<String> countries, List<String> teams, List<String> legalEntities, List<String> hrisDirectManagers, OffsetDateTime fromDate, OffsetDateTime toDate, List<String> actions, Integer limit, String sortBy, String sortOrder, ListOnboardingTrackerPaginationParameter pagination, Boolean includeOverview) throws ApiException {
        okhttp3.Call localVarCall = listOnboardingTrackerValidateBeforeCall(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview, null);
        Type localVarReturnType = new TypeToken<ListOnboardingTracker200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOnboardingTrackerAsync(String search, List<String> contractOid, List<String> hiringTypes, List<String> progressStatuses, List<String> countries, List<String> teams, List<String> legalEntities, List<String> hrisDirectManagers, OffsetDateTime fromDate, OffsetDateTime toDate, List<String> actions, Integer limit, String sortBy, String sortOrder, ListOnboardingTrackerPaginationParameter pagination, Boolean includeOverview, final ApiCallback<ListOnboardingTracker200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOnboardingTrackerValidateBeforeCall(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        Type localVarReturnType = new TypeToken<ListOnboardingTracker200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistOnboardingTrackerRequest {
        private String search;
        private List<String> contractOid;
        private List<String> hiringTypes;
        private List<String> progressStatuses;
        private List<String> countries;
        private List<String> teams;
        private List<String> legalEntities;
        private List<String> hrisDirectManagers;
        private OffsetDateTime fromDate;
        private OffsetDateTime toDate;
        private List<String> actions;
        private Integer limit;
        private String sortBy;
        private String sortOrder;
        private ListOnboardingTrackerPaginationParameter pagination;
        private Boolean includeOverview;

        private APIlistOnboardingTrackerRequest() {
        }

        /**
         * Set search
         * @param search Search term to filter contracts by name or other attributes (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest search(String search) {
            this.search = search;
            return this;
        }

        /**
         * Set contractOid
         * @param contractOid  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest contractOid(List<String> contractOid) {
            this.contractOid = contractOid;
            return this;
        }

        /**
         * Set hiringTypes
         * @param hiringTypes  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest hiringTypes(List<String> hiringTypes) {
            this.hiringTypes = hiringTypes;
            return this;
        }

        /**
         * Set progressStatuses
         * @param progressStatuses  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest progressStatuses(List<String> progressStatuses) {
            this.progressStatuses = progressStatuses;
            return this;
        }

        /**
         * Set countries
         * @param countries  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest countries(List<String> countries) {
            this.countries = countries;
            return this;
        }

        /**
         * Set teams
         * @param teams  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest teams(List<String> teams) {
            this.teams = teams;
            return this;
        }

        /**
         * Set legalEntities
         * @param legalEntities  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest legalEntities(List<String> legalEntities) {
            this.legalEntities = legalEntities;
            return this;
        }

        /**
         * Set hrisDirectManagers
         * @param hrisDirectManagers  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest hrisDirectManagers(List<String> hrisDirectManagers) {
            this.hrisDirectManagers = hrisDirectManagers;
            return this;
        }

        /**
         * Set fromDate
         * @param fromDate Start date for filtering contracts (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest fromDate(OffsetDateTime fromDate) {
            this.fromDate = fromDate;
            return this;
        }

        /**
         * Set toDate
         * @param toDate End date for filtering contracts (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest toDate(OffsetDateTime toDate) {
            this.toDate = toDate;
            return this;
        }

        /**
         * Set actions
         * @param actions Onboarding actions (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest actions(List<String> actions) {
            this.actions = actions;
            return this;
        }

        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 20)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Field to sort by (optional, default to progressStatusWeight)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set sortOrder
         * @param sortOrder Sorting order (optional, default to ASC)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Set pagination
         * @param pagination  (optional)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest pagination(ListOnboardingTrackerPaginationParameter pagination) {
            this.pagination = pagination;
            return this;
        }

        /**
         * Set includeOverview
         * @param includeOverview Include an overview of the contract (optional, default to false)
         * @return APIlistOnboardingTrackerRequest
         */
        public APIlistOnboardingTrackerRequest includeOverview(Boolean includeOverview) {
            this.includeOverview = includeOverview;
            return this;
        }

        /**
         * Build call for listOnboardingTracker
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of onboarding and their details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOnboardingTrackerCall(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        }

        /**
         * Execute listOnboardingTracker request
         * @return ListOnboardingTracker200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of onboarding and their details </td><td>  -  </td></tr>
         </table>
         */
        public ListOnboardingTracker200Response execute() throws ApiException {
            ApiResponse<ListOnboardingTracker200Response> localVarResp = listOnboardingTrackerWithHttpInfo(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview);
            return localVarResp.getData();
        }

        /**
         * Execute listOnboardingTracker request with HTTP info returned
         * @return ApiResponse&lt;ListOnboardingTracker200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of onboarding and their details </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListOnboardingTracker200Response> executeWithHttpInfo() throws ApiException {
            return listOnboardingTrackerWithHttpInfo(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview);
        }

        /**
         * Execute listOnboardingTracker request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of onboarding and their details </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListOnboardingTracker200Response> _callback) throws ApiException {
            return listOnboardingTrackerAsync(search, contractOid, hiringTypes, progressStatuses, countries, teams, legalEntities, hrisDirectManagers, fromDate, toDate, actions, limit, sortBy, sortOrder, pagination, includeOverview, _callback);
        }
    }

    /**
     * List onboarding employees
     * List all onboarding
     * @return APIlistOnboardingTrackerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of onboarding and their details </td><td>  -  </td></tr>
     </table>
     */
    public APIlistOnboardingTrackerRequest listOnboardingTracker() {
        return new APIlistOnboardingTrackerRequest();
    }
    private okhttp3.Call onboardingTrackerHrisProfileOidGetCall(String oid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarding/tracker/hris_profile/{oid}"
            .replace("{" + "oid" + "}", localVarApiClient.escapeString(oid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onboardingTrackerHrisProfileOidGetValidateBeforeCall(String oid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oid' is set
        if (oid == null) {
            throw new ApiException("Missing the required parameter 'oid' when calling onboardingTrackerHrisProfileOidGet(Async)");
        }

        return onboardingTrackerHrisProfileOidGetCall(oid, _callback);

    }


    private ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> onboardingTrackerHrisProfileOidGetWithHttpInfo(String oid) throws ApiException {
        okhttp3.Call localVarCall = onboardingTrackerHrisProfileOidGetValidateBeforeCall(oid, null);
        Type localVarReturnType = new TypeToken<OnboardingTrackerHrisProfileOidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call onboardingTrackerHrisProfileOidGetAsync(String oid, final ApiCallback<OnboardingTrackerHrisProfileOidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = onboardingTrackerHrisProfileOidGetValidateBeforeCall(oid, _callback);
        Type localVarReturnType = new TypeToken<OnboardingTrackerHrisProfileOidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIonboardingTrackerHrisProfileOidGetRequest {
        private final String oid;

        private APIonboardingTrackerHrisProfileOidGetRequest(String oid) {
            this.oid = oid;
        }

        /**
         * Build call for onboardingTrackerHrisProfileOidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return onboardingTrackerHrisProfileOidGetCall(oid, _callback);
        }

        /**
         * Execute onboardingTrackerHrisProfileOidGet request
         * @return OnboardingTrackerHrisProfileOidGet200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingTrackerHrisProfileOidGet200Response execute() throws ApiException {
            ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> localVarResp = onboardingTrackerHrisProfileOidGetWithHttpInfo(oid);
            return localVarResp.getData();
        }

        /**
         * Execute onboardingTrackerHrisProfileOidGet request with HTTP info returned
         * @return ApiResponse&lt;OnboardingTrackerHrisProfileOidGet200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> executeWithHttpInfo() throws ApiException {
            return onboardingTrackerHrisProfileOidGetWithHttpInfo(oid);
        }

        /**
         * Execute onboardingTrackerHrisProfileOidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingTrackerHrisProfileOidGet200Response> _callback) throws ApiException {
            return onboardingTrackerHrisProfileOidGetAsync(oid, _callback);
        }
    }

    /**
     * Get onboarding details by onboarding hris profile oid
     * Get onboarding overview
     * @param oid Unique hris profile oid (required)
     * @return APIonboardingTrackerHrisProfileOidGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
     </table>
     */
    public APIonboardingTrackerHrisProfileOidGetRequest onboardingTrackerHrisProfileOidGet(String oid) {
        return new APIonboardingTrackerHrisProfileOidGetRequest(oid);
    }
    private okhttp3.Call onboardingTrackerIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarding/tracker/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onboardingTrackerIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling onboardingTrackerIdGet(Async)");
        }

        return onboardingTrackerIdGetCall(id, _callback);

    }


    private ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> onboardingTrackerIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = onboardingTrackerIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OnboardingTrackerHrisProfileOidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call onboardingTrackerIdGetAsync(String id, final ApiCallback<OnboardingTrackerHrisProfileOidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = onboardingTrackerIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OnboardingTrackerHrisProfileOidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIonboardingTrackerIdGetRequest {
        private final String id;

        private APIonboardingTrackerIdGetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for onboardingTrackerIdGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return onboardingTrackerIdGetCall(id, _callback);
        }

        /**
         * Execute onboardingTrackerIdGet request
         * @return OnboardingTrackerHrisProfileOidGet200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingTrackerHrisProfileOidGet200Response execute() throws ApiException {
            ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> localVarResp = onboardingTrackerIdGetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute onboardingTrackerIdGet request with HTTP info returned
         * @return ApiResponse&lt;OnboardingTrackerHrisProfileOidGet200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingTrackerHrisProfileOidGet200Response> executeWithHttpInfo() throws ApiException {
            return onboardingTrackerIdGetWithHttpInfo(id);
        }

        /**
         * Execute onboardingTrackerIdGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingTrackerHrisProfileOidGet200Response> _callback) throws ApiException {
            return onboardingTrackerIdGetAsync(id, _callback);
        }
    }

    /**
     * Get onboarding details by onboarding tracker ID
     * Get onboarding overview
     * @param id Unique onboarding tracker identifier (required)
     * @return APIonboardingTrackerIdGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Onboarding overview </td><td>  -  </td></tr>
     </table>
     */
    public APIonboardingTrackerIdGetRequest onboardingTrackerIdGet(String id) {
        return new APIonboardingTrackerIdGetRequest(id);
    }
}
