/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorContainer;
import org.openapitools.client.model.CreateShiftRate201Response;
import org.openapitools.client.model.CreateShiftRateRequest;
import org.openapitools.client.model.GetShiftRate200Response;
import org.openapitools.client.model.GetShiftRates200Response;
import org.openapitools.client.model.UpdateShiftRate200Response;
import org.openapitools.client.model.UpdateShiftRate400Response;
import org.openapitools.client.model.UpdateShiftRateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeTrackingRatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingRatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingRatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createShiftRateCall(CreateShiftRateRequest createShiftRateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShiftRateRequest;

        // create path and map variables
        String localVarPath = "/time_tracking/shift_rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShiftRateValidateBeforeCall(CreateShiftRateRequest createShiftRateRequest, final ApiCallback _callback) throws ApiException {
        return createShiftRateCall(createShiftRateRequest, _callback);

    }


    private ApiResponse<CreateShiftRate201Response> createShiftRateWithHttpInfo(CreateShiftRateRequest createShiftRateRequest) throws ApiException {
        okhttp3.Call localVarCall = createShiftRateValidateBeforeCall(createShiftRateRequest, null);
        Type localVarReturnType = new TypeToken<CreateShiftRate201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createShiftRateAsync(CreateShiftRateRequest createShiftRateRequest, final ApiCallback<CreateShiftRate201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShiftRateValidateBeforeCall(createShiftRateRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateShiftRate201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateShiftRateRequest {
        private CreateShiftRateRequest createShiftRateRequest;

        private APIcreateShiftRateRequest() {
        }

        /**
         * Set createShiftRateRequest
         * @param createShiftRateRequest Details of the shift rate to create. (optional)
         * @return APIcreateShiftRateRequest
         */
        public APIcreateShiftRateRequest createShiftRateRequest(CreateShiftRateRequest createShiftRateRequest) {
            this.createShiftRateRequest = createShiftRateRequest;
            return this;
        }

        /**
         * Build call for createShiftRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift rate created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input provided for the shift rate creation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict occurred, likely due to a duplicate external ID. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while creating the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createShiftRateCall(createShiftRateRequest, _callback);
        }

        /**
         * Execute createShiftRate request
         * @return CreateShiftRate201Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift rate created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input provided for the shift rate creation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict occurred, likely due to a duplicate external ID. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while creating the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public CreateShiftRate201Response execute() throws ApiException {
            ApiResponse<CreateShiftRate201Response> localVarResp = createShiftRateWithHttpInfo(createShiftRateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createShiftRate request with HTTP info returned
         * @return ApiResponse&lt;CreateShiftRate201Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift rate created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input provided for the shift rate creation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict occurred, likely due to a duplicate external ID. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while creating the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateShiftRate201Response> executeWithHttpInfo() throws ApiException {
            return createShiftRateWithHttpInfo(createShiftRateRequest);
        }

        /**
         * Execute createShiftRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift rate created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input provided for the shift rate creation. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict occurred, likely due to a duplicate external ID. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while creating the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateShiftRate201Response> _callback) throws ApiException {
            return createShiftRateAsync(createShiftRateRequest, _callback);
        }
    }

    /**
     * Create a New Shift Rate
     * Create a new shift rate with the specified attributes such as name, type, value, and a unique external identifier.
     * @return APIcreateShiftRateRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Shift rate created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input provided for the shift rate creation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict occurred, likely due to a duplicate external ID. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error encountered while creating the shift rate. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateShiftRateRequest createShiftRate() {
        return new APIcreateShiftRateRequest();
    }
    private okhttp3.Call deleteShiftRateExternalIdCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shift_rates/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShiftRateExternalIdValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling deleteShiftRateExternalId(Async)");
        }

        return deleteShiftRateExternalIdCall(externalId, _callback);

    }


    private ApiResponse<Void> deleteShiftRateExternalIdWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = deleteShiftRateExternalIdValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteShiftRateExternalIdAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShiftRateExternalIdValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteShiftRateExternalIdRequest {
        private final String externalId;

        private APIdeleteShiftRateExternalIdRequest(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for deleteShiftRateExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteShiftRateExternalIdCall(externalId, _callback);
        }

        /**
         * Execute deleteShiftRateExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteShiftRateExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteShiftRateExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteShiftRateExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute deleteShiftRateExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteShiftRateExternalIdAsync(externalId, _callback);
        }
    }

    /**
     * Delete a ShiftRate by external ID
     * Delete a ShiftRate by external ID
     * @param externalId external ID (required)
     * @return APIdeleteShiftRateExternalIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteShiftRateExternalIdRequest deleteShiftRateExternalId(String externalId) {
        return new APIdeleteShiftRateExternalIdRequest(externalId);
    }
    private okhttp3.Call getShiftRateCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shift_rates/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftRateValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getShiftRate(Async)");
        }

        return getShiftRateCall(externalId, _callback);

    }


    private ApiResponse<GetShiftRate200Response> getShiftRateWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = getShiftRateValidateBeforeCall(externalId, null);
        Type localVarReturnType = new TypeToken<GetShiftRate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftRateAsync(String externalId, final ApiCallback<GetShiftRate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftRateValidateBeforeCall(externalId, _callback);
        Type localVarReturnType = new TypeToken<GetShiftRate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetShiftRateRequest {
        private final String externalId;

        private APIgetShiftRateRequest(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for getShiftRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift rate with the given external ID not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error occurred while retrieving the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftRateCall(externalId, _callback);
        }

        /**
         * Execute getShiftRate request
         * @return GetShiftRate200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift rate with the given external ID not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error occurred while retrieving the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public GetShiftRate200Response execute() throws ApiException {
            ApiResponse<GetShiftRate200Response> localVarResp = getShiftRateWithHttpInfo(externalId);
            return localVarResp.getData();
        }

        /**
         * Execute getShiftRate request with HTTP info returned
         * @return ApiResponse&lt;GetShiftRate200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift rate with the given external ID not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error occurred while retrieving the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetShiftRate200Response> executeWithHttpInfo() throws ApiException {
            return getShiftRateWithHttpInfo(externalId);
        }

        /**
         * Execute getShiftRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Shift rate with the given external ID not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error occurred while retrieving the shift rate. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetShiftRate200Response> _callback) throws ApiException {
            return getShiftRateAsync(externalId, _callback);
        }
    }

    /**
     * Retrieve a Shift Rate by External ID
     * Retrieve details of a specific shift rate using its external ID. The response includes information such as the name, type, value, and unique identifier of the shift rate.
     * @param externalId The unique external identifier of the shift rate to retrieve. (required)
     * @return APIgetShiftRateRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shift rate retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid external ID provided or the request is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shift rate with the given external ID not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred while retrieving the shift rate. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetShiftRateRequest getShiftRate(String externalId) {
        return new APIgetShiftRateRequest(externalId);
    }
    private okhttp3.Call getShiftRatesCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking/shift_rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftRatesValidateBeforeCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        return getShiftRatesCall(limit, offset, _callback);

    }


    private ApiResponse<GetShiftRates200Response> getShiftRatesWithHttpInfo(String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getShiftRatesValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<GetShiftRates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftRatesAsync(String limit, String offset, final ApiCallback<GetShiftRates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftRatesValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetShiftRates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetShiftRatesRequest {
        private String limit;
        private String offset;

        private APIgetShiftRatesRequest() {
        }

        /**
         * Set limit
         * @param limit The maximum number of records to return per page. For example, &#39;10&#39; to return up to 10 records. (optional)
         * @return APIgetShiftRatesRequest
         */
        public APIgetShiftRatesRequest limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set offset
         * @param offset The starting index for the records to retrieve. For example, &#39;0&#39; for the first page or &#39;10&#39; for the second page when limit&#x3D;10. (optional)
         * @return APIgetShiftRatesRequest
         */
        public APIgetShiftRatesRequest offset(String offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getShiftRates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paginated list of shift rates retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters provided (e.g., non-numeric limit or offset). </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while retrieving shift rates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftRatesCall(limit, offset, _callback);
        }

        /**
         * Execute getShiftRates request
         * @return GetShiftRates200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paginated list of shift rates retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters provided (e.g., non-numeric limit or offset). </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while retrieving shift rates. </td><td>  -  </td></tr>
         </table>
         */
        public GetShiftRates200Response execute() throws ApiException {
            ApiResponse<GetShiftRates200Response> localVarResp = getShiftRatesWithHttpInfo(limit, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getShiftRates request with HTTP info returned
         * @return ApiResponse&lt;GetShiftRates200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paginated list of shift rates retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters provided (e.g., non-numeric limit or offset). </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while retrieving shift rates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetShiftRates200Response> executeWithHttpInfo() throws ApiException {
            return getShiftRatesWithHttpInfo(limit, offset);
        }

        /**
         * Execute getShiftRates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paginated list of shift rates retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters provided (e.g., non-numeric limit or offset). </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error encountered while retrieving shift rates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetShiftRates200Response> _callback) throws ApiException {
            return getShiftRatesAsync(limit, offset, _callback);
        }
    }

    /**
     * Retrieve a Paginated List of Shift Rates
     * Retrieve a paginated list of shift rates, including details such as rate name, type, value, and timestamps. Pagination parameters can be used to control the size and position of the result set.
     * @return APIgetShiftRatesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of shift rates retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters provided (e.g., non-numeric limit or offset). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error encountered while retrieving shift rates. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetShiftRatesRequest getShiftRates() {
        return new APIgetShiftRatesRequest();
    }
    private okhttp3.Call updateShiftRateCall(String externalId, UpdateShiftRateRequest updateShiftRateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShiftRateRequest;

        // create path and map variables
        String localVarPath = "/time_tracking/shift_rates/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "deelToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShiftRateValidateBeforeCall(String externalId, UpdateShiftRateRequest updateShiftRateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling updateShiftRate(Async)");
        }

        // verify the required parameter 'updateShiftRateRequest' is set
        if (updateShiftRateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateShiftRateRequest' when calling updateShiftRate(Async)");
        }

        return updateShiftRateCall(externalId, updateShiftRateRequest, _callback);

    }


    private ApiResponse<UpdateShiftRate200Response> updateShiftRateWithHttpInfo(String externalId, UpdateShiftRateRequest updateShiftRateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShiftRateValidateBeforeCall(externalId, updateShiftRateRequest, null);
        Type localVarReturnType = new TypeToken<UpdateShiftRate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateShiftRateAsync(String externalId, UpdateShiftRateRequest updateShiftRateRequest, final ApiCallback<UpdateShiftRate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShiftRateValidateBeforeCall(externalId, updateShiftRateRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateShiftRate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateShiftRateRequest {
        private final String externalId;
        private final UpdateShiftRateRequest updateShiftRateRequest;

        private APIupdateShiftRateRequest(String externalId, UpdateShiftRateRequest updateShiftRateRequest) {
            this.externalId = externalId;
            this.updateShiftRateRequest = updateShiftRateRequest;
        }

        /**
         * Build call for updateShiftRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate updated successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateShiftRateCall(externalId, updateShiftRateRequest, _callback);
        }

        /**
         * Execute updateShiftRate request
         * @return UpdateShiftRate200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate updated successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateShiftRate200Response execute() throws ApiException {
            ApiResponse<UpdateShiftRate200Response> localVarResp = updateShiftRateWithHttpInfo(externalId, updateShiftRateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateShiftRate request with HTTP info returned
         * @return ApiResponse&lt;UpdateShiftRate200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate updated successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateShiftRate200Response> executeWithHttpInfo() throws ApiException {
            return updateShiftRateWithHttpInfo(externalId, updateShiftRateRequest);
        }

        /**
         * Execute updateShiftRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Shift rate updated successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateShiftRate200Response> _callback) throws ApiException {
            return updateShiftRateAsync(externalId, updateShiftRateRequest, _callback);
        }
    }

    /**
     * Update a shift rate
     * Update specific fields of an existing shift rate.
     * @param externalId  (required)
     * @param updateShiftRateRequest  (required)
     * @return APIupdateShiftRateRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shift rate updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Operation failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateShiftRateRequest updateShiftRate(String externalId, UpdateShiftRateRequest updateShiftRateRequest) {
        return new APIupdateShiftRateRequest(externalId, updateShiftRateRequest);
    }
}
