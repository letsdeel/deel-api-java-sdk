/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Employment;
import org.openapitools.client.model.MonthlyPayment;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.PeopleClientLegalEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * People object representing a Deel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-20T12:32:05.400762149Z[GMT]", comments = "Generator version: 7.10.0")
public class InternalPeople {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_WORK_EMAIL = "work_email";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL)
  @javax.annotation.Nullable
  private String workEmail;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personal_email";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  @javax.annotation.Nullable
  private String personalEmail;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  @javax.annotation.Nullable
  private String countryName;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  @javax.annotation.Nullable
  private String birthDate;

  public static final String SERIALIZED_NAME_PIC_URL = "pic_url";
  @SerializedName(SERIALIZED_NAME_PIC_URL)
  @javax.annotation.Nullable
  private String picUrl;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private String startDate;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  @javax.annotation.Nullable
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOURLY_REPORT_TOTAL = "hourly_report_total";
  @SerializedName(SERIALIZED_NAME_HOURLY_REPORT_TOTAL)
  @javax.annotation.Nullable
  private String hourlyReportTotal;

  public static final String SERIALIZED_NAME_CLIENT_LEGAL_ENTITY = "client_legal_entity";
  @SerializedName(SERIALIZED_NAME_CLIENT_LEGAL_ENTITY)
  @javax.annotation.Nullable
  private PeopleClientLegalEntity clientLegalEntity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  @javax.annotation.Nullable
  private String seniority;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completion_date";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  @javax.annotation.Nullable
  private String completionDate;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthly_payment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  @javax.annotation.Nullable
  private MonthlyPayment monthlyPayment;

  public static final String SERIALIZED_NAME_DIRECT_MANAGER = "direct_manager";
  @SerializedName(SERIALIZED_NAME_DIRECT_MANAGER)
  @javax.annotation.Nullable
  private String directManager;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS = "direct_reports";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS)
  @javax.annotation.Nullable
  private String directReports;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS_COUNT = "direct_reports_count";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS_COUNT)
  @javax.annotation.Nullable
  private Integer directReportsCount;

  public static final String SERIALIZED_NAME_EMPLOYMENTS = "employments";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENTS)
  @javax.annotation.Nullable
  private List<Employment> employments = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIRING_STATUS = "hiring_status";
  @SerializedName(SERIALIZED_NAME_HIRING_STATUS)
  @javax.annotation.Nullable
  private String hiringStatus;

  public static final String SERIALIZED_NAME_HIRING_TYPE = "hiring_type";
  @SerializedName(SERIALIZED_NAME_HIRING_TYPE)
  @javax.annotation.Nullable
  private String hiringType;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  @javax.annotation.Nullable
  private String jobTitle;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  @javax.annotation.Nullable
  private Integer teamId;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  @javax.annotation.Nullable
  private String team;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  @javax.annotation.Nullable
  private String department;

  public static final String SERIALIZED_NAME_WORK_LOCATION = "work_location";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION)
  @javax.annotation.Nullable
  private String workLocation;

  public static final String SERIALIZED_NAME_CONTRACT_TYPES = "contract_types";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPES)
  @javax.annotation.Nullable
  private List<String> contractTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_DEEL_USER = "has_deel_user";
  @SerializedName(SERIALIZED_NAME_HAS_DEEL_USER)
  @javax.annotation.Nullable
  private Boolean hasDeelUser;

  public InternalPeople() {
  }

  public InternalPeople id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the user
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public InternalPeople firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the user
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public InternalPeople lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of the user
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public InternalPeople fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name of the user
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public InternalPeople email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address of the user
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public InternalPeople workEmail(@javax.annotation.Nullable String workEmail) {
    this.workEmail = workEmail;
    return this;
  }

  /**
   * Work email address of the user
   * @return workEmail
   */
  @javax.annotation.Nullable
  public String getWorkEmail() {
    return workEmail;
  }

  public void setWorkEmail(@javax.annotation.Nullable String workEmail) {
    this.workEmail = workEmail;
  }


  public InternalPeople personalEmail(@javax.annotation.Nullable String personalEmail) {
    this.personalEmail = personalEmail;
    return this;
  }

  /**
   * Personal email address of the user
   * @return personalEmail
   */
  @javax.annotation.Nullable
  public String getPersonalEmail() {
    return personalEmail;
  }

  public void setPersonalEmail(@javax.annotation.Nullable String personalEmail) {
    this.personalEmail = personalEmail;
  }


  public InternalPeople countryName(@javax.annotation.Nullable String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Name of the country where the user is located
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(@javax.annotation.Nullable String countryName) {
    this.countryName = countryName;
  }


  public InternalPeople birthDate(@javax.annotation.Nullable String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Date of birth of the user in ISO format (yyyy-mm-dd)
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(@javax.annotation.Nullable String birthDate) {
    this.birthDate = birthDate;
  }


  public InternalPeople picUrl(@javax.annotation.Nullable String picUrl) {
    this.picUrl = picUrl;
    return this;
  }

  /**
   * URL of the user&#39;s profile picture
   * @return picUrl
   */
  @javax.annotation.Nullable
  public String getPicUrl() {
    return picUrl;
  }

  public void setPicUrl(@javax.annotation.Nullable String picUrl) {
    this.picUrl = picUrl;
  }


  public InternalPeople startDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Date when the user started their current employment in ISO format (yyyy-mm-dd)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
  }


  public InternalPeople payments(@javax.annotation.Nullable List<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public InternalPeople addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * List of payment objects representing the user&#39;s payment history
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }

  public void setPayments(@javax.annotation.Nullable List<Payment> payments) {
    this.payments = payments;
  }


  public InternalPeople hourlyReportTotal(@javax.annotation.Nullable String hourlyReportTotal) {
    this.hourlyReportTotal = hourlyReportTotal;
    return this;
  }

  /**
   * Total amount of hours worked by the user in ISO format (hh:mm:ss)
   * @return hourlyReportTotal
   */
  @javax.annotation.Nullable
  public String getHourlyReportTotal() {
    return hourlyReportTotal;
  }

  public void setHourlyReportTotal(@javax.annotation.Nullable String hourlyReportTotal) {
    this.hourlyReportTotal = hourlyReportTotal;
  }


  public InternalPeople clientLegalEntity(@javax.annotation.Nullable PeopleClientLegalEntity clientLegalEntity) {
    this.clientLegalEntity = clientLegalEntity;
    return this;
  }

  /**
   * Get clientLegalEntity
   * @return clientLegalEntity
   */
  @javax.annotation.Nullable
  public PeopleClientLegalEntity getClientLegalEntity() {
    return clientLegalEntity;
  }

  public void setClientLegalEntity(@javax.annotation.Nullable PeopleClientLegalEntity clientLegalEntity) {
    this.clientLegalEntity = clientLegalEntity;
  }


  public InternalPeople state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * State where the user is located
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public InternalPeople seniority(@javax.annotation.Nullable String seniority) {
    this.seniority = seniority;
    return this;
  }

  /**
   * Seniority level of the user&#39;s role
   * @return seniority
   */
  @javax.annotation.Nullable
  public String getSeniority() {
    return seniority;
  }

  public void setSeniority(@javax.annotation.Nullable String seniority) {
    this.seniority = seniority;
  }


  public InternalPeople completionDate(@javax.annotation.Nullable String completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Date when the user&#39;s current employment is expected to end in ISO format (yyyy-mm-ddThh:mm:ss.sssZ)
   * @return completionDate
   */
  @javax.annotation.Nullable
  public String getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(@javax.annotation.Nullable String completionDate) {
    this.completionDate = completionDate;
  }


  public InternalPeople monthlyPayment(@javax.annotation.Nullable MonthlyPayment monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
    return this;
  }

  /**
   * Get monthlyPayment
   * @return monthlyPayment
   */
  @javax.annotation.Nullable
  public MonthlyPayment getMonthlyPayment() {
    return monthlyPayment;
  }

  public void setMonthlyPayment(@javax.annotation.Nullable MonthlyPayment monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
  }


  public InternalPeople directManager(@javax.annotation.Nullable String directManager) {
    this.directManager = directManager;
    return this;
  }

  /**
   * Name of the user&#39;s direct manager
   * @return directManager
   */
  @javax.annotation.Nullable
  public String getDirectManager() {
    return directManager;
  }

  public void setDirectManager(@javax.annotation.Nullable String directManager) {
    this.directManager = directManager;
  }


  public InternalPeople directReports(@javax.annotation.Nullable String directReports) {
    this.directReports = directReports;
    return this;
  }

  /**
   * Names of the user&#39;s direct reports
   * @return directReports
   */
  @javax.annotation.Nullable
  public String getDirectReports() {
    return directReports;
  }

  public void setDirectReports(@javax.annotation.Nullable String directReports) {
    this.directReports = directReports;
  }


  public InternalPeople directReportsCount(@javax.annotation.Nullable Integer directReportsCount) {
    this.directReportsCount = directReportsCount;
    return this;
  }

  /**
   * Number of direct reports that the user has
   * @return directReportsCount
   */
  @javax.annotation.Nullable
  public Integer getDirectReportsCount() {
    return directReportsCount;
  }

  public void setDirectReportsCount(@javax.annotation.Nullable Integer directReportsCount) {
    this.directReportsCount = directReportsCount;
  }


  public InternalPeople employments(@javax.annotation.Nullable List<Employment> employments) {
    this.employments = employments;
    return this;
  }

  public InternalPeople addEmploymentsItem(Employment employmentsItem) {
    if (this.employments == null) {
      this.employments = new ArrayList<>();
    }
    this.employments.add(employmentsItem);
    return this;
  }

  /**
   * List of employment objects representing the user&#39;s employment history
   * @return employments
   */
  @javax.annotation.Nullable
  public List<Employment> getEmployments() {
    return employments;
  }

  public void setEmployments(@javax.annotation.Nullable List<Employment> employments) {
    this.employments = employments;
  }


  public InternalPeople hiringStatus(@javax.annotation.Nullable String hiringStatus) {
    this.hiringStatus = hiringStatus;
    return this;
  }

  /**
   * Hiring status of the user
   * @return hiringStatus
   */
  @javax.annotation.Nullable
  public String getHiringStatus() {
    return hiringStatus;
  }

  public void setHiringStatus(@javax.annotation.Nullable String hiringStatus) {
    this.hiringStatus = hiringStatus;
  }


  public InternalPeople hiringType(@javax.annotation.Nullable String hiringType) {
    this.hiringType = hiringType;
    return this;
  }

  /**
   * Type of employment contract that the user has
   * @return hiringType
   */
  @javax.annotation.Nullable
  public String getHiringType() {
    return hiringType;
  }

  public void setHiringType(@javax.annotation.Nullable String hiringType) {
    this.hiringType = hiringType;
  }


  public InternalPeople jobTitle(@javax.annotation.Nullable String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Title of the user&#39;s role
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(@javax.annotation.Nullable String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public InternalPeople country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * ISO 3166-1 alpha-2 code of the country where the user is located
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public InternalPeople teamId(@javax.annotation.Nullable Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Unique identifier for the team that the user belongs to
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(@javax.annotation.Nullable Integer teamId) {
    this.teamId = teamId;
  }


  public InternalPeople team(@javax.annotation.Nullable String team) {
    this.team = team;
    return this;
  }

  /**
   * Name of the team that the user belongs to
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(@javax.annotation.Nullable String team) {
    this.team = team;
  }


  public InternalPeople timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Time zone of the user&#39;s location
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public InternalPeople department(@javax.annotation.Nullable String department) {
    this.department = department;
    return this;
  }

  /**
   * Name of the department that the user belongs to
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(@javax.annotation.Nullable String department) {
    this.department = department;
  }


  public InternalPeople workLocation(@javax.annotation.Nullable String workLocation) {
    this.workLocation = workLocation;
    return this;
  }

  /**
   * Name of the user&#39;s work location
   * @return workLocation
   */
  @javax.annotation.Nullable
  public String getWorkLocation() {
    return workLocation;
  }

  public void setWorkLocation(@javax.annotation.Nullable String workLocation) {
    this.workLocation = workLocation;
  }


  public InternalPeople contractTypes(@javax.annotation.Nullable List<String> contractTypes) {
    this.contractTypes = contractTypes;
    return this;
  }

  public InternalPeople addContractTypesItem(String contractTypesItem) {
    if (this.contractTypes == null) {
      this.contractTypes = new ArrayList<>();
    }
    this.contractTypes.add(contractTypesItem);
    return this;
  }

  /**
   * List of contract types that the user has had in the past and/or currently has
   * @return contractTypes
   */
  @javax.annotation.Nullable
  public List<String> getContractTypes() {
    return contractTypes;
  }

  public void setContractTypes(@javax.annotation.Nullable List<String> contractTypes) {
    this.contractTypes = contractTypes;
  }


  public InternalPeople hasDeelUser(@javax.annotation.Nullable Boolean hasDeelUser) {
    this.hasDeelUser = hasDeelUser;
    return this;
  }

  /**
   * Indicates whether the user has a Deel account or not
   * @return hasDeelUser
   */
  @javax.annotation.Nullable
  public Boolean getHasDeelUser() {
    return hasDeelUser;
  }

  public void setHasDeelUser(@javax.annotation.Nullable Boolean hasDeelUser) {
    this.hasDeelUser = hasDeelUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalPeople internalPeople = (InternalPeople) o;
    return Objects.equals(this.id, internalPeople.id) &&
        Objects.equals(this.firstName, internalPeople.firstName) &&
        Objects.equals(this.lastName, internalPeople.lastName) &&
        Objects.equals(this.fullName, internalPeople.fullName) &&
        Objects.equals(this.email, internalPeople.email) &&
        Objects.equals(this.workEmail, internalPeople.workEmail) &&
        Objects.equals(this.personalEmail, internalPeople.personalEmail) &&
        Objects.equals(this.countryName, internalPeople.countryName) &&
        Objects.equals(this.birthDate, internalPeople.birthDate) &&
        Objects.equals(this.picUrl, internalPeople.picUrl) &&
        Objects.equals(this.startDate, internalPeople.startDate) &&
        Objects.equals(this.payments, internalPeople.payments) &&
        Objects.equals(this.hourlyReportTotal, internalPeople.hourlyReportTotal) &&
        Objects.equals(this.clientLegalEntity, internalPeople.clientLegalEntity) &&
        Objects.equals(this.state, internalPeople.state) &&
        Objects.equals(this.seniority, internalPeople.seniority) &&
        Objects.equals(this.completionDate, internalPeople.completionDate) &&
        Objects.equals(this.monthlyPayment, internalPeople.monthlyPayment) &&
        Objects.equals(this.directManager, internalPeople.directManager) &&
        Objects.equals(this.directReports, internalPeople.directReports) &&
        Objects.equals(this.directReportsCount, internalPeople.directReportsCount) &&
        Objects.equals(this.employments, internalPeople.employments) &&
        Objects.equals(this.hiringStatus, internalPeople.hiringStatus) &&
        Objects.equals(this.hiringType, internalPeople.hiringType) &&
        Objects.equals(this.jobTitle, internalPeople.jobTitle) &&
        Objects.equals(this.country, internalPeople.country) &&
        Objects.equals(this.teamId, internalPeople.teamId) &&
        Objects.equals(this.team, internalPeople.team) &&
        Objects.equals(this.timezone, internalPeople.timezone) &&
        Objects.equals(this.department, internalPeople.department) &&
        Objects.equals(this.workLocation, internalPeople.workLocation) &&
        Objects.equals(this.contractTypes, internalPeople.contractTypes) &&
        Objects.equals(this.hasDeelUser, internalPeople.hasDeelUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, fullName, email, workEmail, personalEmail, countryName, birthDate, picUrl, startDate, payments, hourlyReportTotal, clientLegalEntity, state, seniority, completionDate, monthlyPayment, directManager, directReports, directReportsCount, employments, hiringStatus, hiringType, jobTitle, country, teamId, team, timezone, department, workLocation, contractTypes, hasDeelUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalPeople {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    workEmail: ").append(toIndentedString(workEmail)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    picUrl: ").append(toIndentedString(picUrl)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    hourlyReportTotal: ").append(toIndentedString(hourlyReportTotal)).append("\n");
    sb.append("    clientLegalEntity: ").append(toIndentedString(clientLegalEntity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    directManager: ").append(toIndentedString(directManager)).append("\n");
    sb.append("    directReports: ").append(toIndentedString(directReports)).append("\n");
    sb.append("    directReportsCount: ").append(toIndentedString(directReportsCount)).append("\n");
    sb.append("    employments: ").append(toIndentedString(employments)).append("\n");
    sb.append("    hiringStatus: ").append(toIndentedString(hiringStatus)).append("\n");
    sb.append("    hiringType: ").append(toIndentedString(hiringType)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    workLocation: ").append(toIndentedString(workLocation)).append("\n");
    sb.append("    contractTypes: ").append(toIndentedString(contractTypes)).append("\n");
    sb.append("    hasDeelUser: ").append(toIndentedString(hasDeelUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("full_name");
    openapiFields.add("email");
    openapiFields.add("work_email");
    openapiFields.add("personal_email");
    openapiFields.add("country_name");
    openapiFields.add("birth_date");
    openapiFields.add("pic_url");
    openapiFields.add("start_date");
    openapiFields.add("payments");
    openapiFields.add("hourly_report_total");
    openapiFields.add("client_legal_entity");
    openapiFields.add("state");
    openapiFields.add("seniority");
    openapiFields.add("completion_date");
    openapiFields.add("monthly_payment");
    openapiFields.add("direct_manager");
    openapiFields.add("direct_reports");
    openapiFields.add("direct_reports_count");
    openapiFields.add("employments");
    openapiFields.add("hiring_status");
    openapiFields.add("hiring_type");
    openapiFields.add("job_title");
    openapiFields.add("country");
    openapiFields.add("team_id");
    openapiFields.add("team");
    openapiFields.add("timezone");
    openapiFields.add("department");
    openapiFields.add("work_location");
    openapiFields.add("contract_types");
    openapiFields.add("has_deel_user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InternalPeople
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InternalPeople.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternalPeople is not found in the empty JSON string", InternalPeople.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InternalPeople.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InternalPeople` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("work_email") != null && !jsonObj.get("work_email").isJsonNull()) && !jsonObj.get("work_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_email").toString()));
      }
      if ((jsonObj.get("personal_email") != null && !jsonObj.get("personal_email").isJsonNull()) && !jsonObj.get("personal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_email").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if ((jsonObj.get("birth_date") != null && !jsonObj.get("birth_date").isJsonNull()) && !jsonObj.get("birth_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birth_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birth_date").toString()));
      }
      if ((jsonObj.get("pic_url") != null && !jsonObj.get("pic_url").isJsonNull()) && !jsonObj.get("pic_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pic_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pic_url").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("hourly_report_total") != null && !jsonObj.get("hourly_report_total").isJsonNull()) && !jsonObj.get("hourly_report_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hourly_report_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hourly_report_total").toString()));
      }
      // validate the optional field `client_legal_entity`
      if (jsonObj.get("client_legal_entity") != null && !jsonObj.get("client_legal_entity").isJsonNull()) {
        PeopleClientLegalEntity.validateJsonElement(jsonObj.get("client_legal_entity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("seniority") != null && !jsonObj.get("seniority").isJsonNull()) && !jsonObj.get("seniority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority").toString()));
      }
      if ((jsonObj.get("completion_date") != null && !jsonObj.get("completion_date").isJsonNull()) && !jsonObj.get("completion_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion_date").toString()));
      }
      // validate the optional field `monthly_payment`
      if (jsonObj.get("monthly_payment") != null && !jsonObj.get("monthly_payment").isJsonNull()) {
        MonthlyPayment.validateJsonElement(jsonObj.get("monthly_payment"));
      }
      if ((jsonObj.get("direct_manager") != null && !jsonObj.get("direct_manager").isJsonNull()) && !jsonObj.get("direct_manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direct_manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direct_manager").toString()));
      }
      if ((jsonObj.get("direct_reports") != null && !jsonObj.get("direct_reports").isJsonNull()) && !jsonObj.get("direct_reports").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direct_reports` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direct_reports").toString()));
      }
      if (jsonObj.get("employments") != null && !jsonObj.get("employments").isJsonNull()) {
        JsonArray jsonArrayemployments = jsonObj.getAsJsonArray("employments");
        if (jsonArrayemployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("employments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `employments` to be an array in the JSON string but got `%s`", jsonObj.get("employments").toString()));
          }

          // validate the optional field `employments` (array)
          for (int i = 0; i < jsonArrayemployments.size(); i++) {
            Employment.validateJsonElement(jsonArrayemployments.get(i));
          };
        }
      }
      if ((jsonObj.get("hiring_status") != null && !jsonObj.get("hiring_status").isJsonNull()) && !jsonObj.get("hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_status").toString()));
      }
      if ((jsonObj.get("hiring_type") != null && !jsonObj.get("hiring_type").isJsonNull()) && !jsonObj.get("hiring_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_type").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("work_location") != null && !jsonObj.get("work_location").isJsonNull()) && !jsonObj.get("work_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contract_types") != null && !jsonObj.get("contract_types").isJsonNull() && !jsonObj.get("contract_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_types` to be an array in the JSON string but got `%s`", jsonObj.get("contract_types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternalPeople.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternalPeople' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternalPeople> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternalPeople.class));

       return (TypeAdapter<T>) new TypeAdapter<InternalPeople>() {
           @Override
           public void write(JsonWriter out, InternalPeople value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InternalPeople read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InternalPeople given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InternalPeople
   * @throws IOException if the JSON string is invalid with respect to InternalPeople
   */
  public static InternalPeople fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternalPeople.class);
  }

  /**
   * Convert an instance of InternalPeople to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

