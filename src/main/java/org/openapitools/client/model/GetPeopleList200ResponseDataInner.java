/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerAddressesInner;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerDepartment;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerDirectManager;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerDirectReportsInner;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerEmailsInner;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerEmploymentsInner;
import org.openapitools.client.model.GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPeopleList200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T15:22:04.472468916Z[GMT]", comments = "Generator version: 7.10.0")
public class GetPeopleList200ResponseDataInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  @javax.annotation.Nullable
  private List<GetPeopleList200ResponseDataInnerEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  @javax.annotation.Nullable
  private List<GetPeopleList200ResponseDataInnerAddressesInner> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  @javax.annotation.Nullable
  private String jobTitle;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  @javax.annotation.Nullable
  private String seniority;

  public static final String SERIALIZED_NAME_WORKER_ID = "worker_id";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  @javax.annotation.Nullable
  private BigDecimal workerId;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  @javax.annotation.Nullable
  private String birthDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  @javax.annotation.Nullable
  private GetPeopleList200ResponseDataInnerDepartment department;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_EMPLOYMENTS = "employments";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENTS)
  @javax.annotation.Nullable
  private List<GetPeopleList200ResponseDataInnerEmploymentsInner> employments = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_HIRING_TYPE = "hiring_type";
  @SerializedName(SERIALIZED_NAME_HIRING_TYPE)
  @javax.annotation.Nullable
  private String hiringType;

  public static final String SERIALIZED_NAME_HIRING_STATUS = "hiring_status";
  @SerializedName(SERIALIZED_NAME_HIRING_STATUS)
  @javax.annotation.Nullable
  private String hiringStatus;

  public static final String SERIALIZED_NAME_NATIONALITIES = "nationalities";
  @SerializedName(SERIALIZED_NAME_NATIONALITIES)
  @javax.annotation.Nullable
  private List<String> nationalities = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORK_LOCATION = "work_location";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION)
  @javax.annotation.Nullable
  private String workLocation;

  public static final String SERIALIZED_NAME_DIRECT_MANAGER = "direct_manager";
  @SerializedName(SERIALIZED_NAME_DIRECT_MANAGER)
  @javax.annotation.Nullable
  private GetPeopleList200ResponseDataInnerDirectManager directManager;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS = "direct_reports";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS)
  @javax.annotation.Nullable
  private List<GetPeopleList200ResponseDataInnerDirectReportsInner> directReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completion_date";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  @javax.annotation.Nullable
  private String completionDate;

  public static final String SERIALIZED_NAME_NEW_HIRING_STATUS = "new_hiring_status";
  @SerializedName(SERIALIZED_NAME_NEW_HIRING_STATUS)
  @javax.annotation.Nullable
  private String newHiringStatus;

  public static final String SERIALIZED_NAME_CLIENT_LEGAL_ENTITY = "client_legal_entity";
  @SerializedName(SERIALIZED_NAME_CLIENT_LEGAL_ENTITY)
  @javax.annotation.Nullable
  private GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity clientLegalEntity;

  public static final String SERIALIZED_NAME_PREFERRED_LAST_NAME = "preferred_last_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LAST_NAME)
  @javax.annotation.Nullable
  private String preferredLastName;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS_COUNT = "direct_reports_count";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS_COUNT)
  @javax.annotation.Nullable
  private Integer directReportsCount;

  public static final String SERIALIZED_NAME_PREFERRED_FIRST_NAME = "preferred_first_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FIRST_NAME)
  @javax.annotation.Nullable
  private String preferredFirstName;

  public static final String SERIALIZED_NAME_DIRECT_EMPLOYEE_TERMINATION_LAST_DAY = "direct_employee_termination_last_day";
  @SerializedName(SERIALIZED_NAME_DIRECT_EMPLOYEE_TERMINATION_LAST_DAY)
  @javax.annotation.Nullable
  private OffsetDateTime directEmployeeTerminationLastDay;

  public GetPeopleList200ResponseDataInner() {
  }

  public GetPeopleList200ResponseDataInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the employee.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public GetPeopleList200ResponseDataInner state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the employee.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public GetPeopleList200ResponseDataInner emails(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerEmailsInner> emails) {
    this.emails = emails;
    return this;
  }

  public GetPeopleList200ResponseDataInner addEmailsItem(GetPeopleList200ResponseDataInnerEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * An array of the employee&#39;s email addresses.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<GetPeopleList200ResponseDataInnerEmailsInner> getEmails() {
    return emails;
  }

  public void setEmails(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerEmailsInner> emails) {
    this.emails = emails;
  }


  public GetPeopleList200ResponseDataInner country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the employee.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public GetPeopleList200ResponseDataInner timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The timezone of the employee.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public GetPeopleList200ResponseDataInner addresses(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public GetPeopleList200ResponseDataInner addAddressesItem(GetPeopleList200ResponseDataInnerAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<GetPeopleList200ResponseDataInnerAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public GetPeopleList200ResponseDataInner fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * The full name of the employee.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public GetPeopleList200ResponseDataInner jobTitle(@javax.annotation.Nullable String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * The job title of the employee.
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(@javax.annotation.Nullable String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public GetPeopleList200ResponseDataInner lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the employee.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public GetPeopleList200ResponseDataInner seniority(@javax.annotation.Nullable String seniority) {
    this.seniority = seniority;
    return this;
  }

  /**
   * The seniority level of the employee.
   * @return seniority
   */
  @javax.annotation.Nullable
  public String getSeniority() {
    return seniority;
  }

  public void setSeniority(@javax.annotation.Nullable String seniority) {
    this.seniority = seniority;
  }


  public GetPeopleList200ResponseDataInner workerId(@javax.annotation.Nullable BigDecimal workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * The worker ID of the employee.
   * @return workerId
   */
  @javax.annotation.Nullable
  public BigDecimal getWorkerId() {
    return workerId;
  }

  public void setWorkerId(@javax.annotation.Nullable BigDecimal workerId) {
    this.workerId = workerId;
  }


  public GetPeopleList200ResponseDataInner birthDate(@javax.annotation.Nullable String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * The birth date of the employee.
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(@javax.annotation.Nullable String birthDate) {
    this.birthDate = birthDate;
  }


  public GetPeopleList200ResponseDataInner createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The creation timestamp of the employee record.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetPeopleList200ResponseDataInner department(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerDepartment department) {
    this.department = department;
    return this;
  }

  /**
   * Get department
   * @return department
   */
  @javax.annotation.Nullable
  public GetPeopleList200ResponseDataInnerDepartment getDepartment() {
    return department;
  }

  public void setDepartment(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerDepartment department) {
    this.department = department;
  }


  public GetPeopleList200ResponseDataInner firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the employee.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public GetPeopleList200ResponseDataInner startDate(@javax.annotation.Nullable LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date the employee started working.
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable LocalDate startDate) {
    this.startDate = startDate;
  }


  public GetPeopleList200ResponseDataInner updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Long date-time format following ISO-8601
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public GetPeopleList200ResponseDataInner employments(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerEmploymentsInner> employments) {
    this.employments = employments;
    return this;
  }

  public GetPeopleList200ResponseDataInner addEmploymentsItem(GetPeopleList200ResponseDataInnerEmploymentsInner employmentsItem) {
    if (this.employments == null) {
      this.employments = new ArrayList<>();
    }
    this.employments.add(employmentsItem);
    return this;
  }

  /**
   * Get employments
   * @return employments
   */
  @javax.annotation.Nullable
  public List<GetPeopleList200ResponseDataInnerEmploymentsInner> getEmployments() {
    return employments;
  }

  public void setEmployments(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerEmploymentsInner> employments) {
    this.employments = employments;
  }


  public GetPeopleList200ResponseDataInner externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external ID of the employee.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public GetPeopleList200ResponseDataInner hiringType(@javax.annotation.Nullable String hiringType) {
    this.hiringType = hiringType;
    return this;
  }

  /**
   * The type of hiring of the employee.
   * @return hiringType
   */
  @javax.annotation.Nullable
  public String getHiringType() {
    return hiringType;
  }

  public void setHiringType(@javax.annotation.Nullable String hiringType) {
    this.hiringType = hiringType;
  }


  public GetPeopleList200ResponseDataInner hiringStatus(@javax.annotation.Nullable String hiringStatus) {
    this.hiringStatus = hiringStatus;
    return this;
  }

  /**
   * The current hiring status of the employee.
   * @return hiringStatus
   */
  @javax.annotation.Nullable
  public String getHiringStatus() {
    return hiringStatus;
  }

  public void setHiringStatus(@javax.annotation.Nullable String hiringStatus) {
    this.hiringStatus = hiringStatus;
  }


  public GetPeopleList200ResponseDataInner nationalities(@javax.annotation.Nullable List<String> nationalities) {
    this.nationalities = nationalities;
    return this;
  }

  public GetPeopleList200ResponseDataInner addNationalitiesItem(String nationalitiesItem) {
    if (this.nationalities == null) {
      this.nationalities = new ArrayList<>();
    }
    this.nationalities.add(nationalitiesItem);
    return this;
  }

  /**
   * The nationality of the employee.
   * @return nationalities
   */
  @javax.annotation.Nullable
  public List<String> getNationalities() {
    return nationalities;
  }

  public void setNationalities(@javax.annotation.Nullable List<String> nationalities) {
    this.nationalities = nationalities;
  }


  public GetPeopleList200ResponseDataInner workLocation(@javax.annotation.Nullable String workLocation) {
    this.workLocation = workLocation;
    return this;
  }

  /**
   * The work location of the employee.
   * @return workLocation
   */
  @javax.annotation.Nullable
  public String getWorkLocation() {
    return workLocation;
  }

  public void setWorkLocation(@javax.annotation.Nullable String workLocation) {
    this.workLocation = workLocation;
  }


  public GetPeopleList200ResponseDataInner directManager(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerDirectManager directManager) {
    this.directManager = directManager;
    return this;
  }

  /**
   * Get directManager
   * @return directManager
   */
  @javax.annotation.Nullable
  public GetPeopleList200ResponseDataInnerDirectManager getDirectManager() {
    return directManager;
  }

  public void setDirectManager(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerDirectManager directManager) {
    this.directManager = directManager;
  }


  public GetPeopleList200ResponseDataInner directReports(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerDirectReportsInner> directReports) {
    this.directReports = directReports;
    return this;
  }

  public GetPeopleList200ResponseDataInner addDirectReportsItem(GetPeopleList200ResponseDataInnerDirectReportsInner directReportsItem) {
    if (this.directReports == null) {
      this.directReports = new ArrayList<>();
    }
    this.directReports.add(directReportsItem);
    return this;
  }

  /**
   * The direct reports to the employee.
   * @return directReports
   */
  @javax.annotation.Nullable
  public List<GetPeopleList200ResponseDataInnerDirectReportsInner> getDirectReports() {
    return directReports;
  }

  public void setDirectReports(@javax.annotation.Nullable List<GetPeopleList200ResponseDataInnerDirectReportsInner> directReports) {
    this.directReports = directReports;
  }


  public GetPeopleList200ResponseDataInner completionDate(@javax.annotation.Nullable String completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * The completion date of the task or project.
   * @return completionDate
   */
  @javax.annotation.Nullable
  public String getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(@javax.annotation.Nullable String completionDate) {
    this.completionDate = completionDate;
  }


  public GetPeopleList200ResponseDataInner newHiringStatus(@javax.annotation.Nullable String newHiringStatus) {
    this.newHiringStatus = newHiringStatus;
    return this;
  }

  /**
   * The new hiring status of the employee.
   * @return newHiringStatus
   */
  @javax.annotation.Nullable
  public String getNewHiringStatus() {
    return newHiringStatus;
  }

  public void setNewHiringStatus(@javax.annotation.Nullable String newHiringStatus) {
    this.newHiringStatus = newHiringStatus;
  }


  public GetPeopleList200ResponseDataInner clientLegalEntity(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity clientLegalEntity) {
    this.clientLegalEntity = clientLegalEntity;
    return this;
  }

  /**
   * Get clientLegalEntity
   * @return clientLegalEntity
   */
  @javax.annotation.Nullable
  public GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity getClientLegalEntity() {
    return clientLegalEntity;
  }

  public void setClientLegalEntity(@javax.annotation.Nullable GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity clientLegalEntity) {
    this.clientLegalEntity = clientLegalEntity;
  }


  public GetPeopleList200ResponseDataInner preferredLastName(@javax.annotation.Nullable String preferredLastName) {
    this.preferredLastName = preferredLastName;
    return this;
  }

  /**
   * The preferred last name of the employee.
   * @return preferredLastName
   */
  @javax.annotation.Nullable
  public String getPreferredLastName() {
    return preferredLastName;
  }

  public void setPreferredLastName(@javax.annotation.Nullable String preferredLastName) {
    this.preferredLastName = preferredLastName;
  }


  public GetPeopleList200ResponseDataInner directReportsCount(@javax.annotation.Nullable Integer directReportsCount) {
    this.directReportsCount = directReportsCount;
    return this;
  }

  /**
   * The count of direct reports to the employee.
   * @return directReportsCount
   */
  @javax.annotation.Nullable
  public Integer getDirectReportsCount() {
    return directReportsCount;
  }

  public void setDirectReportsCount(@javax.annotation.Nullable Integer directReportsCount) {
    this.directReportsCount = directReportsCount;
  }


  public GetPeopleList200ResponseDataInner preferredFirstName(@javax.annotation.Nullable String preferredFirstName) {
    this.preferredFirstName = preferredFirstName;
    return this;
  }

  /**
   * The preferred first name of the employee.
   * @return preferredFirstName
   */
  @javax.annotation.Nullable
  public String getPreferredFirstName() {
    return preferredFirstName;
  }

  public void setPreferredFirstName(@javax.annotation.Nullable String preferredFirstName) {
    this.preferredFirstName = preferredFirstName;
  }


  public GetPeopleList200ResponseDataInner directEmployeeTerminationLastDay(@javax.annotation.Nullable OffsetDateTime directEmployeeTerminationLastDay) {
    this.directEmployeeTerminationLastDay = directEmployeeTerminationLastDay;
    return this;
  }

  /**
   * The last day of work mentioned on the primary contract termination.
   * @return directEmployeeTerminationLastDay
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDirectEmployeeTerminationLastDay() {
    return directEmployeeTerminationLastDay;
  }

  public void setDirectEmployeeTerminationLastDay(@javax.annotation.Nullable OffsetDateTime directEmployeeTerminationLastDay) {
    this.directEmployeeTerminationLastDay = directEmployeeTerminationLastDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPeopleList200ResponseDataInner getPeopleList200ResponseDataInner = (GetPeopleList200ResponseDataInner) o;
    return Objects.equals(this.id, getPeopleList200ResponseDataInner.id) &&
        Objects.equals(this.state, getPeopleList200ResponseDataInner.state) &&
        Objects.equals(this.emails, getPeopleList200ResponseDataInner.emails) &&
        Objects.equals(this.country, getPeopleList200ResponseDataInner.country) &&
        Objects.equals(this.timezone, getPeopleList200ResponseDataInner.timezone) &&
        Objects.equals(this.addresses, getPeopleList200ResponseDataInner.addresses) &&
        Objects.equals(this.fullName, getPeopleList200ResponseDataInner.fullName) &&
        Objects.equals(this.jobTitle, getPeopleList200ResponseDataInner.jobTitle) &&
        Objects.equals(this.lastName, getPeopleList200ResponseDataInner.lastName) &&
        Objects.equals(this.seniority, getPeopleList200ResponseDataInner.seniority) &&
        Objects.equals(this.workerId, getPeopleList200ResponseDataInner.workerId) &&
        Objects.equals(this.birthDate, getPeopleList200ResponseDataInner.birthDate) &&
        Objects.equals(this.createdAt, getPeopleList200ResponseDataInner.createdAt) &&
        Objects.equals(this.department, getPeopleList200ResponseDataInner.department) &&
        Objects.equals(this.firstName, getPeopleList200ResponseDataInner.firstName) &&
        Objects.equals(this.startDate, getPeopleList200ResponseDataInner.startDate) &&
        Objects.equals(this.updatedAt, getPeopleList200ResponseDataInner.updatedAt) &&
        Objects.equals(this.employments, getPeopleList200ResponseDataInner.employments) &&
        Objects.equals(this.externalId, getPeopleList200ResponseDataInner.externalId) &&
        Objects.equals(this.hiringType, getPeopleList200ResponseDataInner.hiringType) &&
        Objects.equals(this.hiringStatus, getPeopleList200ResponseDataInner.hiringStatus) &&
        Objects.equals(this.nationalities, getPeopleList200ResponseDataInner.nationalities) &&
        Objects.equals(this.workLocation, getPeopleList200ResponseDataInner.workLocation) &&
        Objects.equals(this.directManager, getPeopleList200ResponseDataInner.directManager) &&
        Objects.equals(this.directReports, getPeopleList200ResponseDataInner.directReports) &&
        Objects.equals(this.completionDate, getPeopleList200ResponseDataInner.completionDate) &&
        Objects.equals(this.newHiringStatus, getPeopleList200ResponseDataInner.newHiringStatus) &&
        Objects.equals(this.clientLegalEntity, getPeopleList200ResponseDataInner.clientLegalEntity) &&
        Objects.equals(this.preferredLastName, getPeopleList200ResponseDataInner.preferredLastName) &&
        Objects.equals(this.directReportsCount, getPeopleList200ResponseDataInner.directReportsCount) &&
        Objects.equals(this.preferredFirstName, getPeopleList200ResponseDataInner.preferredFirstName) &&
        Objects.equals(this.directEmployeeTerminationLastDay, getPeopleList200ResponseDataInner.directEmployeeTerminationLastDay);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, emails, country, timezone, addresses, fullName, jobTitle, lastName, seniority, workerId, birthDate, createdAt, department, firstName, startDate, updatedAt, employments, externalId, hiringType, hiringStatus, nationalities, workLocation, directManager, directReports, completionDate, newHiringStatus, clientLegalEntity, preferredLastName, directReportsCount, preferredFirstName, directEmployeeTerminationLastDay);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPeopleList200ResponseDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    employments: ").append(toIndentedString(employments)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    hiringType: ").append(toIndentedString(hiringType)).append("\n");
    sb.append("    hiringStatus: ").append(toIndentedString(hiringStatus)).append("\n");
    sb.append("    nationalities: ").append(toIndentedString(nationalities)).append("\n");
    sb.append("    workLocation: ").append(toIndentedString(workLocation)).append("\n");
    sb.append("    directManager: ").append(toIndentedString(directManager)).append("\n");
    sb.append("    directReports: ").append(toIndentedString(directReports)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    newHiringStatus: ").append(toIndentedString(newHiringStatus)).append("\n");
    sb.append("    clientLegalEntity: ").append(toIndentedString(clientLegalEntity)).append("\n");
    sb.append("    preferredLastName: ").append(toIndentedString(preferredLastName)).append("\n");
    sb.append("    directReportsCount: ").append(toIndentedString(directReportsCount)).append("\n");
    sb.append("    preferredFirstName: ").append(toIndentedString(preferredFirstName)).append("\n");
    sb.append("    directEmployeeTerminationLastDay: ").append(toIndentedString(directEmployeeTerminationLastDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("state");
    openapiFields.add("emails");
    openapiFields.add("country");
    openapiFields.add("timezone");
    openapiFields.add("addresses");
    openapiFields.add("full_name");
    openapiFields.add("job_title");
    openapiFields.add("last_name");
    openapiFields.add("seniority");
    openapiFields.add("worker_id");
    openapiFields.add("birth_date");
    openapiFields.add("created_at");
    openapiFields.add("department");
    openapiFields.add("first_name");
    openapiFields.add("start_date");
    openapiFields.add("updated_at");
    openapiFields.add("employments");
    openapiFields.add("external_id");
    openapiFields.add("hiring_type");
    openapiFields.add("hiring_status");
    openapiFields.add("nationalities");
    openapiFields.add("work_location");
    openapiFields.add("direct_manager");
    openapiFields.add("direct_reports");
    openapiFields.add("completion_date");
    openapiFields.add("new_hiring_status");
    openapiFields.add("client_legal_entity");
    openapiFields.add("preferred_last_name");
    openapiFields.add("direct_reports_count");
    openapiFields.add("preferred_first_name");
    openapiFields.add("direct_employee_termination_last_day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPeopleList200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPeopleList200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPeopleList200ResponseDataInner is not found in the empty JSON string", GetPeopleList200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPeopleList200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPeopleList200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull()) {
        JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
        if (jsonArrayemails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
          }

          // validate the optional field `emails` (array)
          for (int i = 0; i < jsonArrayemails.size(); i++) {
            GetPeopleList200ResponseDataInnerEmailsInner.validateJsonElement(jsonArrayemails.get(i));
          };
        }
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            GetPeopleList200ResponseDataInnerAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("seniority") != null && !jsonObj.get("seniority").isJsonNull()) && !jsonObj.get("seniority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority").toString()));
      }
      if ((jsonObj.get("birth_date") != null && !jsonObj.get("birth_date").isJsonNull()) && !jsonObj.get("birth_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birth_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birth_date").toString()));
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        GetPeopleList200ResponseDataInnerDepartment.validateJsonElement(jsonObj.get("department"));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (jsonObj.get("employments") != null && !jsonObj.get("employments").isJsonNull()) {
        JsonArray jsonArrayemployments = jsonObj.getAsJsonArray("employments");
        if (jsonArrayemployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("employments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `employments` to be an array in the JSON string but got `%s`", jsonObj.get("employments").toString()));
          }

          // validate the optional field `employments` (array)
          for (int i = 0; i < jsonArrayemployments.size(); i++) {
            GetPeopleList200ResponseDataInnerEmploymentsInner.validateJsonElement(jsonArrayemployments.get(i));
          };
        }
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("hiring_type") != null && !jsonObj.get("hiring_type").isJsonNull()) && !jsonObj.get("hiring_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_type").toString()));
      }
      if ((jsonObj.get("hiring_status") != null && !jsonObj.get("hiring_status").isJsonNull()) && !jsonObj.get("hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiring_status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nationalities") != null && !jsonObj.get("nationalities").isJsonNull() && !jsonObj.get("nationalities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalities` to be an array in the JSON string but got `%s`", jsonObj.get("nationalities").toString()));
      }
      if ((jsonObj.get("work_location") != null && !jsonObj.get("work_location").isJsonNull()) && !jsonObj.get("work_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_location").toString()));
      }
      // validate the optional field `direct_manager`
      if (jsonObj.get("direct_manager") != null && !jsonObj.get("direct_manager").isJsonNull()) {
        GetPeopleList200ResponseDataInnerDirectManager.validateJsonElement(jsonObj.get("direct_manager"));
      }
      if (jsonObj.get("direct_reports") != null && !jsonObj.get("direct_reports").isJsonNull()) {
        JsonArray jsonArraydirectReports = jsonObj.getAsJsonArray("direct_reports");
        if (jsonArraydirectReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("direct_reports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `direct_reports` to be an array in the JSON string but got `%s`", jsonObj.get("direct_reports").toString()));
          }

          // validate the optional field `direct_reports` (array)
          for (int i = 0; i < jsonArraydirectReports.size(); i++) {
            GetPeopleList200ResponseDataInnerDirectReportsInner.validateJsonElement(jsonArraydirectReports.get(i));
          };
        }
      }
      if ((jsonObj.get("completion_date") != null && !jsonObj.get("completion_date").isJsonNull()) && !jsonObj.get("completion_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion_date").toString()));
      }
      if ((jsonObj.get("new_hiring_status") != null && !jsonObj.get("new_hiring_status").isJsonNull()) && !jsonObj.get("new_hiring_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_hiring_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_hiring_status").toString()));
      }
      // validate the optional field `client_legal_entity`
      if (jsonObj.get("client_legal_entity") != null && !jsonObj.get("client_legal_entity").isJsonNull()) {
        GetPeopleList200ResponseDataInnerEmploymentsInnerClientLegalEntity.validateJsonElement(jsonObj.get("client_legal_entity"));
      }
      if ((jsonObj.get("preferred_last_name") != null && !jsonObj.get("preferred_last_name").isJsonNull()) && !jsonObj.get("preferred_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_last_name").toString()));
      }
      if ((jsonObj.get("preferred_first_name") != null && !jsonObj.get("preferred_first_name").isJsonNull()) && !jsonObj.get("preferred_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_first_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPeopleList200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPeopleList200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPeopleList200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPeopleList200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPeopleList200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetPeopleList200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPeopleList200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPeopleList200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPeopleList200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetPeopleList200ResponseDataInner
   */
  public static GetPeopleList200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPeopleList200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetPeopleList200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

