/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetInvoiceList200ResponseDataRowsInnerContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetInvoiceList200ResponseDataRowsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T19:12:08.356438549Z[GMT]", comments = "Generator version: 7.10.0")
public class GetInvoiceList200ResponseDataRowsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  @javax.annotation.Nullable
  private String fee;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nonnull
  private String label;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nonnull
  private String total;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private String amount;

  /**
   * Current status of the invoice.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    PAID("paid"),
    
    PROCESSING("processing"),
    
    CANCELED("canceled"),
    
    SKIPPED("skipped"),
    
    FAILED("failed"),
    
    REFUNDED("refunded");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VAT_ID = "vat_id";
  @SerializedName(SERIALIZED_NAME_VAT_ID)
  @javax.annotation.Nullable
  private String vatId;

  public static final String SERIALIZED_NAME_PAID_AT = "paid_at";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  @javax.annotation.Nullable
  private OffsetDateTime paidAt;

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  @javax.annotation.Nonnull
  private GetInvoiceList200ResponseDataRowsInnerContract contract;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_DEEL_FEE = "deel_fee";
  @SerializedName(SERIALIZED_NAME_DEEL_FEE)
  @javax.annotation.Nullable
  private String deelFee;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_IS_SEALED = "is_sealed";
  @SerializedName(SERIALIZED_NAME_IS_SEALED)
  @javax.annotation.Nullable
  private Boolean isSealed;

  public static final String SERIALIZED_NAME_ISSUED_AT = "issued_at";
  @SerializedName(SERIALIZED_NAME_ISSUED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime issuedAt;

  public static final String SERIALIZED_NAME_VAT_TOTAL = "vat_total";
  @SerializedName(SERIALIZED_NAME_VAT_TOTAL)
  @javax.annotation.Nullable
  private String vatTotal;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_IS_OVERDUE = "is_overdue";
  @SerializedName(SERIALIZED_NAME_IS_OVERDUE)
  @javax.annotation.Nullable
  private Boolean isOverdue;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  @javax.annotation.Nonnull
  private String contractId;

  public static final String SERIALIZED_NAME_IS_OFFCYCLE = "is_offcycle";
  @SerializedName(SERIALIZED_NAME_IS_OFFCYCLE)
  @javax.annotation.Nullable
  private Boolean isOffcycle;

  public static final String SERIALIZED_NAME_EXCHANGE_FEE = "exchange_fee";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_FEE)
  @javax.annotation.Nullable
  private String exchangeFee;

  public static final String SERIALIZED_NAME_PROCESSED_AT = "processed_at";
  @SerializedName(SERIALIZED_NAME_PROCESSED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime processedAt;

  public static final String SERIALIZED_NAME_HAS_BREAKDOWN = "has_breakdown";
  @SerializedName(SERIALIZED_NAME_HAS_BREAKDOWN)
  @javax.annotation.Nullable
  private Boolean hasBreakdown;

  public static final String SERIALIZED_NAME_IS_EARLY_PAID = "is_early_paid";
  @SerializedName(SERIALIZED_NAME_IS_EARLY_PAID)
  @javax.annotation.Nullable
  private Boolean isEarlyPaid;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  @javax.annotation.Nullable
  private String paymentMethod;

  public static final String SERIALIZED_NAME_VAT_PERCENTAGE = "vat_percentage";
  @SerializedName(SERIALIZED_NAME_VAT_PERCENTAGE)
  @javax.annotation.Nullable
  private String vatPercentage;

  public static final String SERIALIZED_NAME_EARLY_PAYOUT_FEE = "early_payout_fee";
  @SerializedName(SERIALIZED_NAME_EARLY_PAYOUT_FEE)
  @javax.annotation.Nullable
  private String earlyPayoutFee;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "payment_currency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  @javax.annotation.Nullable
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_MONEY_RECEIVED_AT = "money_received_at";
  @SerializedName(SERIALIZED_NAME_MONEY_RECEIVED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime moneyReceivedAt;

  public static final String SERIALIZED_NAME_PAYMENT_PROCESSED_AT = "payment_processed_at";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROCESSED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime paymentProcessedAt;

  public static final String SERIALIZED_NAME_IS_PAID_TO_CONTRACTOR = "is_paid_to_contractor";
  @SerializedName(SERIALIZED_NAME_IS_PAID_TO_CONTRACTOR)
  @javax.annotation.Nullable
  private Boolean isPaidToContractor;

  public GetInvoiceList200ResponseDataRowsInner() {
  }

  public GetInvoiceList200ResponseDataRowsInner id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this resource.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public GetInvoiceList200ResponseDataRowsInner fee(@javax.annotation.Nullable String fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Fee added to the invoice amount.
   * @return fee
   */
  @javax.annotation.Nullable
  public String getFee() {
    return fee;
  }

  public void setFee(@javax.annotation.Nullable String fee) {
    this.fee = fee;
  }


  public GetInvoiceList200ResponseDataRowsInner type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the invoice.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public GetInvoiceList200ResponseDataRowsInner label(@javax.annotation.Nonnull String label) {
    this.label = label;
    return this;
  }

  /**
   * Label or reference number of the invoice.
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nonnull String label) {
    this.label = label;
  }


  public GetInvoiceList200ResponseDataRowsInner total(@javax.annotation.Nonnull String total) {
    this.total = total;
    return this;
  }

  /**
   * Total invoice amount, including fees and VAT.
   * @return total
   */
  @javax.annotation.Nonnull
  public String getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nonnull String total) {
    this.total = total;
  }


  public GetInvoiceList200ResponseDataRowsInner amount(@javax.annotation.Nullable String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Billed amount of the invoice.
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable String amount) {
    this.amount = amount;
  }


  public GetInvoiceList200ResponseDataRowsInner status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the invoice.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public GetInvoiceList200ResponseDataRowsInner vatId(@javax.annotation.Nullable String vatId) {
    this.vatId = vatId;
    return this;
  }

  /**
   * VAT identification number related to the invoice.
   * @return vatId
   */
  @javax.annotation.Nullable
  public String getVatId() {
    return vatId;
  }

  public void setVatId(@javax.annotation.Nullable String vatId) {
    this.vatId = vatId;
  }


  public GetInvoiceList200ResponseDataRowsInner paidAt(@javax.annotation.Nullable OffsetDateTime paidAt) {
    this.paidAt = paidAt;
    return this;
  }

  /**
   * Date and time when the invoice was paid (ISO-8601 format).
   * @return paidAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaidAt() {
    return paidAt;
  }

  public void setPaidAt(@javax.annotation.Nullable OffsetDateTime paidAt) {
    this.paidAt = paidAt;
  }


  public GetInvoiceList200ResponseDataRowsInner contract(@javax.annotation.Nonnull GetInvoiceList200ResponseDataRowsInnerContract contract) {
    this.contract = contract;
    return this;
  }

  /**
   * Get contract
   * @return contract
   */
  @javax.annotation.Nonnull
  public GetInvoiceList200ResponseDataRowsInnerContract getContract() {
    return contract;
  }

  public void setContract(@javax.annotation.Nonnull GetInvoiceList200ResponseDataRowsInnerContract contract) {
    this.contract = contract;
  }


  public GetInvoiceList200ResponseDataRowsInner currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Three-letter currency code for the invoice.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public GetInvoiceList200ResponseDataRowsInner deelFee(@javax.annotation.Nullable String deelFee) {
    this.deelFee = deelFee;
    return this;
  }

  /**
   * Fee charged by Deel.
   * @return deelFee
   */
  @javax.annotation.Nullable
  public String getDeelFee() {
    return deelFee;
  }

  public void setDeelFee(@javax.annotation.Nullable String deelFee) {
    this.deelFee = deelFee;
  }


  public GetInvoiceList200ResponseDataRowsInner dueDate(@javax.annotation.Nullable OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Date and time when the invoice is due (ISO-8601 format).
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(@javax.annotation.Nullable OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public GetInvoiceList200ResponseDataRowsInner isSealed(@javax.annotation.Nullable Boolean isSealed) {
    this.isSealed = isSealed;
    return this;
  }

  /**
   * Indicates whether the invoice is sealed.
   * @return isSealed
   */
  @javax.annotation.Nullable
  public Boolean getIsSealed() {
    return isSealed;
  }

  public void setIsSealed(@javax.annotation.Nullable Boolean isSealed) {
    this.isSealed = isSealed;
  }


  public GetInvoiceList200ResponseDataRowsInner issuedAt(@javax.annotation.Nullable OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
    return this;
  }

  /**
   * Date and time when the invoice was issued (ISO-8601 format).
   * @return issuedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIssuedAt() {
    return issuedAt;
  }

  public void setIssuedAt(@javax.annotation.Nullable OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
  }


  public GetInvoiceList200ResponseDataRowsInner vatTotal(@javax.annotation.Nullable String vatTotal) {
    this.vatTotal = vatTotal;
    return this;
  }

  /**
   * Total amount of VAT charged on the invoice.
   * @return vatTotal
   */
  @javax.annotation.Nullable
  public String getVatTotal() {
    return vatTotal;
  }

  public void setVatTotal(@javax.annotation.Nullable String vatTotal) {
    this.vatTotal = vatTotal;
  }


  public GetInvoiceList200ResponseDataRowsInner createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time when the invoice was created (ISO-8601 format).
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetInvoiceList200ResponseDataRowsInner isOverdue(@javax.annotation.Nullable Boolean isOverdue) {
    this.isOverdue = isOverdue;
    return this;
  }

  /**
   * Indicates whether the invoice is overdue.
   * @return isOverdue
   */
  @javax.annotation.Nullable
  public Boolean getIsOverdue() {
    return isOverdue;
  }

  public void setIsOverdue(@javax.annotation.Nullable Boolean isOverdue) {
    this.isOverdue = isOverdue;
  }


  public GetInvoiceList200ResponseDataRowsInner contractId(@javax.annotation.Nonnull String contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Unique identifier of the related contract.
   * @return contractId
   */
  @javax.annotation.Nonnull
  public String getContractId() {
    return contractId;
  }

  public void setContractId(@javax.annotation.Nonnull String contractId) {
    this.contractId = contractId;
  }


  public GetInvoiceList200ResponseDataRowsInner isOffcycle(@javax.annotation.Nullable Boolean isOffcycle) {
    this.isOffcycle = isOffcycle;
    return this;
  }

  /**
   * Indicates whether the invoice is off-cycle.
   * @return isOffcycle
   */
  @javax.annotation.Nullable
  public Boolean getIsOffcycle() {
    return isOffcycle;
  }

  public void setIsOffcycle(@javax.annotation.Nullable Boolean isOffcycle) {
    this.isOffcycle = isOffcycle;
  }


  public GetInvoiceList200ResponseDataRowsInner exchangeFee(@javax.annotation.Nullable String exchangeFee) {
    this.exchangeFee = exchangeFee;
    return this;
  }

  /**
   * Fee related to currency exchange for the invoice.
   * @return exchangeFee
   */
  @javax.annotation.Nullable
  public String getExchangeFee() {
    return exchangeFee;
  }

  public void setExchangeFee(@javax.annotation.Nullable String exchangeFee) {
    this.exchangeFee = exchangeFee;
  }


  public GetInvoiceList200ResponseDataRowsInner processedAt(@javax.annotation.Nullable OffsetDateTime processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * Date and time when the invoice was processed (ISO-8601 format).
   * @return processedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcessedAt() {
    return processedAt;
  }

  public void setProcessedAt(@javax.annotation.Nullable OffsetDateTime processedAt) {
    this.processedAt = processedAt;
  }


  public GetInvoiceList200ResponseDataRowsInner hasBreakdown(@javax.annotation.Nullable Boolean hasBreakdown) {
    this.hasBreakdown = hasBreakdown;
    return this;
  }

  /**
   * Indicates whether the invoice includes a breakdown of items.
   * @return hasBreakdown
   */
  @javax.annotation.Nullable
  public Boolean getHasBreakdown() {
    return hasBreakdown;
  }

  public void setHasBreakdown(@javax.annotation.Nullable Boolean hasBreakdown) {
    this.hasBreakdown = hasBreakdown;
  }


  public GetInvoiceList200ResponseDataRowsInner isEarlyPaid(@javax.annotation.Nullable Boolean isEarlyPaid) {
    this.isEarlyPaid = isEarlyPaid;
    return this;
  }

  /**
   * Indicates whether the invoice was paid early.
   * @return isEarlyPaid
   */
  @javax.annotation.Nullable
  public Boolean getIsEarlyPaid() {
    return isEarlyPaid;
  }

  public void setIsEarlyPaid(@javax.annotation.Nullable Boolean isEarlyPaid) {
    this.isEarlyPaid = isEarlyPaid;
  }


  public GetInvoiceList200ResponseDataRowsInner paymentMethod(@javax.annotation.Nullable String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Method used to pay the invoice.
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(@javax.annotation.Nullable String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public GetInvoiceList200ResponseDataRowsInner vatPercentage(@javax.annotation.Nullable String vatPercentage) {
    this.vatPercentage = vatPercentage;
    return this;
  }

  /**
   * Percentage of VAT charged on the invoice.
   * @return vatPercentage
   */
  @javax.annotation.Nullable
  public String getVatPercentage() {
    return vatPercentage;
  }

  public void setVatPercentage(@javax.annotation.Nullable String vatPercentage) {
    this.vatPercentage = vatPercentage;
  }


  public GetInvoiceList200ResponseDataRowsInner earlyPayoutFee(@javax.annotation.Nullable String earlyPayoutFee) {
    this.earlyPayoutFee = earlyPayoutFee;
    return this;
  }

  /**
   * Fee charged for early payout of the invoice.
   * @return earlyPayoutFee
   */
  @javax.annotation.Nullable
  public String getEarlyPayoutFee() {
    return earlyPayoutFee;
  }

  public void setEarlyPayoutFee(@javax.annotation.Nullable String earlyPayoutFee) {
    this.earlyPayoutFee = earlyPayoutFee;
  }


  public GetInvoiceList200ResponseDataRowsInner paymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * Currency in which the invoice was paid.
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public GetInvoiceList200ResponseDataRowsInner moneyReceivedAt(@javax.annotation.Nullable OffsetDateTime moneyReceivedAt) {
    this.moneyReceivedAt = moneyReceivedAt;
    return this;
  }

  /**
   * Date and time when the payment was received (ISO-8601 format).
   * @return moneyReceivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMoneyReceivedAt() {
    return moneyReceivedAt;
  }

  public void setMoneyReceivedAt(@javax.annotation.Nullable OffsetDateTime moneyReceivedAt) {
    this.moneyReceivedAt = moneyReceivedAt;
  }


  public GetInvoiceList200ResponseDataRowsInner paymentProcessedAt(@javax.annotation.Nullable OffsetDateTime paymentProcessedAt) {
    this.paymentProcessedAt = paymentProcessedAt;
    return this;
  }

  /**
   * Date and time when the payment was processed (ISO-8601 format).
   * @return paymentProcessedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaymentProcessedAt() {
    return paymentProcessedAt;
  }

  public void setPaymentProcessedAt(@javax.annotation.Nullable OffsetDateTime paymentProcessedAt) {
    this.paymentProcessedAt = paymentProcessedAt;
  }


  public GetInvoiceList200ResponseDataRowsInner isPaidToContractor(@javax.annotation.Nullable Boolean isPaidToContractor) {
    this.isPaidToContractor = isPaidToContractor;
    return this;
  }

  /**
   * Indicates whether the invoice was paid to the contractor.
   * @return isPaidToContractor
   */
  @javax.annotation.Nullable
  public Boolean getIsPaidToContractor() {
    return isPaidToContractor;
  }

  public void setIsPaidToContractor(@javax.annotation.Nullable Boolean isPaidToContractor) {
    this.isPaidToContractor = isPaidToContractor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInvoiceList200ResponseDataRowsInner getInvoiceList200ResponseDataRowsInner = (GetInvoiceList200ResponseDataRowsInner) o;
    return Objects.equals(this.id, getInvoiceList200ResponseDataRowsInner.id) &&
        Objects.equals(this.fee, getInvoiceList200ResponseDataRowsInner.fee) &&
        Objects.equals(this.type, getInvoiceList200ResponseDataRowsInner.type) &&
        Objects.equals(this.label, getInvoiceList200ResponseDataRowsInner.label) &&
        Objects.equals(this.total, getInvoiceList200ResponseDataRowsInner.total) &&
        Objects.equals(this.amount, getInvoiceList200ResponseDataRowsInner.amount) &&
        Objects.equals(this.status, getInvoiceList200ResponseDataRowsInner.status) &&
        Objects.equals(this.vatId, getInvoiceList200ResponseDataRowsInner.vatId) &&
        Objects.equals(this.paidAt, getInvoiceList200ResponseDataRowsInner.paidAt) &&
        Objects.equals(this.contract, getInvoiceList200ResponseDataRowsInner.contract) &&
        Objects.equals(this.currency, getInvoiceList200ResponseDataRowsInner.currency) &&
        Objects.equals(this.deelFee, getInvoiceList200ResponseDataRowsInner.deelFee) &&
        Objects.equals(this.dueDate, getInvoiceList200ResponseDataRowsInner.dueDate) &&
        Objects.equals(this.isSealed, getInvoiceList200ResponseDataRowsInner.isSealed) &&
        Objects.equals(this.issuedAt, getInvoiceList200ResponseDataRowsInner.issuedAt) &&
        Objects.equals(this.vatTotal, getInvoiceList200ResponseDataRowsInner.vatTotal) &&
        Objects.equals(this.createdAt, getInvoiceList200ResponseDataRowsInner.createdAt) &&
        Objects.equals(this.isOverdue, getInvoiceList200ResponseDataRowsInner.isOverdue) &&
        Objects.equals(this.contractId, getInvoiceList200ResponseDataRowsInner.contractId) &&
        Objects.equals(this.isOffcycle, getInvoiceList200ResponseDataRowsInner.isOffcycle) &&
        Objects.equals(this.exchangeFee, getInvoiceList200ResponseDataRowsInner.exchangeFee) &&
        Objects.equals(this.processedAt, getInvoiceList200ResponseDataRowsInner.processedAt) &&
        Objects.equals(this.hasBreakdown, getInvoiceList200ResponseDataRowsInner.hasBreakdown) &&
        Objects.equals(this.isEarlyPaid, getInvoiceList200ResponseDataRowsInner.isEarlyPaid) &&
        Objects.equals(this.paymentMethod, getInvoiceList200ResponseDataRowsInner.paymentMethod) &&
        Objects.equals(this.vatPercentage, getInvoiceList200ResponseDataRowsInner.vatPercentage) &&
        Objects.equals(this.earlyPayoutFee, getInvoiceList200ResponseDataRowsInner.earlyPayoutFee) &&
        Objects.equals(this.paymentCurrency, getInvoiceList200ResponseDataRowsInner.paymentCurrency) &&
        Objects.equals(this.moneyReceivedAt, getInvoiceList200ResponseDataRowsInner.moneyReceivedAt) &&
        Objects.equals(this.paymentProcessedAt, getInvoiceList200ResponseDataRowsInner.paymentProcessedAt) &&
        Objects.equals(this.isPaidToContractor, getInvoiceList200ResponseDataRowsInner.isPaidToContractor);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fee, type, label, total, amount, status, vatId, paidAt, contract, currency, deelFee, dueDate, isSealed, issuedAt, vatTotal, createdAt, isOverdue, contractId, isOffcycle, exchangeFee, processedAt, hasBreakdown, isEarlyPaid, paymentMethod, vatPercentage, earlyPayoutFee, paymentCurrency, moneyReceivedAt, paymentProcessedAt, isPaidToContractor);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInvoiceList200ResponseDataRowsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vatId: ").append(toIndentedString(vatId)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deelFee: ").append(toIndentedString(deelFee)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    isSealed: ").append(toIndentedString(isSealed)).append("\n");
    sb.append("    issuedAt: ").append(toIndentedString(issuedAt)).append("\n");
    sb.append("    vatTotal: ").append(toIndentedString(vatTotal)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isOverdue: ").append(toIndentedString(isOverdue)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    isOffcycle: ").append(toIndentedString(isOffcycle)).append("\n");
    sb.append("    exchangeFee: ").append(toIndentedString(exchangeFee)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    hasBreakdown: ").append(toIndentedString(hasBreakdown)).append("\n");
    sb.append("    isEarlyPaid: ").append(toIndentedString(isEarlyPaid)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    vatPercentage: ").append(toIndentedString(vatPercentage)).append("\n");
    sb.append("    earlyPayoutFee: ").append(toIndentedString(earlyPayoutFee)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    moneyReceivedAt: ").append(toIndentedString(moneyReceivedAt)).append("\n");
    sb.append("    paymentProcessedAt: ").append(toIndentedString(paymentProcessedAt)).append("\n");
    sb.append("    isPaidToContractor: ").append(toIndentedString(isPaidToContractor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fee");
    openapiFields.add("type");
    openapiFields.add("label");
    openapiFields.add("total");
    openapiFields.add("amount");
    openapiFields.add("status");
    openapiFields.add("vat_id");
    openapiFields.add("paid_at");
    openapiFields.add("contract");
    openapiFields.add("currency");
    openapiFields.add("deel_fee");
    openapiFields.add("due_date");
    openapiFields.add("is_sealed");
    openapiFields.add("issued_at");
    openapiFields.add("vat_total");
    openapiFields.add("created_at");
    openapiFields.add("is_overdue");
    openapiFields.add("contract_id");
    openapiFields.add("is_offcycle");
    openapiFields.add("exchange_fee");
    openapiFields.add("processed_at");
    openapiFields.add("has_breakdown");
    openapiFields.add("is_early_paid");
    openapiFields.add("payment_method");
    openapiFields.add("vat_percentage");
    openapiFields.add("early_payout_fee");
    openapiFields.add("payment_currency");
    openapiFields.add("money_received_at");
    openapiFields.add("payment_processed_at");
    openapiFields.add("is_paid_to_contractor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("vat_id");
    openapiRequiredFields.add("paid_at");
    openapiRequiredFields.add("contract");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("due_date");
    openapiRequiredFields.add("issued_at");
    openapiRequiredFields.add("vat_total");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("is_overdue");
    openapiRequiredFields.add("contract_id");
    openapiRequiredFields.add("vat_percentage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetInvoiceList200ResponseDataRowsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetInvoiceList200ResponseDataRowsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetInvoiceList200ResponseDataRowsInner is not found in the empty JSON string", GetInvoiceList200ResponseDataRowsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetInvoiceList200ResponseDataRowsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetInvoiceList200ResponseDataRowsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetInvoiceList200ResponseDataRowsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("vat_id") != null && !jsonObj.get("vat_id").isJsonNull()) && !jsonObj.get("vat_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_id").toString()));
      }
      // validate the required field `contract`
      GetInvoiceList200ResponseDataRowsInnerContract.validateJsonElement(jsonObj.get("contract"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("deel_fee") != null && !jsonObj.get("deel_fee").isJsonNull()) && !jsonObj.get("deel_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deel_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deel_fee").toString()));
      }
      if ((jsonObj.get("vat_total") != null && !jsonObj.get("vat_total").isJsonNull()) && !jsonObj.get("vat_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_total").toString()));
      }
      if (!jsonObj.get("contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_id").toString()));
      }
      if ((jsonObj.get("exchange_fee") != null && !jsonObj.get("exchange_fee").isJsonNull()) && !jsonObj.get("exchange_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange_fee").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if ((jsonObj.get("vat_percentage") != null && !jsonObj.get("vat_percentage").isJsonNull()) && !jsonObj.get("vat_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_percentage").toString()));
      }
      if ((jsonObj.get("early_payout_fee") != null && !jsonObj.get("early_payout_fee").isJsonNull()) && !jsonObj.get("early_payout_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `early_payout_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("early_payout_fee").toString()));
      }
      if ((jsonObj.get("payment_currency") != null && !jsonObj.get("payment_currency").isJsonNull()) && !jsonObj.get("payment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetInvoiceList200ResponseDataRowsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetInvoiceList200ResponseDataRowsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetInvoiceList200ResponseDataRowsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetInvoiceList200ResponseDataRowsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetInvoiceList200ResponseDataRowsInner>() {
           @Override
           public void write(JsonWriter out, GetInvoiceList200ResponseDataRowsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetInvoiceList200ResponseDataRowsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetInvoiceList200ResponseDataRowsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetInvoiceList200ResponseDataRowsInner
   * @throws IOException if the JSON string is invalid with respect to GetInvoiceList200ResponseDataRowsInner
   */
  public static GetInvoiceList200ResponseDataRowsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetInvoiceList200ResponseDataRowsInner.class);
  }

  /**
   * Convert an instance of GetInvoiceList200ResponseDataRowsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

