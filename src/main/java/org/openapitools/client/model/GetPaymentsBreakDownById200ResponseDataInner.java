/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPaymentsBreakDownById200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-12T13:30:33.173921421Z[GMT]", comments = "Generator version: 7.10.0")
public class GetPaymentsBreakDownById200ResponseDataInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private String date;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  @javax.annotation.Nullable
  private String team;

  public static final String SERIALIZED_NAME_WORK = "work";
  @SerializedName(SERIALIZED_NAME_WORK)
  @javax.annotation.Nullable
  private String work;

  public static final String SERIALIZED_NAME_BONUS = "bonus";
  @SerializedName(SERIALIZED_NAME_BONUS)
  @javax.annotation.Nullable
  private String bonus;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private String total;

  public static final String SERIALIZED_NAME_OTHERS = "others";
  @SerializedName(SERIALIZED_NAME_OTHERS)
  @javax.annotation.Nullable
  private String others;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_EXPENSES = "expenses";
  @SerializedName(SERIALIZED_NAME_EXPENSES)
  @javax.annotation.Nullable
  private String expenses;

  public static final String SERIALIZED_NAME_OVERTIME = "overtime";
  @SerializedName(SERIALIZED_NAME_OVERTIME)
  @javax.annotation.Nullable
  private String overtime;

  public static final String SERIALIZED_NAME_PRO_RATA = "pro_rata";
  @SerializedName(SERIALIZED_NAME_PRO_RATA)
  @javax.annotation.Nullable
  private String proRata;

  public static final String SERIALIZED_NAME_APPROVERS = "approvers";
  @SerializedName(SERIALIZED_NAME_APPROVERS)
  @javax.annotation.Nullable
  private String approvers;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  @javax.annotation.Nullable
  private String frequency;

  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  @javax.annotation.Nullable
  private String adjustment;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  @javax.annotation.Nullable
  private String deductions;

  public static final String SERIALIZED_NAME_COMMISSIONS = "commissions";
  @SerializedName(SERIALIZED_NAME_COMMISSIONS)
  @javax.annotation.Nullable
  private String commissions;

  public static final String SERIALIZED_NAME_APPROVE_DATE = "approve_date";
  @SerializedName(SERIALIZED_NAME_APPROVE_DATE)
  @javax.annotation.Nullable
  private String approveDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "payment_date";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  @javax.annotation.Nullable
  private String paymentDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  @javax.annotation.Nullable
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_PROCESSING_FEE = "processing_fee";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FEE)
  @javax.annotation.Nullable
  private String processingFee;

  public static final String SERIALIZED_NAME_RECEIPT_NUMBER = "receipt_number";
  @SerializedName(SERIALIZED_NAME_RECEIPT_NUMBER)
  @javax.annotation.Nullable
  private String receiptNumber;

  public static final String SERIALIZED_NAME_CONTRACT_COUNTRY = "contract_country";
  @SerializedName(SERIALIZED_NAME_CONTRACT_COUNTRY)
  @javax.annotation.Nullable
  private String contractCountry;

  public static final String SERIALIZED_NAME_CONTRACTOR_EMAIL = "contractor_email";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_EMAIL)
  @javax.annotation.Nullable
  private String contractorEmail;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "payment_currency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  @javax.annotation.Nullable
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_CONTRACT_START_DATE = "contract_start_date";
  @SerializedName(SERIALIZED_NAME_CONTRACT_START_DATE)
  @javax.annotation.Nullable
  private String contractStartDate;

  public static final String SERIALIZED_NAME_GENERAL_LEDGER_ACCOUNT = "general_ledger_account";
  @SerializedName(SERIALIZED_NAME_GENERAL_LEDGER_ACCOUNT)
  @javax.annotation.Nullable
  private String generalLedgerAccount;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENT_CURRENCY = "total_payment_currency";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENT_CURRENCY)
  @javax.annotation.Nullable
  private String totalPaymentCurrency;

  public static final String SERIALIZED_NAME_CONTRACTOR_EMPLOYEE_NAME = "contractor_employee_name";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_EMPLOYEE_NAME)
  @javax.annotation.Nullable
  private String contractorEmployeeName;

  public static final String SERIALIZED_NAME_CONTRACTOR_UNIQUE_IDENTIFIER = "contractor_unique_identifier";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String contractorUniqueIdentifier;

  public GetPaymentsBreakDownById200ResponseDataInner() {
  }

  public GetPaymentsBreakDownById200ResponseDataInner date(@javax.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  /**
   * The date associated with the payment breakdown.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable String date) {
    this.date = date;
  }


  public GetPaymentsBreakDownById200ResponseDataInner team(@javax.annotation.Nullable String team) {
    this.team = team;
    return this;
  }

  /**
   * The name of the team or company associated with the payment.
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(@javax.annotation.Nullable String team) {
    this.team = team;
  }


  public GetPaymentsBreakDownById200ResponseDataInner work(@javax.annotation.Nullable String work) {
    this.work = work;
    return this;
  }

  /**
   * Amount associated with work payment.
   * @return work
   */
  @javax.annotation.Nullable
  public String getWork() {
    return work;
  }

  public void setWork(@javax.annotation.Nullable String work) {
    this.work = work;
  }


  public GetPaymentsBreakDownById200ResponseDataInner bonus(@javax.annotation.Nullable String bonus) {
    this.bonus = bonus;
    return this;
  }

  /**
   * Bonus payment amount.
   * @return bonus
   */
  @javax.annotation.Nullable
  public String getBonus() {
    return bonus;
  }

  public void setBonus(@javax.annotation.Nullable String bonus) {
    this.bonus = bonus;
  }


  public GetPaymentsBreakDownById200ResponseDataInner total(@javax.annotation.Nullable String total) {
    this.total = total;
    return this;
  }

  /**
   * Total payment due for this breakdown item.
   * @return total
   */
  @javax.annotation.Nullable
  public String getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable String total) {
    this.total = total;
  }


  public GetPaymentsBreakDownById200ResponseDataInner others(@javax.annotation.Nullable String others) {
    this.others = others;
    return this;
  }

  /**
   * Other payment amounts.
   * @return others
   */
  @javax.annotation.Nullable
  public String getOthers() {
    return others;
  }

  public void setOthers(@javax.annotation.Nullable String others) {
    this.others = others;
  }


  public GetPaymentsBreakDownById200ResponseDataInner currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency code used for this payment.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public GetPaymentsBreakDownById200ResponseDataInner expenses(@javax.annotation.Nullable String expenses) {
    this.expenses = expenses;
    return this;
  }

  /**
   * Expenses related to the payment.
   * @return expenses
   */
  @javax.annotation.Nullable
  public String getExpenses() {
    return expenses;
  }

  public void setExpenses(@javax.annotation.Nullable String expenses) {
    this.expenses = expenses;
  }


  public GetPaymentsBreakDownById200ResponseDataInner overtime(@javax.annotation.Nullable String overtime) {
    this.overtime = overtime;
    return this;
  }

  /**
   * Overtime payment amount.
   * @return overtime
   */
  @javax.annotation.Nullable
  public String getOvertime() {
    return overtime;
  }

  public void setOvertime(@javax.annotation.Nullable String overtime) {
    this.overtime = overtime;
  }


  public GetPaymentsBreakDownById200ResponseDataInner proRata(@javax.annotation.Nullable String proRata) {
    this.proRata = proRata;
    return this;
  }

  /**
   * Pro-rated payment amount.
   * @return proRata
   */
  @javax.annotation.Nullable
  public String getProRata() {
    return proRata;
  }

  public void setProRata(@javax.annotation.Nullable String proRata) {
    this.proRata = proRata;
  }


  public GetPaymentsBreakDownById200ResponseDataInner approvers(@javax.annotation.Nullable String approvers) {
    this.approvers = approvers;
    return this;
  }

  /**
   * Approvers of the payment breakdown.
   * @return approvers
   */
  @javax.annotation.Nullable
  public String getApprovers() {
    return approvers;
  }

  public void setApprovers(@javax.annotation.Nullable String approvers) {
    this.approvers = approvers;
  }


  public GetPaymentsBreakDownById200ResponseDataInner frequency(@javax.annotation.Nullable String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Frequency of payment (e.g., monthly, weekly).
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(@javax.annotation.Nullable String frequency) {
    this.frequency = frequency;
  }


  public GetPaymentsBreakDownById200ResponseDataInner adjustment(@javax.annotation.Nullable String adjustment) {
    this.adjustment = adjustment;
    return this;
  }

  /**
   * Adjustment amount for the payment.
   * @return adjustment
   */
  @javax.annotation.Nullable
  public String getAdjustment() {
    return adjustment;
  }

  public void setAdjustment(@javax.annotation.Nullable String adjustment) {
    this.adjustment = adjustment;
  }


  public GetPaymentsBreakDownById200ResponseDataInner deductions(@javax.annotation.Nullable String deductions) {
    this.deductions = deductions;
    return this;
  }

  /**
   * Deductions from the payment.
   * @return deductions
   */
  @javax.annotation.Nullable
  public String getDeductions() {
    return deductions;
  }

  public void setDeductions(@javax.annotation.Nullable String deductions) {
    this.deductions = deductions;
  }


  public GetPaymentsBreakDownById200ResponseDataInner commissions(@javax.annotation.Nullable String commissions) {
    this.commissions = commissions;
    return this;
  }

  /**
   * Commissions included in the payment.
   * @return commissions
   */
  @javax.annotation.Nullable
  public String getCommissions() {
    return commissions;
  }

  public void setCommissions(@javax.annotation.Nullable String commissions) {
    this.commissions = commissions;
  }


  public GetPaymentsBreakDownById200ResponseDataInner approveDate(@javax.annotation.Nullable String approveDate) {
    this.approveDate = approveDate;
    return this;
  }

  /**
   * The date when the payment was approved.
   * @return approveDate
   */
  @javax.annotation.Nullable
  public String getApproveDate() {
    return approveDate;
  }

  public void setApproveDate(@javax.annotation.Nullable String approveDate) {
    this.approveDate = approveDate;
  }


  public GetPaymentsBreakDownById200ResponseDataInner paymentDate(@javax.annotation.Nullable String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * The date the payment was made.
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public String getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(@javax.annotation.Nullable String paymentDate) {
    this.paymentDate = paymentDate;
  }


  public GetPaymentsBreakDownById200ResponseDataInner invoiceNumber(@javax.annotation.Nullable String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Invoice number associated with the payment.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(@javax.annotation.Nullable String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public GetPaymentsBreakDownById200ResponseDataInner processingFee(@javax.annotation.Nullable String processingFee) {
    this.processingFee = processingFee;
    return this;
  }

  /**
   * Processing fee applied to the payment.
   * @return processingFee
   */
  @javax.annotation.Nullable
  public String getProcessingFee() {
    return processingFee;
  }

  public void setProcessingFee(@javax.annotation.Nullable String processingFee) {
    this.processingFee = processingFee;
  }


  public GetPaymentsBreakDownById200ResponseDataInner receiptNumber(@javax.annotation.Nullable String receiptNumber) {
    this.receiptNumber = receiptNumber;
    return this;
  }

  /**
   * Receipt number for the payment.
   * @return receiptNumber
   */
  @javax.annotation.Nullable
  public String getReceiptNumber() {
    return receiptNumber;
  }

  public void setReceiptNumber(@javax.annotation.Nullable String receiptNumber) {
    this.receiptNumber = receiptNumber;
  }


  public GetPaymentsBreakDownById200ResponseDataInner contractCountry(@javax.annotation.Nullable String contractCountry) {
    this.contractCountry = contractCountry;
    return this;
  }

  /**
   * Country where the contract is associated.
   * @return contractCountry
   */
  @javax.annotation.Nullable
  public String getContractCountry() {
    return contractCountry;
  }

  public void setContractCountry(@javax.annotation.Nullable String contractCountry) {
    this.contractCountry = contractCountry;
  }


  public GetPaymentsBreakDownById200ResponseDataInner contractorEmail(@javax.annotation.Nullable String contractorEmail) {
    this.contractorEmail = contractorEmail;
    return this;
  }

  /**
   * Worker&#39;s email address.
   * @return contractorEmail
   */
  @javax.annotation.Nullable
  public String getContractorEmail() {
    return contractorEmail;
  }

  public void setContractorEmail(@javax.annotation.Nullable String contractorEmail) {
    this.contractorEmail = contractorEmail;
  }


  public GetPaymentsBreakDownById200ResponseDataInner paymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * Currency in which the payment was made.
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public GetPaymentsBreakDownById200ResponseDataInner contractStartDate(@javax.annotation.Nullable String contractStartDate) {
    this.contractStartDate = contractStartDate;
    return this;
  }

  /**
   * Start date of the contract.
   * @return contractStartDate
   */
  @javax.annotation.Nullable
  public String getContractStartDate() {
    return contractStartDate;
  }

  public void setContractStartDate(@javax.annotation.Nullable String contractStartDate) {
    this.contractStartDate = contractStartDate;
  }


  public GetPaymentsBreakDownById200ResponseDataInner generalLedgerAccount(@javax.annotation.Nullable String generalLedgerAccount) {
    this.generalLedgerAccount = generalLedgerAccount;
    return this;
  }

  /**
   * General ledger account for the payment.
   * @return generalLedgerAccount
   */
  @javax.annotation.Nullable
  public String getGeneralLedgerAccount() {
    return generalLedgerAccount;
  }

  public void setGeneralLedgerAccount(@javax.annotation.Nullable String generalLedgerAccount) {
    this.generalLedgerAccount = generalLedgerAccount;
  }


  public GetPaymentsBreakDownById200ResponseDataInner totalPaymentCurrency(@javax.annotation.Nullable String totalPaymentCurrency) {
    this.totalPaymentCurrency = totalPaymentCurrency;
    return this;
  }

  /**
   * Total payment in the payment currency.
   * @return totalPaymentCurrency
   */
  @javax.annotation.Nullable
  public String getTotalPaymentCurrency() {
    return totalPaymentCurrency;
  }

  public void setTotalPaymentCurrency(@javax.annotation.Nullable String totalPaymentCurrency) {
    this.totalPaymentCurrency = totalPaymentCurrency;
  }


  public GetPaymentsBreakDownById200ResponseDataInner contractorEmployeeName(@javax.annotation.Nullable String contractorEmployeeName) {
    this.contractorEmployeeName = contractorEmployeeName;
    return this;
  }

  /**
   * Worker&#39;s name.
   * @return contractorEmployeeName
   */
  @javax.annotation.Nullable
  public String getContractorEmployeeName() {
    return contractorEmployeeName;
  }

  public void setContractorEmployeeName(@javax.annotation.Nullable String contractorEmployeeName) {
    this.contractorEmployeeName = contractorEmployeeName;
  }


  public GetPaymentsBreakDownById200ResponseDataInner contractorUniqueIdentifier(@javax.annotation.Nullable String contractorUniqueIdentifier) {
    this.contractorUniqueIdentifier = contractorUniqueIdentifier;
    return this;
  }

  /**
   * Worker&#39;s unique identifier as a UUID.
   * @return contractorUniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getContractorUniqueIdentifier() {
    return contractorUniqueIdentifier;
  }

  public void setContractorUniqueIdentifier(@javax.annotation.Nullable String contractorUniqueIdentifier) {
    this.contractorUniqueIdentifier = contractorUniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPaymentsBreakDownById200ResponseDataInner getPaymentsBreakDownById200ResponseDataInner = (GetPaymentsBreakDownById200ResponseDataInner) o;
    return Objects.equals(this.date, getPaymentsBreakDownById200ResponseDataInner.date) &&
        Objects.equals(this.team, getPaymentsBreakDownById200ResponseDataInner.team) &&
        Objects.equals(this.work, getPaymentsBreakDownById200ResponseDataInner.work) &&
        Objects.equals(this.bonus, getPaymentsBreakDownById200ResponseDataInner.bonus) &&
        Objects.equals(this.total, getPaymentsBreakDownById200ResponseDataInner.total) &&
        Objects.equals(this.others, getPaymentsBreakDownById200ResponseDataInner.others) &&
        Objects.equals(this.currency, getPaymentsBreakDownById200ResponseDataInner.currency) &&
        Objects.equals(this.expenses, getPaymentsBreakDownById200ResponseDataInner.expenses) &&
        Objects.equals(this.overtime, getPaymentsBreakDownById200ResponseDataInner.overtime) &&
        Objects.equals(this.proRata, getPaymentsBreakDownById200ResponseDataInner.proRata) &&
        Objects.equals(this.approvers, getPaymentsBreakDownById200ResponseDataInner.approvers) &&
        Objects.equals(this.frequency, getPaymentsBreakDownById200ResponseDataInner.frequency) &&
        Objects.equals(this.adjustment, getPaymentsBreakDownById200ResponseDataInner.adjustment) &&
        Objects.equals(this.deductions, getPaymentsBreakDownById200ResponseDataInner.deductions) &&
        Objects.equals(this.commissions, getPaymentsBreakDownById200ResponseDataInner.commissions) &&
        Objects.equals(this.approveDate, getPaymentsBreakDownById200ResponseDataInner.approveDate) &&
        Objects.equals(this.paymentDate, getPaymentsBreakDownById200ResponseDataInner.paymentDate) &&
        Objects.equals(this.invoiceNumber, getPaymentsBreakDownById200ResponseDataInner.invoiceNumber) &&
        Objects.equals(this.processingFee, getPaymentsBreakDownById200ResponseDataInner.processingFee) &&
        Objects.equals(this.receiptNumber, getPaymentsBreakDownById200ResponseDataInner.receiptNumber) &&
        Objects.equals(this.contractCountry, getPaymentsBreakDownById200ResponseDataInner.contractCountry) &&
        Objects.equals(this.contractorEmail, getPaymentsBreakDownById200ResponseDataInner.contractorEmail) &&
        Objects.equals(this.paymentCurrency, getPaymentsBreakDownById200ResponseDataInner.paymentCurrency) &&
        Objects.equals(this.contractStartDate, getPaymentsBreakDownById200ResponseDataInner.contractStartDate) &&
        Objects.equals(this.generalLedgerAccount, getPaymentsBreakDownById200ResponseDataInner.generalLedgerAccount) &&
        Objects.equals(this.totalPaymentCurrency, getPaymentsBreakDownById200ResponseDataInner.totalPaymentCurrency) &&
        Objects.equals(this.contractorEmployeeName, getPaymentsBreakDownById200ResponseDataInner.contractorEmployeeName) &&
        Objects.equals(this.contractorUniqueIdentifier, getPaymentsBreakDownById200ResponseDataInner.contractorUniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, team, work, bonus, total, others, currency, expenses, overtime, proRata, approvers, frequency, adjustment, deductions, commissions, approveDate, paymentDate, invoiceNumber, processingFee, receiptNumber, contractCountry, contractorEmail, paymentCurrency, contractStartDate, generalLedgerAccount, totalPaymentCurrency, contractorEmployeeName, contractorUniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPaymentsBreakDownById200ResponseDataInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    work: ").append(toIndentedString(work)).append("\n");
    sb.append("    bonus: ").append(toIndentedString(bonus)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    others: ").append(toIndentedString(others)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    expenses: ").append(toIndentedString(expenses)).append("\n");
    sb.append("    overtime: ").append(toIndentedString(overtime)).append("\n");
    sb.append("    proRata: ").append(toIndentedString(proRata)).append("\n");
    sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    commissions: ").append(toIndentedString(commissions)).append("\n");
    sb.append("    approveDate: ").append(toIndentedString(approveDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    receiptNumber: ").append(toIndentedString(receiptNumber)).append("\n");
    sb.append("    contractCountry: ").append(toIndentedString(contractCountry)).append("\n");
    sb.append("    contractorEmail: ").append(toIndentedString(contractorEmail)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    contractStartDate: ").append(toIndentedString(contractStartDate)).append("\n");
    sb.append("    generalLedgerAccount: ").append(toIndentedString(generalLedgerAccount)).append("\n");
    sb.append("    totalPaymentCurrency: ").append(toIndentedString(totalPaymentCurrency)).append("\n");
    sb.append("    contractorEmployeeName: ").append(toIndentedString(contractorEmployeeName)).append("\n");
    sb.append("    contractorUniqueIdentifier: ").append(toIndentedString(contractorUniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("team");
    openapiFields.add("work");
    openapiFields.add("bonus");
    openapiFields.add("total");
    openapiFields.add("others");
    openapiFields.add("currency");
    openapiFields.add("expenses");
    openapiFields.add("overtime");
    openapiFields.add("pro_rata");
    openapiFields.add("approvers");
    openapiFields.add("frequency");
    openapiFields.add("adjustment");
    openapiFields.add("deductions");
    openapiFields.add("commissions");
    openapiFields.add("approve_date");
    openapiFields.add("payment_date");
    openapiFields.add("invoice_number");
    openapiFields.add("processing_fee");
    openapiFields.add("receipt_number");
    openapiFields.add("contract_country");
    openapiFields.add("contractor_email");
    openapiFields.add("payment_currency");
    openapiFields.add("contract_start_date");
    openapiFields.add("general_ledger_account");
    openapiFields.add("total_payment_currency");
    openapiFields.add("contractor_employee_name");
    openapiFields.add("contractor_unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPaymentsBreakDownById200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPaymentsBreakDownById200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPaymentsBreakDownById200ResponseDataInner is not found in the empty JSON string", GetPaymentsBreakDownById200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPaymentsBreakDownById200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPaymentsBreakDownById200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("work") != null && !jsonObj.get("work").isJsonNull()) && !jsonObj.get("work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work").toString()));
      }
      if ((jsonObj.get("bonus") != null && !jsonObj.get("bonus").isJsonNull()) && !jsonObj.get("bonus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonus").toString()));
      }
      if ((jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if ((jsonObj.get("others") != null && !jsonObj.get("others").isJsonNull()) && !jsonObj.get("others").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `others` to be a primitive type in the JSON string but got `%s`", jsonObj.get("others").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("expenses") != null && !jsonObj.get("expenses").isJsonNull()) && !jsonObj.get("expenses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expenses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expenses").toString()));
      }
      if ((jsonObj.get("overtime") != null && !jsonObj.get("overtime").isJsonNull()) && !jsonObj.get("overtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overtime").toString()));
      }
      if ((jsonObj.get("pro_rata") != null && !jsonObj.get("pro_rata").isJsonNull()) && !jsonObj.get("pro_rata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pro_rata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pro_rata").toString()));
      }
      if ((jsonObj.get("approvers") != null && !jsonObj.get("approvers").isJsonNull()) && !jsonObj.get("approvers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvers").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("adjustment") != null && !jsonObj.get("adjustment").isJsonNull()) && !jsonObj.get("adjustment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustment").toString()));
      }
      if ((jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) && !jsonObj.get("deductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
      }
      if ((jsonObj.get("commissions") != null && !jsonObj.get("commissions").isJsonNull()) && !jsonObj.get("commissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commissions").toString()));
      }
      if ((jsonObj.get("approve_date") != null && !jsonObj.get("approve_date").isJsonNull()) && !jsonObj.get("approve_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approve_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approve_date").toString()));
      }
      if ((jsonObj.get("payment_date") != null && !jsonObj.get("payment_date").isJsonNull()) && !jsonObj.get("payment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_date").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("processing_fee") != null && !jsonObj.get("processing_fee").isJsonNull()) && !jsonObj.get("processing_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_fee").toString()));
      }
      if ((jsonObj.get("receipt_number") != null && !jsonObj.get("receipt_number").isJsonNull()) && !jsonObj.get("receipt_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_number").toString()));
      }
      if ((jsonObj.get("contract_country") != null && !jsonObj.get("contract_country").isJsonNull()) && !jsonObj.get("contract_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_country").toString()));
      }
      if ((jsonObj.get("contractor_email") != null && !jsonObj.get("contractor_email").isJsonNull()) && !jsonObj.get("contractor_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_email").toString()));
      }
      if ((jsonObj.get("payment_currency") != null && !jsonObj.get("payment_currency").isJsonNull()) && !jsonObj.get("payment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_currency").toString()));
      }
      if ((jsonObj.get("contract_start_date") != null && !jsonObj.get("contract_start_date").isJsonNull()) && !jsonObj.get("contract_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_start_date").toString()));
      }
      if ((jsonObj.get("general_ledger_account") != null && !jsonObj.get("general_ledger_account").isJsonNull()) && !jsonObj.get("general_ledger_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_ledger_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general_ledger_account").toString()));
      }
      if ((jsonObj.get("total_payment_currency") != null && !jsonObj.get("total_payment_currency").isJsonNull()) && !jsonObj.get("total_payment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_payment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_payment_currency").toString()));
      }
      if ((jsonObj.get("contractor_employee_name") != null && !jsonObj.get("contractor_employee_name").isJsonNull()) && !jsonObj.get("contractor_employee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_employee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_employee_name").toString()));
      }
      if ((jsonObj.get("contractor_unique_identifier") != null && !jsonObj.get("contractor_unique_identifier").isJsonNull()) && !jsonObj.get("contractor_unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPaymentsBreakDownById200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPaymentsBreakDownById200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPaymentsBreakDownById200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPaymentsBreakDownById200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPaymentsBreakDownById200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetPaymentsBreakDownById200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPaymentsBreakDownById200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPaymentsBreakDownById200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPaymentsBreakDownById200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetPaymentsBreakDownById200ResponseDataInner
   */
  public static GetPaymentsBreakDownById200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPaymentsBreakDownById200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetPaymentsBreakDownById200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

