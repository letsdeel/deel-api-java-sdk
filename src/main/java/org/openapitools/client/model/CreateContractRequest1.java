/*
 * Deel REST API
 * Deel REST API
 *
 * The version of the OpenAPI document: 1.25.0
 * Contact: apiteam@deel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.CreateContractRequest1OneOf;
import org.openapitools.client.model.CreateContractRequest1OneOf1;
import org.openapitools.client.model.CreateContractRequest1OneOf2;
import org.openapitools.client.model.CreateContractRequest1OneOf3;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfClient;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfCompensationDetails;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfJobTitle;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfMeta;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfSeniority;
import org.openapitools.client.model.CreateContractRequestAnyOfAllOfWorker;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-04T12:37:40.520952+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class CreateContractRequest1 extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateContractRequest1.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateContractRequest1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateContractRequest1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateContractRequest1OneOf> adapterCreateContractRequest1OneOf = gson.getDelegateAdapter(this, TypeToken.get(CreateContractRequest1OneOf.class));
            final TypeAdapter<CreateContractRequest1OneOf1> adapterCreateContractRequest1OneOf1 = gson.getDelegateAdapter(this, TypeToken.get(CreateContractRequest1OneOf1.class));
            final TypeAdapter<CreateContractRequest1OneOf2> adapterCreateContractRequest1OneOf2 = gson.getDelegateAdapter(this, TypeToken.get(CreateContractRequest1OneOf2.class));
            final TypeAdapter<CreateContractRequest1OneOf3> adapterCreateContractRequest1OneOf3 = gson.getDelegateAdapter(this, TypeToken.get(CreateContractRequest1OneOf3.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateContractRequest1>() {
                @Override
                public void write(JsonWriter out, CreateContractRequest1 value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CreateContractRequest1OneOf`
                    if (value.getActualInstance() instanceof CreateContractRequest1OneOf) {
                        JsonElement element = adapterCreateContractRequest1OneOf.toJsonTree((CreateContractRequest1OneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreateContractRequest1OneOf1`
                    if (value.getActualInstance() instanceof CreateContractRequest1OneOf1) {
                        JsonElement element = adapterCreateContractRequest1OneOf1.toJsonTree((CreateContractRequest1OneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreateContractRequest1OneOf2`
                    if (value.getActualInstance() instanceof CreateContractRequest1OneOf2) {
                        JsonElement element = adapterCreateContractRequest1OneOf2.toJsonTree((CreateContractRequest1OneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CreateContractRequest1OneOf3`
                    if (value.getActualInstance() instanceof CreateContractRequest1OneOf3) {
                        JsonElement element = adapterCreateContractRequest1OneOf3.toJsonTree((CreateContractRequest1OneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3");
                }

                @Override
                public CreateContractRequest1 read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CreateContractRequest1OneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateContractRequest1OneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreateContractRequest1OneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateContractRequest1OneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateContractRequest1OneOf'", e);
                    }
                    // deserialize CreateContractRequest1OneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateContractRequest1OneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreateContractRequest1OneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateContractRequest1OneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateContractRequest1OneOf1'", e);
                    }
                    // deserialize CreateContractRequest1OneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateContractRequest1OneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreateContractRequest1OneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateContractRequest1OneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateContractRequest1OneOf2'", e);
                    }
                    // deserialize CreateContractRequest1OneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateContractRequest1OneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreateContractRequest1OneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateContractRequest1OneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateContractRequest1OneOf3'", e);
                    }

                    if (match == 1) {
                        CreateContractRequest1 ret = new CreateContractRequest1();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateContractRequest1: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateContractRequest1() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateContractRequest1(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateContractRequest1OneOf", CreateContractRequest1OneOf.class);
        schemas.put("CreateContractRequest1OneOf1", CreateContractRequest1OneOf1.class);
        schemas.put("CreateContractRequest1OneOf2", CreateContractRequest1OneOf2.class);
        schemas.put("CreateContractRequest1OneOf3", CreateContractRequest1OneOf3.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateContractRequest1.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CreateContractRequest1OneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateContractRequest1OneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateContractRequest1OneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateContractRequest1OneOf3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3
     *
     * @return The actual instance (CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateContractRequest1OneOf`. If the actual instance is not `CreateContractRequest1OneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateContractRequest1OneOf`
     * @throws ClassCastException if the instance is not `CreateContractRequest1OneOf`
     */
    public CreateContractRequest1OneOf getCreateContractRequest1OneOf() throws ClassCastException {
        return (CreateContractRequest1OneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateContractRequest1OneOf1`. If the actual instance is not `CreateContractRequest1OneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateContractRequest1OneOf1`
     * @throws ClassCastException if the instance is not `CreateContractRequest1OneOf1`
     */
    public CreateContractRequest1OneOf1 getCreateContractRequest1OneOf1() throws ClassCastException {
        return (CreateContractRequest1OneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateContractRequest1OneOf2`. If the actual instance is not `CreateContractRequest1OneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateContractRequest1OneOf2`
     * @throws ClassCastException if the instance is not `CreateContractRequest1OneOf2`
     */
    public CreateContractRequest1OneOf2 getCreateContractRequest1OneOf2() throws ClassCastException {
        return (CreateContractRequest1OneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateContractRequest1OneOf3`. If the actual instance is not `CreateContractRequest1OneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateContractRequest1OneOf3`
     * @throws ClassCastException if the instance is not `CreateContractRequest1OneOf3`
     */
    public CreateContractRequest1OneOf3 getCreateContractRequest1OneOf3() throws ClassCastException {
        return (CreateContractRequest1OneOf3)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateContractRequest1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CreateContractRequest1OneOf
        try {
            CreateContractRequest1OneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreateContractRequest1OneOf1
        try {
            CreateContractRequest1OneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreateContractRequest1OneOf2
        try {
            CreateContractRequest1OneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CreateContractRequest1OneOf3
        try {
            CreateContractRequest1OneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreateContractRequest1OneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CreateContractRequest1 with oneOf schemas: CreateContractRequest1OneOf, CreateContractRequest1OneOf1, CreateContractRequest1OneOf2, CreateContractRequest1OneOf3. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CreateContractRequest1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateContractRequest1
     * @throws IOException if the JSON string is invalid with respect to CreateContractRequest1
     */
    public static CreateContractRequest1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateContractRequest1.class);
    }

    /**
     * Convert an instance of CreateContractRequest1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

